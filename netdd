#!/usr/bin/env bash

#screen -dmS netdd bash -c "wget -O /tmp/netdd https://os.dog/downloads/other/netdd && chmod 700 /tmp/netdd && /tmp/netdd -y -l"
export PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/sbin:/usr/local/bin:$PATH"
bname=`basename $0`

# prevent running from pipe
if [ $0 = "sh" ] || [ $0 = "bash" ]; then
	sleep 1
	echo "$bname does not work from pipe!"
	exit 1
fi

SCRIPT_PATH=`dirname $0`
SCRIPT_NAME=`basename $0`
cd $SCRIPT_PATH
mydir=`pwd`
myself="$mydir/$SCRIPT_NAME"

#config partition options
skip=2048
count=45056

#LATEST_URL="https://os.dog/downloads/iso/dog-1.47.zip"

# download timeout
TIMEOUT=20

TMPDIR="/tmp/dog"
url=
yes=
sshPass=
LIST=
LATEST=
STABLE=

RED="\e[31m"
WHITE="\e[0m"
GREEN="\e[32m"
BROWN="\e[33m"
BLUE="\e[34m"
PURPLE="\e[35m"
CYAN="\e[36m"
GRAY="\e[37m"

LIGHTRED="\e[1;31m" #good for AMD
YELLOW="\e[1;33m"
LIGHTGREEN="\e[1;32m" #good for Nvidia
LIGHTBLUE="\e[1;34m"
LIGHTPURPLE="\e[1;35m" #comments?
LIGHTCYAN="\e[1;36m" #very bright
LIGHTWHITE="\e[1;37m" #bold white

[[ -f /dog/boot ]] && thisDog=1
mkdir -p $TMPDIR

#Get root
if [[ $(id -u) -ne 0 ]]; then
	echo "Root privileges required"
	sudo chmod +x $0
	exec sudo $myself $*
fi

#function checkIp () {
#	echo $1 | awk 'BEGIN { FS = "." }; /^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$/ { if (($1 <= 255) && ($2 <= 255) && ($3 <= 255) && ($4 <= 255)) print("1") } '
#}
#checkIp 192.168.88.255
#exit

function showHelp {
	echo -e "${CYAN}Usage: netdd [option] <Path or URL to ZIP file with os.dog image>${WHITE}"
	echo -e
	echo -e "Common options:"
	echo -e "${GREEN}  -y|--yes                ${WHITE}Do not ask for confirmation, answer yes to all questions"
	echo -e "${GREEN}  --list	               ${WHITE}Show images list"
	echo -e "${GREEN}  -l|--latest             ${WHITE}Select latest image"
	echo -e "${GREEN}  -s|--stable             ${WHITE}Select stable image"
	echo -e "${GREEN}  -h|--help               ${WHITE}Show this message"	

	echo -e "Image download options:"
	echo -e "${GREEN}  -sshpass|--sshpassword  ${WHITE}Specify password for download via ssh"
	
	echo -e "Rig configuration options:"
	echo -e "${GREEN}  -id|--rigid             ${WHITE}Specify rig id"
	echo -e "${GREEN}  -password|--rigpassword ${WHITE}Specify rig password"
	echo -e "${GREEN}  -host|--righost         ${WHITE}Specify rig host"

	echo -e "\nExamples:"
	echo -e "${GREEN}  netdd -y --latest${WHITE}"
	echo -e "${GREEN}  netdd -y --rigid 118 --rigpassword qwerty --sshpassword 1 user@192.168.88.105:/dog/dog-1.39.zip${WHITE}"
}

function check_packages {
	[[ $checked -eq 1 ]] && return

	local need_install=(lsof curl wget unzip unzip gdisk libpcre2-8-0)
	[[ $sshPass -eq 1 ]] && need_install+=(expect)
	for idx in "${!need_install[@]}"; do
		dpkg -s "${need_install[$idx]}" > /dev/null 2>&1 && unset 'need_install[idx]'
	done

	if [[ ! -z "${need_install[@]}" ]]; then
		echo -e "${CYAN}> Installing required packages: ${WHITE}${need_install[@]}${WHITE}"
		apt update
		apt install -y "${need_install[@]}"
		[[ $? -ne 0 ]] && echo -e "${RED}Failed to install required packages${WHITE}" && exit
		echo -e "${GREEN}> Installed required packages successfully${WHITE}\n"
	fi
	checked=1
}

# Gets/downloads image
function get {
	cd $TMPDIR
	rm -f $TMPDIR/*dog*

	basename=`basename -s .zip "$url"`
	archname=`basename "$url"`

	# stop miner here to free some memory and prevent rig from rebooting on errors
	[[ $thisDog -eq 1 ]] && systemctl stop mining && systemctl stop wd && systemctl stop wd-load

	#Copy|download image to tmpfs
	echo -e "\n${CYAN}> Downloading image file${WHITE}"
	if [[ ! -z $sshPass ]]; then #need to scp
		expect -c "
			set timeout 1200
			spawn scp $url $TMPDIR/$archname
			while { true } {
				expect {
					-re \".*you sure you want to continue connecting.*\" { send \"yes\r\" }
					-re \".*ermission denied*\" { exit 1 }
					-re \".*assword*\" { send \"${sshPass}\r\" }					
				}
			}
		"
		exitcode=$?
		echo ""
		[[ $exitcode -ne 0 ]] && echo -e "${RED}> Something wrong while downloading image via ssh${WHITE}" && return 1
	elif [[ "$url" == *http* ||  "$url" == *ftp* ]]; then
		echo ""
		wget -t 0 -T $TIMEOUT "$url"
		[[ $? -ne 0 ]] && echo -e "${RED}> Image download failed. Check url${WHITE}" && return 1
	else
		[[ ! -f $url ]] && echo -e "${RED}> Image not found. Check path${WHITE}" && return 1
		cp -v $url $TMPDIR
		[[ $? -ne 0 ]] && echo -e "${RED}> Copy image failed${WHITE}" && return 1
	fi

	#check zip integrity
	echo -e "\n${CYAN}> Checking ZIP file integrity${WHITE}"
	unzip -t $TMPDIR/$archname > /dev/null
	[[ $? -ne 0 ]] && echo -e "${RED}> ZIP file is damaged${WHITE}" && return 1

	echo -e "${GREEN}> Image is ready${WHITE}"
	return 0
}

           
# Starting actions
function prepare {
	pstree -As $$ | grep -q "xinit" && echo -e "${RED}$bname does not work in X server console! Run it from text local or remote shell${WHITE}" && exit 1
	pstree -As $$ | grep -q -P "(ssh|shellinabox|hive-console)" || (echo -e "${YELLOW}$bname does not work in X server console! Make sure it is not running from it${WHITE}"; sleep 5)

	mem=$(free -m | awk 'NR == 2{print$2}')

	echo -e "${CYAN}***********************************${BROWN}
                    .--~~,__
       :-....,-------\`~~\`._.'
        \`-,,,  ,_      ;'~U'
         _,-' ,'\`-__; \'--.
       (_/'~~      ''''(;"
	echo -e "${YELLOW}     OS.dog Image Installation${WHITE}"
	echo -e "${CYAN}***********************************${WHITE}"
	echo
	echo -e "${GREEN}$url${WHITE}"
	echo "Total RAM=$mem Mb"
	echo
	[[ $mem -lt 3600 ]] && echo -e "${YELLOW}4 GB RAM is required, exiting${WHITE}" && exit 1

	PART_UUID=`cat /proc/cmdline | tr " " "\n" | grep "UUID" | sed 's/\(^root=UUID=\)//'`
	DISK_PART=`blkid | grep -m1 $PART_UUID | awk '{ print $1 }' | sed 's/://' | sed 's/\(^\/dev\/\)//'`
	DISK_NAME=`echo ${DISK_PART} | sed 's/\([[:digit:]]\)//'`
	DISK_SIZE=`cat /proc/partitions | grep -w "${DISK_NAME}" | awk '{ printf("%.f",$3/1024)}'`
	PART_SIZE=`cat /proc/partitions | grep -w "${DISK_PART}" | awk '{ printf("%.f",$3/1024)}'`

	echo -e "Current OS booted from ${LIGHTPURPLE}$DISK_NAME${WHITE} and whole drive size is ${CYAN}$DISK_SIZE${WHITE} Mb"
	[[ $DISK_SIZE -lt 7300 ]] && echo -e "\n${BROWN}The minimum disk size for OS.dog is 8 Gb${WHITE}" && exit

	if [[ $yes -ne 1 ]]; then
		echo -e "${RED}Warning: After os.dog installation, all your data on ${LIGHTPURPLE}$DISK_NAME ${RED}will be lost!${WHITE}"
		echo -en "\nType ${GREEN}\"yes\"${WHITE} if you want to install os.dog on ${LIGHTPURPLE}$DISK_NAME${WHITE}: "
		read -t 90 answer
		[[ $answer != "yes" ]] && echo -e "${YELLOW}\nBye, bye!${WHITE}" && exit
	fi

	#check programs
	check_packages

	#create tmpfs
	cat /proc/mounts | grep $TMPDIR > /dev/null 2>&1
	if [[ $? -ne 0 ]]; then
		mkdir $TMPDIR > /dev/null 2>&1
		mount none $TMPDIR -t tmpfs -o size=3000m
	fi


	#get old config
	mkdir -p $TMPDIR/old-config
	
	if [[ $thisDog -eq 1 ]]; then
		[[ -f /dog/cfg/rig.cfg ]] && cp /dog/cfg/rig.cfg ${TMPDIR}/old-config/
		[[ -f /dog/cfg/network.txt ]] && cp /dog/cfg/network.txt ${TMPDIR}/old-config/
		sync
	fi
	
	if [[ ! -z $RIG_ID && ! -z $PASSWD ]]; then
		[[ -z $HOST ]]&& HOST="https://os.dog/message.php"
		cfg="#Rig configuration file created by netdd at `date -R`\n"
		cfg+="RIG_ID=\"$RIG_ID\"\n"
		cfg+="PASSWD=\"$PASSWD\"\n"
		cfg+="HOST=\"$HOST\"\n"
		echo -e $cfg > ${TMPDIR}/old-config/rig.cfg
		sync
	fi 

	#get image zip
	get || exit

	#Disable kernel message to tty
	echo 0 > /proc/sys/kernel/printk
	echo 1 > /proc/sys/kernel/sysrq
	echo 0 > /proc/sysrq-trigger


	#stop services and remount RO
	swapoff -a
	
	if [[ $thisDog -eq 1 ]]; then
		systemctl stop dogx 2>&1
		systemctl stop mining 2>&1
		systemctl stop wd 2>&1
		systemctl stop wd-la 2>&1
		systemctl stop wd-load 2>&1
		systemctl stop wd-temp 2>&1
		systemctl stop af 2>&1
		systemctl stop mb-af 2>&1
		systemctl stop remotessh 2>&1
		[[ `screen-check asw` -gt 0 ]] && screen-kill asw
		pkill -9 xinit > /dev/null 2>&1
	else
		echo -e "\n${CYAN}> Stopping services${WHITE}"
	fi
	
	term=`tty | grep -oP "\Ktty[0-9]+"`
	[[ ! -z $term ]] && term="|$term"

	for service in `initctl list 2>/dev/null | grep "/running" | grep -v -P "network|ssh|shellinabox|openvpn|remotessh$term" | awk '{print $1}'`; do
		initctl stop $service > /dev/null 2>&1 && echo "> stop $service";
		sleep 0.1
	done

	for service in `systemctl list-units 2>/dev/null | grep -oP "\K[^\s]+\.(service|socket)" | grep -v -P "ssh|openvpn|shellinabox|remotessh|network|ifup|user|hive$term"`; do
		systemctl stop $service > /dev/null 2>&1 && echo "> stop $service";
		sleep 0.1
	done

	for i in {1..3}; do
		for pid in `lsof / | grep -v -P "^COMMAND|$SCRIPT_NAME| (mem|txt|rtd|cwd) |network|telec|hssh|watchdog|hl340|srrv2|hive-console|remotessh" | awk '{print $2}'`; do
			cmd=`ps -p $pid -o args | tail -n 1`
			kill -9 $pid 2>/dev/null && echo -e "> kill $pid: $cmd" && sleep 0.1
		done
		sleep 1
	done

	# Readonly remount
	for MOUNTS in `cat /proc/mounts | grep $DISK_NAME | awk '{print $2}'`; do
		mount -n -o remount,ro $MOUNTS > /dev/null 2>&1 || echo "Remounting $MOUNTS failed"
	done

	#create temp root
	echo -e "\n${CYAN}> Creating temporary root filesystem${WHITE}"
	mkdir -p $TMPDIR/{proc,sys,run,dev,usr,var,oldroot,bin,sbin,lib,tmp,usr/lib,usr/share,usr/lib/x86_64-linux-gnu,lib/lsb}
	cp -aR /{bin,sbin,etc} $TMPDIR > /dev/null 2>&1
	cp -aR /usr/{bin,sbin} $TMPDIR/usr > /dev/null 2>&1
	cp -aR /lib/x86_64-linux-gnu $TMPDIR/lib > /dev/null 2>&1
	cp -aR /lib64 $TMPDIR > /dev/null 2>&1
	cp -aR /usr/lib/sudo $TMPDIR/usr/lib > /dev/null 2>&1
	cp -a /usr/lib/x86_64-linux-gnu/libmpfr* $TMPDIR/usr/lib/x86_64-linux-gnu > /dev/null 2>&1
	cp -a /usr/lib/x86_64-linux-gnu/libsigsegv* $TMPDIR/usr/lib/x86_64-linux-gnu > /dev/null 2>&1
	cp -a /usr/lib/x86_64-linux-gnu/libgmp* $TMPDIR/usr/lib/x86_64-linux-gnu > /dev/null 2>&1
	cp -a /usr/lib/x86_64-linux-gnu/libstdc++* $TMPDIR/usr/lib/x86_64-linux-gnu > /dev/null 2>&1
	cp -a /usr/lib/x86_64-linux-gnu/libpopt.so* $TMPDIR/usr/lib/x86_64-linux-gnu > /dev/null 2>&1
	
	cp -a /usr/lib/x86_64-linux-gnu/libicu*.so* $TMPDIR/usr/lib/x86_64-linux-gnu > /dev/null 2>&1

	cp -aR /dev $TMPDIR > /dev/null 2>&1
	cp $myself $TMPDIR > /dev/null 2>&1
	chmod +x $TMPDIR/$SCRIPT_NAME > /dev/null 2>&1

	mount --bind /proc $TMPDIR/proc
	mount --bind /sys $TMPDIR/sys
	mount --bind /dev $TMPDIR/dev

	#create conf for second part
	echo "wr=1" > $TMPDIR/replace.conf
	echo "archname=$archname" >> $TMPDIR/replace.conf
	echo "root_dev=$DISK_NAME" >> $TMPDIR/replace.conf
	echo "conf_loop=$conf_loop" >> $TMPDIR/replace.conf

	#chroot to temp root
	mount --bind /proc $TMPDIR/proc
	mount --bind /sys $TMPDIR/sys
	mount --bind /dev $TMPDIR/dev
	sync
	cd $TMPDIR
	exec chroot . /bin/bash /$SCRIPT_NAME
}


# Writing to disk
function write {
	cd /

	#Copy config partition
	if [[ -f old-config/rig.cfg ]]; then
		echo -e "\n${CYAN}> Copying os.dog config to file system${WHITE}"
		unzip -p $archname | dd of=newConf.img skip=$skip count=$count
		LOOPDEV=$(losetup --find --show newConf.img)
		partprobe ${LOOPDEV}

		mkdir tmpdogcfg
		mount ${LOOPDEV} tmpdogcfg
		if [[ $? -eq 0 ]]; then
			cp -R old-config/* tmpdogcfg
			echo -e "Copying config to image"
			echo -e "${GREEN}Config was successfilly copied and will be written on ${LIGHTPURPLE}$root_dev${WHITE}${GREEN} after writing image${WHITE}"
			ddTrigger=1
			sync			
		else
			echo -e "${RED}Config was not written file system${WHITE}"
		fi
	fi
	
	echo -e "\n${CYAN}> Writing OS.dog filesystem to ${LIGHTPURPLE}$root_dev${WHITE}"
	echo -e "Please wait, this can take long"
	echo -e "To prevent damage to your disk device\ndo not turn off your computer until the end of the process.\n"

	if dd --help | grep -q "'progress'"; then
		unzip -p $archname | dd of=/dev/$root_dev bs=1M status=progress
		exitcode=$?
	else
		# show progress
		( sleep 2; while true; do sleep 1; pkill -USR1 -f "dd of=/dev/" || break; echo -en "\r$(tail -n 1 ./progress 2>/dev/null )      "; done) &
		unzip -p $archname | dd of=/dev/$root_dev bs=1M 2>./progress
		exitcode=$?
		[[ $exitcode -eq 0 ]] && echo -e "\r$(tail -n 1 ./progress 2>/dev/null)      "
	fi 
	[[ $exitcode -ne 0 ]] && echo -e "${RED}Write image failed, exiting${WHITE}" && return 1

	# Fix GPT table
	sgdisk -e /dev/$root_dev > /dev/null 2>&1
	sgdisk -C /dev/$root_dev > /dev/null 2>&1
	partprobe /dev/$root_dev > /dev/null 2>&1

	#Rewrite config partition
	if [[ $ddTrigger -eq 1 ]]; then
		echo -e "\n${CYAN}> Writing os.dog config to ${LIGHTPURPLE}$root_dev${WHITE}"
		dd if=/newConf.img of=/dev/${root_dev}1 bs=1M

		if [[ $? -eq 0 && -f old-config/rig.cfg ]]; then
			echo -e "${BROWN}Applying next config:${WHITE}"
			echo -e "${BROWN}=====================${WHITE}"
			cat old-config/rig.cfg
			echo -e "${BROWN}=====================${WHITE}"
		else
			echo -e "${RED}Config was not written to ${LIGHTPURPLE}$root_dev${WHITE}"
		fi
	fi

	sync

	echo -e "${GREEN}> Image writing to ${LIGHTPURPLE}$root_dev${GREEN} is successfull!${WHITE}"
	echo -e "Your rig is configured and ready to work under os.dog"
	echo -e "After reboot it should appear on the web."
	echo -e "${YELLOW}> Rebooting in 15 seconds${WHITE}"

	sleep 15

	#Reboot
	echo 1 > /proc/sys/kernel/sysrq
	echo b > /proc/sysrq-trigger
}


function list () {
	#echo "LATEST $LATEST"
	#echo "STABLE $STABLE"
	echo -e "> Getting image versions"
	local versions_url="https://os.dog/downloads/iso/versions.php"
	local versions=`curl -sLk $versions_url | jq '.iso'`
	[[ -z $versions ]] && echo -e "${RED}Error downloading versions from $versions_url${WHITE}" && exit 1
	
	local header="${BROWN}#${WHITE}  ${CYAN}Version${WHITE}\t\t"
		header+="${PURPLE}System${WHITE}  | ${YELLOW}Kernel${WHITE} | ${RED}Drivers${WHITE}\n"
		header+="======================================================================="
	echo -e "$header"
	for (( i=0; i < `echo $versions | jq '. | length'`; i++ )); do
		local isoData=`echo $versions | jq ".[$i]"`
			for option in version name description kernel system amd nvidia stable latest; do
			if [[ `echo $isoData | jq ".$option"` != null ]]; then
				option_value="`echo $isoData | jq -r \".$option\"`" #double slash, because eval open it
				eval "local ${option}=\"$option_value\""
			elif [[ $option == 'name' ]]; then
				local name='     '
			fi
		done
		#local name=`echo $isoData | jq -r ".name"`
		#local description=`echo $isoData | jq -r ".description"`
		#local kernel=`echo $isoData | jq -r ".kernel"`
		#local system=`echo $isoData | jq -r ".system"`
		#local amd=`echo $isoData | jq -r ".amd"`
		#local nvidia=`echo $isoData | jq -r ".nvidia"`
		#local stable=`echo $isoData | jq -r ".stable"`
		#local latest=`echo $isoData | jq -r ".latest"`
		
		local string="${BROWN}$i${WHITE}  ${CYAN}$version $name${WHITE}\t"
		[[ `expr length $version` -lt 8 ]] && string+="\t"
		string+="${PURPLE}$system${WHITE}\t| ${YELLOW}$kernel${WHITE}\t | "
		string+="${RED}$amd${WHITE} | ${GREEN}$nvidia${WHITE}"
		[[ $stable == true ]] && string+=" ${CYAN}stable${WHITE}" || string+="       "
		[[ $latest == true ]] && string+=" ${CYAN}latest${WHITE}" || string+="       "
		echo -e "$string"
	done

	if [[ $LIST -eq 1 ]]; then
		echo -e "Select version to install:"
		read i

		numberFormat='^[0-9]+$'
		if ! [[ $i =~ $numberFormat ]] ; then
			echo -e "${RED}Error: you need to enter number here${WHITE}"
			exit 1
		fi

		local newIso=`echo $versions | jq ".[$i]"`
		
	elif [[ $LATEST -eq 1 ]]; then
		local latestVersions=`echo $versions | jq "[.[] | select(.latest == true)]"`
		[[ $latestVersions == "[]" ]] && echo -e "${RED}Can\`t find compatible image version${WHITE}" && exit 1
		local newIso=`echo $latestVersions | jq .[-1]`
	
	elif [[ $STABLE -eq 1 ]]; then
		local stableVersions=`echo $versions | jq "[.[] | select(.stable == true)]"`
		[[ $stableVersions == "[]" ]] && echo -e "${RED}Can\`t find compatible image version${WHITE}" && exit 1
		local newIso=`echo $stableVersions | jq .[-1]`
	fi
	
	local version=`echo $newIso | jq -r ".version"`
	[[ `echo $newIso | jq ".name"` != null ]] && local selectedName=`echo $newIso | jq -r ".name"`
	local localUrl=`echo $newIso | jq -r ".url"`

	echo -e "Selected version: ${CYAN}${version} ${selectedName}${WHITE} (${GREEN}$localUrl${WHITE})"
	url=$localUrl
	#echo -e "Download url: ${CYAN}${url}${WHITE}"
}

function start {
	wr=0
	[[ -f "/replace.conf" ]] && source "/replace.conf"
	if [[ $wr -ne 1 ]]; then
		#echo "@"$url
		[[ $LATEST -eq 1 || $STABLE -eq 1 || $LIST -eq 1 ]] && list
		#echo "@"$url
		#exit
		[[ -z $url ]] &&  echo -e "${BROWN}No path or URL to os.dog image provided${WHITE}\n" && showHelp && exit 1
		prepare #1 part
	else
		write #2 part
	fi
}

while [ -n "$1" ]; do
	option=$1
	
	if [[ $option == '--help' || $option == '-h' ]]; then
		showHelp
		exit 0
	elif [[ $option == '--yes' || $option == '-y' ]]; then
		yes=1
	elif [[ $option == '--latest' || $option == '-l' ]]; then
		LATEST=1
		#url=$LATEST_URL
	elif [[ $option == '--stable' || $option == '-s' ]]; then
		STABLE=1
	elif [[ $option == '--list' ]]; then
		LIST=1
	elif [[ $option == '--rigid' || $option == '-id' ]]; then
		shift
		[[ -z $1 ]] && echo "Uncorrect argument value" && exit 1
		RIG_ID=$1
	elif [[ $option == '--rigpassword' || $option == '-password' ]]; then
		shift
		[[ -z $1 ]] && echo "Uncorrect argument value" && exit 1
		PASSWD=$1
	elif [[ $option == '--righost' || $option == '-host' ]]; then
		shift
		[[ -z $1 ]] && echo "Uncorrect argument value" && exit 1
		HOST=$1
	elif [[ $option == '--sshpassword' || $option == '-sshpass' ]]; then
		shift
		[[ -z $1 ]] && echo "Uncorrect argument value" && exit 1
		sshPass=$1
	elif [[ $option == *".zip"* ]]; then #$option == "http"*"//"*".zip"*
		url=$option
	else
		echo "Uncorrect argument $option"
	fi

	shift
done

start
