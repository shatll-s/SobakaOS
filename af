#!/bin/bash
#OSdog Autofan v 0.3. Visit os.dog
#Dependencies: NVIDIA, AMD drivers; jq
AF_CFG="/dog/cfg/af.cfg"
[[ ! -f $AF_CFG ]] && echo "You need to create config file $AF_CFG..." && exit 1
AMDMEMINFO_FILE=/tmp/amdmeminfo
LOCK_FILE_AMD="/tmp/.amd-oc.lock"
LOCK_FILE_NVIDIA="/tmp/.nvidia-oc.lock"

#Sample af.cfg:
#Don`t forget to delete braces
#{
#  "af_enabled": 1,
#  "af_tt": 67,
#  "af_hyst": 2,
#  "af_fanmin": 20,
#  "af_fanmax": 95,
#  "af_shift": 4,
#  "af_delay": 12
#}

#colors section (somebody can use it without OSdog)
RED="\e[31m"
WHITE="\e[0m"
GREEN="\e[32m"
BROWN="\e[33m"
BLUE="\e[34m"
PURPLE="\e[35m"
CYAN="\e[36m"

up="↗"
down="↘"

LINE="echo -e $BROWN================================================================$WHITE"

LOGO="
                .--~~,__
   :-....,-------\`~~\`._.'
    \`-,,,  ,_      ;'~U'
     _,-' ,'\`-__; \'--.
    (_/'~~      ''''(;
"
#colors section end

function displaytime () {
	local T=$1
	local D=$((T/60/60/24))
	local H=$((T/60/60%24))
	local M=$((T/60%60))
	local S=$((T%60))
	[[ $D > 0 ]] && printf '%d days ' $D
	[[ $H > 0 ]] && printf '%d hours ' $H
	[[ $M > 0 ]] && printf '%d min ' $M
	#[[ $D > 0 || $H > 0 || $M > 0 ]] && printf 'and '
	printf '%d sec\n' $S
}

function set_fan_amd () {
	
	local timer=0
	while [[ $timer -le 20 ]]; do
		if  [[ ! -f $LOCK_FILE_AMD ]]; then #no lock file
			break
		else #lock file exist
			pid=`cat $LOCK_FILE_AMD`
			ps --pid $pid &>/dev/null
			[[ $? != 0 ]] && rm $LOCK_FILE_AMD && break #process already died
		fi
		sleep 0.5
		((timer+=1))
		[[ $timer -eq 20 ]] && echo "${RED}Error (active OC)${WHITE}" && return 1
	done
	local fan=$1
	local fan_addr=$2
	[[ `cat $fan_addr/pwm1_enable` -ne 1 ]] && echo 1 >  $fan_addr/pwm1_enable
	if [[ $3 != "vega" ]]; then
		let local fan_adapted=$fan*255/100+2 #fan power is beetween 0 and 255
		[[ $fan_adapted -gt 255 ]] && fan_adapted=255
		echo $fan_adapted > $fan_addr/pwm1
	else #this is VEGA
		local rpm_min=`cat $fan_addr/fan1_min`
		[[ rpm_min -lt 600 ]] && rpm_min=600 #mb it will fix freezes...
		local rpm_max=`cat $fan_addr/fan1_max`
		local fan_target=`echo "scale=0; $fan * $rpm_max / 100" | bc -l`
		[[ $fan_target -ge $rpm_max ]] && fan_target=`echo "$rpm_max - 1" | bc -l`
		[[ $fan_target -lt $rpm_min ]] && fan_target=`echo "$rpm_min + 1" | bc -l`
		echo $fan_target > $fan_addr/fan1_target
	fi
}

function prepare_nvidia_args () {
	local fan=$1
	local i=$2
	nv_args+=" -a [gpu:$i]/GPUFanControlState=1"
	nv_args+=" -a [fan:$i]/GPUTargetFanSpeed=$fan"
	echo "$nv_args"
}

function nvidia_oc () {
	local timer=0
	while [[ $timer -le 20 ]]; do
		if  [[ ! -f $LOCK_FILE_NVIDIA ]]; then #no lock file
			break
		else #lock file exist
			pid=`cat $LOCK_FILE_NVIDIA`
			ps --pid $pid &>/dev/null
			[[ $? != 0 ]] && rm $LOCK_FILE_NVIDIA && break #process already died
		fi
		sleep 0.5
		((timer+=1))
		[[ $timer -eq 20 ]] && echo "${RED}Error (active NVIDIA OC)${WHITE}" && return 1
	done
	nvidia-settings "$@" >/dev/null 2>&1
}

function autofan () {
	local nv_args=""
	local time=`date +%s`
	local secs=`echo "$time - $start_time" | bc -l`
	local hr_time=`displaytime $secs`
	local nvidia_smi=`nvidia-smi --query-gpu=index,gpu_bus_id,temperature.gpu,fan.speed --format=csv,noheader`
	echo -e "${GREEN}Target temp ${CYAN}$target_temp${GREEN}$C, hyst ${CYAN}$hyst${GREEN}, fan min/max ${BLUE}$fan_min${GREEN}/${RED}$fan_max${GREEN}, shift ${CYAN}$fan_shift${GREEN}, delay ${CYAN}$delay${WHITE}"
	
	echo -e `date -R`" (working "$hr_time")\n"
	for (( i=0; i < ${#core_addr[@]}; i++ )); do
		if [ $(cat ${core_addr[$i]}/uevent | grep "DRIVER" | \
			sed -e 's/DRIVER\=\([a-z]*\)/\1/') == amdgpu ]; then
			local gpu_name[$i]=$(cat $AMDMEMINFO_FILE | grep $(echo ${gpu_busid_sys[$i]}".00.0") | awk -F":" '{ print $3 }')
			local fan_addr[$i]=$(ls -d ${core_addr[$i]}/hwmon/hwmon[0-9]*)
			if [[ ! -f ${fan_addr[$i]}/pwm1 ]]; then
				echo -e "${CYAN}$i${WHITE} ${gpu_busid_sys[$i]}:00.0 AMD}\tNo fan data"				
				continue
			fi
			local gpu_fan[$i]=$(($(cat "${fan_addr[$i]}/pwm1") * 100 / 255))
			local gpu_temp_raw[$i]=`cat "${fan_addr[$i]}/temp1_input"` #temp1_input - current temp 
			local gpu_temp[$i]=$(echo "scale=0; ${gpu_temp_raw[$i]}/1000" | bc -l) #temp format is something like 65000
			local gpu_brand[$i]="AMD"
		elif [ $(cat ${core_addr[$i]}/uevent | grep "DRIVER" | \
			sed 's/DRIVER\=\([a-z]*\)/\1/') == nvidia ]; then #GPU is NVIDIA
	
			local nvidiainfo=`echo "$nvidia_smi" | grep -i ${gpu_busid_sys[$i]}":00.0"`
			local gpu_index[$i]=`awk -F ', ' '{print $1}' <<< $nvidiainfo`
			local gpu_temp[$i]=`awk -F ', ' '{print $3}' <<< $nvidiainfo`
			local gpu_fan[$i]=$(echo `awk -F ', ' '{print $4}' <<< $nvidiainfo` | sed 's/ %//')
			local gpu_brand[$i]="NVIDIA"
		fi
		[[ -z ${gpu_brand[$i]} ]] && continue
		
		if (( ${gpu_temp[$i]} - $hyst > $target_temp )); then #high temp
			local temp_color=$RED
			if [[ ${gpu_fan[$i]} -gt $fan_max ]]; then
				local new_fan[i]=$fan_max
				local fan_color=$RED
				local message="${CYAN}$down ${new_fan[$i]}${WHITE}"
			elif [[ ${gpu_fan[$i]} -lt $fan_max ]]; then
				if [[ ${gpu_temp[$i]} -ge $crit_temp ]]; then
					local new_fan[$i]=$fan_max
				elif (( ${gpu_temp[$i]} - $crit_hyst > $target_temp )); then
					local new_fan[i]=$((${gpu_fan[$i]} + $crit_fan_shift))
				else
					local new_fan[i]=$((${gpu_fan[$i]} + $fan_shift))
				fi
				[[ ${new_fan[$i]} -gt $fan_max ]] && new_fan[$i]=$fan_max
				
				local message="${CYAN}$up ${new_fan[$i]}${WHITE}"
			else
				local fan_color=$RED
				local message="${RED}Max %${WHITE}"
			fi
		elif (( ${gpu_temp[$i]} + $hyst < $target_temp )); then #low temp
			local temp_color=$BLUE
			if [[ ${gpu_fan[$i]} -lt $fan_min ]];then
				local new_fan[i]=$fan_min
				local fan_color=$BLUE
				local message="${CYAN}$up ${new_fan[$i]}${WHITE}"
			elif [[ ${gpu_fan[$i]} -gt $fan_min ]];then
				if (( ${gpu_temp[$i]} + $crit_hyst < $target_temp )); then
					local new_fan[i]=$((${gpu_fan[$i]} - $crit_fan_shift))
				else
					local new_fan[i]=$((${gpu_fan[$i]} - $fan_shift))
				fi
				[[ ${new_fan[$i]} -lt $fan_min ]] && new_fan[$i]=$fan_min
				local message="${CYAN}$down ${new_fan[$i]}${WHITE}"
			else
				local fan_color=$BLUE
				local message="${BLUE}Min %${WHITE}" 
			fi
		fi
		[[ -z $temp_color ]] && temp_color=$WHITE
		[[ -z $fan_color ]] && fan_color="$WHITE"
		
		string="${CYAN}$i${WHITE} ${gpu_busid_sys[$i]}:00.0 ${gpu_brand[$i]}\t"
		string+="Temp: ${temp_color}${gpu_temp[$i]}${WHITE}°C\t"
		
		#fucking bug because white is shorter than red
		[[ "$temp_color" != "$WHITE" ]] && string+=" " 
		string+="Fan: ${fan_color}${gpu_fan[$i]}${WHITE} "
		if [[ ${gpu_fan[$i]} -ge 10 &&  ${gpu_fan[$i]} -lt 100 ]]; then
			string+=" "
		elif [[ ${gpu_fan[$i]} -lt 10 ]]; then
			string+="  "
		fi
		string+="$message"
		#echo $string
		echo -en "$string"
		
		#Set fan if something changed
		if [[ ! -z ${new_fan[$i]} ]]; then
			if [[ ${gpu_brand[$i]} == "AMD" ]]; then
				[[ ${gpu_name[$i]} == *"Vega"* ]] && local vega="vega"
				
				#sometimes we can`t put new value, so need to refresh pwm1_enable:
				if [[ ! -z ${last_fan[i]} && ${last_fan[i]} == ${new_fan[i]} && ${last_fan[i]} != $fan_min ]]; then
					echo 0 > ${fan_addr[$i]}/pwm1_enable
					sleep 0.2
					echo 1 > ${fan_addr[$i]}/pwm1_enable
					echo -e "${RED} freeze${WHITE}"
				fi

				echo -en `set_fan_amd ${new_fan[i]} ${fan_addr[$i]} $vega`
				last_fan[i]=${new_fan[i]}
			elif [[ ${gpu_brand[$i]} == "NVIDIA" ]]; then
				#local result=`set_fan_nvidia ${new_fan[i]} ${gpu_index[$i]}`
				nv_args=`prepare_nvidia_args ${new_fan[i]} ${gpu_index[$i]}`
			fi
		fi
		echo "" #sometimes amd say something
		unset temp_color fan_color message
	done
	#echo $nv_args
	[[ ! -z $nv_args ]] && local nv_result=`nvidia_oc $nv_args`
	[[ ! -z $nv_result ]] && echo -e $nv_result
	$LINE
}

function start () {
	start_time=`date +%s`
	
	echo -e "${GREEN}Thank you for using ${CYAN}OSdog${GREEN} Autofan v 0.3"
	#echo -e "${BROWN}$LOGO${GREEN}"
	echo -e "Visit ${CYAN}www.os.dog${WHITE}"
	$LINE
	
	export DISPLAY=:0

	core_addr_raw=(`ls -d /sys/class/drm/card[0-9]*/device | egrep 'card[0-9]{1,2}/'`)
	
	for (( i=0; i < ${#core_addr_raw[@]}; i++ )); do
		gpu_busid_raw[$i]=$(cat ${core_addr_raw[$i]}/uevent | grep "PCI_SLOT_NAME" | sed 's/.*0000:\([0-9abcdefABCDEF]*\):.*/\1/')
	done
			
	IFS=$'\n' gpu_busid_sys=($(sort <<<"${gpu_busid_raw[*]}"))
	unset IFS
	for (( i=0; i < ${#gpu_busid_raw[@]}; i++ )) do
		for (( y=0; y < ${#gpu_busid_raw[@]}; y++ )) do
			[[ ${gpu_busid_sys[$i]} == ${gpu_busid_raw[$y]} ]] && core_addr[$i]=${core_addr_raw[$y]} && break
		done
	done
	
	while true; do
		cfg=`cat $AF_CFG`
		enabled=`echo $cfg | jq -r '.af_enabled'`
		if [[ $enabled -ne 1 ]]; then
			if [[ $msg_trigger != 1 ]]; then
				echo -n "Autofan is not enabled, waiting."
				msg_trigger=1
			else
				echo -n "."
			fi
			sleep 10
		else
			[[ $msg_trigger == 1 ]] && msg_trigger=0 && echo ""
			target_temp=`echo $cfg | jq -r '.af_tt'`
			hyst=`echo $cfg | jq -r '.af_hyst'`
			fan_shift=`echo $cfg | jq -r '.af_shift'`
			fan_max=`echo $cfg | jq -r '.af_fanmax'`
			fan_min=`echo $cfg | jq -r '.af_fanmin'`
			delay=`echo $cfg | jq -r '.af_delay'`
			crit_temp=80
			[[ $hyst -ge 2 ]] && crit_hyst=`echo "scale=0; $hyst * 3 / 1" | bc -l` || crit_hyst=10
			crit_fan_shift=`echo "scale=0; $fan_shift * 3 / 1" | bc -l`

			autofan
			sleep $delay
		fi
	done
}

case $1 in
	show|"")
		screen -d af
		screen -r af
	;;
	stop)
		/dog/screen-kill af
		echo "$(date --rfc-3339=seconds) Autofan stopped"
	;;
	loop)
		start
	;;
	start|restart)
		/dog/screen-kill af
		screen -dmS af bash -c "/dog/af loop"
		#echo "$(date --rfc-3339=seconds) Autofan (re)started"
	;;
	*)
		bname=`basename $0`
		echo -e "Usage: ${CYAN}$bname show|start|stop|restart${WHITE}"
	;;
esac
