#!/bin/bash
#OSdog Autofan v 0.3. Visit os.dog
#Dependencies: NVIDIA, AMD drivers; jq
. /etc/environment
. colors

AF_CFG="/dog/cfg/af.cfg"
[[ ! -f $AF_CFG ]] && echo "You need to create config file $AF_CFG..." && exit 1
SCREEN_CFG="/dog/service/screenrc"
LOG="/dog/log/af.log"
AMDMEMINFO_FILE=/tmp/amdmeminfo
LOCK_FILE_AMD="/tmp/.amd-oc.lock"
LOCK_FILE_NVIDIA="/tmp/.nvidia-oc.lock"

LOGO="
                .--~~,__
   :-....,-------\`~~\`._.'
    \`-,,,  ,_      ;'~U'
     _,-' ,'\`-__; \'--.
    (_/'~~      ''''(;
"
#colors section end

function displaytime () {
	local T=$1
	local D=$((T/60/60/24))
	local H=$((T/60/60%24))
	local M=$((T/60%60))
	local S=$((T%60))
	[[ $D > 0 ]] && printf '%d days ' $D
	[[ $H > 0 ]] && printf '%d hours ' $H
	[[ $M > 0 ]] && printf '%d min ' $M
	#[[ $D > 0 || $H > 0 || $M > 0 ]] && printf 'and '
	printf '%d sec\n' $S
}

function set_fan_amd () {
	
	local timer=0
	while [[ $timer -le 20 ]]; do
		if  [[ ! -f $LOCK_FILE_AMD ]]; then #no lock file
			break
		else #lock file exist
			pid=`cat $LOCK_FILE_AMD`
			ps --pid $pid &>/dev/null
			[[ $? != 0 ]] && rm $LOCK_FILE_AMD && break #process already died
		fi
		sleep 0.5
		((timer+=1))
		[[ $timer -eq 20 ]] && echo "${RED}Error (active OC)${WHITE}" && return 1
	done
	local fan=$1
	local fanAddr=$2
	local navi=$3

	[[ `cat $fanAddr/pwm1_enable` -ne 1 ]] && echo 1 > $fanAddr/pwm1_enable

	#if [[ $navi -ne 22 && $navi -ne 21 && $navi -ne 1 ]]; then
	if true; then
		let local fan_adapted=$fan*255/100+2 #fan power is beetween 0 and 255
		[[ $fan_adapted -gt 255 ]] && fan_adapted=255
		[[ $fan_adapted -lt 0 ]] && fan_adapted=0
		echo $fan_adapted > $fanAddr/pwm1
	
	else #this is VEGA / Navi
		
		[[ `cat $fanAddr/fan1_enable` -ne 1 ]] && echo 1 > $fanAddr/fan1_enable
		#[[ `cat $fanAddr/pwm1_enable` -ne 1 ]] && echo 1 > $fanAddr/pwm1_enable
		[[ ! -f /tmp/.afPatch ]] && echo 170 > $fanAddr/pwm1 && sleep 5 && touch /tmp/.afPatch
		[[ -f $fanAddr/fan1_min ]] && local rpm_min=`cat $fanAddr/fan1_min` || rpm_min=0
		[[ -f $fanAddr/fan1_max ]] && local rpm_max=`cat $fanAddr/fan1_max` || rpm_max=3400

		#local rpm_min=`cat $fanAddr/fan1_min`
		#[[ rpm_min -lt 600 ]] && rpm_min=600 #mb it will fix freezes...
		#local rpm_max=`cat $fanAddr/fan1_max`
		local fan_target=`echo "scale=0; ($fan * $rpm_max + 5) / 100" | bc -l`
		[[ $fan_target -gt $rpm_max ]] && fan_target=`echo "$rpm_max - 1" | bc -l`
		[[ $fan_target -lt $rpm_min ]] && fan_target=`echo "$rpm_min + 1" | bc -l`
		#echo "$fan_target > $fanAddr/fan1_target"
		echo $fan_target > $fanAddr/fan1_target
		#echo $rpm_min $rpm_max
	fi
}

function prepare_nvidia_args () {
	local fan=$1
	local i=$2
	#echo -e "StartFan ${startFan[$i]}; fanCount ${fanCount[$i]}\n"
	local args+=" -a [gpu:$i]/GPUFanControlState=1"
	
	for ((z=${startFan[$i]}; z < ${startFan[$i]} + ${fanCount[$i]}; z++)); do
		local args+=" -a [fan:$z]/GPUTargetFanSpeed=$fan"
	done
	#nv_args+=" -a [fan:$i]/GPUTargetFanSpeed=$fan"
	echo "$args"
}

function nvidia_oc () {
	local timer=0
	while [[ $timer -le 20 ]]; do
		if  [[ ! -f $LOCK_FILE_NVIDIA ]]; then #no lock file
			break
		else #lock file exist
			pid=`cat $LOCK_FILE_NVIDIA`
			ps --pid $pid &>/dev/null
			[[ $? != 0 ]] && rm $LOCK_FILE_NVIDIA && break #process already died
		fi
		sleep 0.5
		((timer+=1))
		[[ $timer -eq 20 ]] && echo "${RED}Error (active NVIDIA OC)${WHITE}" && return 1
	done
	nvidia-settings "$@" >/dev/null 2>&1
}

function autofan () {
	local nv_args=""
	#local allFanCount=0
	local time=`date +%s`
	local secs=`echo "$time - $start_time" | bc -l`
	local hr_time=`displaytime $secs`
	local nvidia_smi=`nvidia-smi --query-gpu=index,gpu_bus_id,temperature.gpu,fan.speed --format=csv,noheader`
	echo -e "${GREEN}TT ${CYAN}$target_temp${GREEN}째C, TT Mem ${CYAN}$ttMem${GREEN}째C, hyst ${CYAN}$hyst${GREEN}, fan min/max ${BLUE}$fan_min${GREEN}/${RED}$fan_max${GREEN}, shift ${CYAN}$fan_shift${GREEN}, delay ${CYAN}$delay${WHITE}"
	
	echo -e `date -R`" (working "$hr_time")\n"
	for (( i=0; i < $count; i++ )); do
		local status=`echo $json | jq ".gpu[$i].status" --raw-output`
		local name=`echo $json | jq ".gpu[$i].name" --raw-output`
		local bus=`echo $json | jq ".gpu[$i].bus" --raw-output`
		local brand=`echo $json | jq ".gpu[$i].brand" --raw-output`
		local navi=`echo $json | jq ".gpu[$i].navi" --raw-output`

		if [[ $brand == "A" ]]; then
			local color="$LIGHTRED"
			local fanAddr[$i]=`echo $json | jq ".gpu[$i].fanAddr" --raw-output`
			
			local gpu_temp_raw[$i]=`cat "${fanAddr[$i]}/temp1_input"` #temp1_input - current temp 	
			local gpu_temp[$i]=$(echo "scale=0; ${gpu_temp_raw[$i]}/1000" | bc -l) #temp format is something like 65000
			local gpu_fan[$i]=$(($(cat "${fanAddr[$i]}/pwm1") * 100 / 255))

			if [[ -f ${fanAddr[$i]}/temp3_input ]]; then
				local tMem_raw[$i]=`cat "${fanAddr[$i]}/temp3_input"` #temp3_input - Mem temp
				local tMem[$i]=`echo "scale=0; ${tMem_raw[$i]}/1000" | bc -l`
			fi
			
			
			#if [[ $navi -eq 0 ]]; then
			
			#else
			#	local gpu_temp_raw2[$i]=`cat "${fanAddr[$i]}/temp3_input"` #temp1_input - current temp 
			#	local gpu_temp2[$i]=$(echo "scale=0; ${gpu_temp_raw2[$i]}/1000" | bc -l) #temp format is something like 65000
			           #miner_hr[$i]=`echo "scale=2; ${miner_hr[$i]} / 1000" | bc`	
			#	[[ -f $fanAddr/fan1_min ]] && local rpm_min=`cat $fanAddr/fan1_min` || rpm_min=0
			#	[[ -f $fanAddr/fan1_max ]] && local rpm_max=`cat $fanAddr/fan1_max` || rpm_max=3400
			#	local gpu_fan[$i]=$(echo "scale=0; `cat ${fanAddr[$i]}/fan1_input` * 100 / ($rpm_max - $rpm_min)" | bc -l)
			#fi
		elif [[ $brand == "N" ]]; then
			local color="$LIGHTGREEN"
			local nvidiainfo=`echo "$nvidia_smi" | grep -i "$bus"`
			local gpu_index[$i]=`awk -F ', ' '{print $1}' <<< $nvidiainfo`
			local gpu_temp[$i]=`awk -F ', ' '{print $3}' <<< $nvidiainfo`
			local gpu_fan[$i]=$(echo `awk -F ', ' '{print $4}' <<< $nvidiainfo` | sed 's/ %//')
		else
			continue
		fi
		
		if [[ ! -z $target_temp && $target_temp -ne 0 ]]; then
			if [[ `echo "${gpu_temp[$i]} - $hyst - $target_temp" | bc -l` -ge 0 ]]; then
				local tempTrigger='high'
				local temp_color=$RED
			elif [[ `echo "${gpu_temp[$i]} + $hyst - $target_temp" | bc -l` -lt 0 ]]; then
				local temp_color=$BLUE
				local tempTrigger='low'
			fi
		fi

		if [[ $ttMem -ne 0 && ! -z ${tMem[$i]} ]]; then
			if [[ `echo "${tMem[$i]} - $hyst - $ttMem" | bc -l` -ge 0 ]]; then
				local tMemColor=$RED
				local tempMemTrigger='high'
			elif [[ `echo "${tMem[$i]} + $hyst - $ttMem" | bc -l` -lt 0 ]]; then
				local tempMemTrigger='low'
			fi
		fi

		if [[ ${gpu_fan[$i]} -gt $fan_max ]]; then
			local fan_color=$RED
			local new_fan[$i]=$fan_max
		elif [[ ${gpu_fan[$i]} -lt $fan_min ]]; then
			local fan_color=$BLUE
			local new_fan[$i]=$fan_min
		fi

		if [[ $tempTrigger == 'high' || $tempMemTrigger == 'high' ]]; then #high temp
			#echo 'High'
			if [[ ${gpu_fan[$i]} -gt $fan_max ]]; then
				local new_fan[i]=$fan_max
				#local fan_color=$RED
				local message="${CYAN}$down ${new_fan[$i]}${WHITE}"
			elif [[ ${gpu_fan[$i]} -lt $fan_max ]]; then
				if [[ ${gpu_temp[$i]} -ge $crit_temp || ${tMem[$i]} -ge $memCritTemp ]]; then
					local new_fan[$i]=$fan_max
				elif (( ${gpu_temp[$i]} - $crit_hyst > $target_temp )); then
					local new_fan[$i]=$((${gpu_fan[$i]} + $crit_fan_shift))
				elif (( ${tMem[$i]} - $crit_hyst > $ttMem )); then
					local new_fan[$i]=$((${gpu_fan[$i]} + $crit_fan_shift))
				else
					if [[ $navi -eq 0 ]]; then
						local new_fan[$i]=$((${gpu_fan[$i]} + $fan_shift))
					else
						local new_fan[$i]=$((${gpu_fan[$i]} + 2 * $fan_shift))
					fi
				fi
				[[ ${new_fan[$i]} -gt $fan_max ]] && new_fan[$i]=$fan_max
				[[ ${new_fan[$i]} -lt $fan_min ]] && new_fan[$i]=$fan_min
				local message="${CYAN}$up ${new_fan[$i]}${WHITE}"
			else
				#local fan_color=$RED
				local message="${RED}Max %${WHITE}"
			fi
		elif [[ $tempTrigger == 'low' ]]; then #low temp
			#echo 'Low'
			if [[ ${gpu_fan[$i]} -lt $fan_min ]];then
				local new_fan[$i]=$fan_min
				#local fan_color=$BLUE
				local message="${CYAN}$up ${new_fan[$i]}${WHITE}"
			elif [[ ${gpu_fan[$i]} -gt $fan_min ]];then
				if (( ${gpu_temp[$i]} + $crit_hyst < $target_temp )); then
					local new_fan[$i]=$((${gpu_fan[$i]} - $crit_fan_shift))
				else
					local new_fan[$i]=$((${gpu_fan[$i]} - $fan_shift))
				fi
				[[ ${new_fan[$i]} -gt $fan_max ]] && new_fan[$i]=$fan_max
				[[ ${new_fan[$i]} -lt $fan_min ]] && new_fan[$i]=$fan_min
				local message="${CYAN}$down ${new_fan[$i]}${WHITE}"
			else
				#local fan_color=$BLUE
				local message="${BLUE}Min %${WHITE}" 
			fi
		fi

			

	

		[[ -z $temp_color ]] && temp_color=$WHITE
		[[ -z $fan_color ]] && fan_color="$WHITE"

		string="${CYAN}`fix-string "$i" 3`${WHITE} $bus ${color}`fix-string \"${name}\" 23` ${WHITE}"
		string+="Temp: ${temp_color}`fix-string \"${gpu_temp[$i]} \" 3`${WHITE} 째C | "
		[[ ! -z ${tMem[$i]} ]] && string+="${tMemColor}`fix-string \"${tMem[$i]} \" 4`${WHITE} 째C | " || string+="         "
		string+="Fan: ${fan_color}`fix-string \"${gpu_fan[$i]}% \" 6`${WHITE} "
		string+="$message"
		echo -en "$string"
		
		#Set fan if something changed
		if [[ ! -z ${new_fan[$i]} ]]; then
			if [[ $brand == "A" ]]; then
				#[[ ${name]} == *"Vega"* ]] && local vega="vega"
				#echo -n "@${last_fan[i]}@${new_fan[i]}@"
				#sometimes we can`t put new value, so need to refresh pwm1_enable:
				if [[ ! -z ${last_fan[i]} && ${last_fan[i]} == ${new_fan[i]} && ${last_fan[i]} -gt $fan_min  ]]; then 
					last_fan[i]=${new_fan[i]}					
					[[ -z freezeCount[$i] ]] && local freezeCount[$i]=0
					(( freezeCount[$i]++ ))
					[[ $tempTrigger == 'high' || $tempMemTrigger == 'high' ]] && local sign='+' || local sign='-'
					new_fan[i]=`echo "scale=0; ${new_fan[$i]} $sign 3 * ${freezeCount[$i]}" | bc -l`
					#if [[ $nave -eq 1 ]]; then
					#	echo 0 > ${fanAddr[$i]}/pwm1_enable
					#	sleep 0.2
					#	echo 1 > ${fanAddr[$i]}/pwm1_enable
					#fi
					echo -en "${RED} freeze${WHITE}"					
				else
					last_fan[i]=${new_fan[i]}
					local freezeCount[$i]=0
					#echo -en "ok"
				fi

				echo -en `set_fan_amd ${new_fan[i]} ${fanAddr[$i]} $navi`
				
			elif [[ $brand == "N" ]]; then
				nv_args+=`prepare_nvidia_args ${new_fan[i]} ${gpu_index[$i]}`
				#echo `prepare_nvidia_args ${new_fan[i]} ${gpu_index[$i]}`
			fi
		fi
		echo "" #sometimes amd say something
		unset temp_color fan_color message tempMemTrigger tempTrigger tMemColor
	done
	#echo -e "$nv_args"
	[[ ! -z $nv_args ]] && local nv_result=`nvidia_oc $nv_args`
	[[ ! -z $nv_result ]] && echo -e $nv_result
	$LINE
}

function start () {
	start_time=`date +%s`
	
	echo -e "${GREEN}Thank you for using ${CYAN}OSdog${GREEN} Autofan v 0.3"
	#echo -e "${BROWN}$LOGO${GREEN}"
	echo -e "Visit ${CYAN}www.os.dog${WHITE}"
	$LINE
	
	export DISPLAY=:0

	core_addr_raw=(`ls -d /sys/class/drm/card[0-9]*/device | egrep 'card[0-9]{1,2}/'`)
	
	for (( i=0; i < ${#core_addr_raw[@]}; i++ )); do
		gpu_busid_raw[$i]=$(cat ${core_addr_raw[$i]}/uevent | grep "PCI_SLOT_NAME" | sed 's/.*0000:\([0-9abcdefABCDEF]*\):.*/\1/')
	done
			
	IFS=$'\n' gpu_busid_sys=($(sort <<<"${gpu_busid_raw[*]}"))
	unset IFS
	for (( i=0; i < ${#gpu_busid_raw[@]}; i++ )) do
		for (( y=0; y < ${#gpu_busid_raw[@]}; y++ )) do
			[[ ${gpu_busid_sys[$i]} == ${gpu_busid_raw[$y]} ]] && core_addr[$i]=${core_addr_raw[$y]} && break
		done
	done
	
	while true; do
		cfg=`cat $AF_CFG`
		enabled=`echo $cfg | jq -r '.af_enabled'`
		if [[ $enabled -ne 1 ]]; then
			if [[ $msg_trigger != 1 ]]; then
				echo -n "Autofan is not enabled, waiting."
				msg_trigger=1
			else
				echo -n "."
			fi
			sleep 10
		else
			[[ $msg_trigger == 1 ]] && msg_trigger=0 && echo ""

			target_temp=`echo $cfg | jq -r '.af_tt'`
			[[ $target_temp == 'null' ]] && target_temp=0

			ttMem=`echo $cfg | jq -r '.af_ttmem'`
			[[ $ttMem == 'null' ]] && ttMem=0

			hyst=`echo $cfg | jq -r '.af_hyst'`
			fan_shift=`echo $cfg | jq -r '.af_shift'`
			fan_max=`echo $cfg | jq -r '.af_fanmax'`
			fan_min=`echo $cfg | jq -r '.af_fanmin'`
			delay=`echo $cfg | jq -r '.af_delay'`
			crit_temp=80
			memCritTemp=95
			[[ $hyst -ge 2 ]] && crit_hyst=`echo "scale=0; $hyst * 3 / 1" | bc -l` || crit_hyst=10
			crit_fan_shift=`echo "scale=0; $fan_shift * 3 / 1" | bc -l`

			autofan
			sleep $delay
		fi
	done
}

case $1 in
	show|"")
		screen -d af
		screen -r af
	;;
	stop)
		/dog/screen-kill af
		echo "$(date --rfc-3339=seconds) Autofan stopped"
	;;
	loop)
		[[ ! -f /run/dog/gpuStats ]] && gpu-detect listJS > /run/dog/gpuStats
		json=`cat /run/dog/gpuStats`
		count=`echo $json | jq '.gpu|length'`

		if [[ `gpu-detect NVIDIA` -gt 0 ]]; then
			sleep 5
			export DISPLAY=:0
			unset startFan
			unset fanCount
			allFanCount=0
			NV_FANS_LIST=`nvidia-settings -q fans -V 2>/dev/null | sed -e '/^$/d; /Has the following name:.*/d; /FAN-.*/d; /Is connected/d'`
			listNV=`echo "$json" | jq '[.gpu[] | select(.brand == "N")]'`
			for (( i=0; i < `echo $listNV | jq '.|length'`; i++ )); do
				startFan[$i]=$allFanCount
				name=`echo $listNV | jq -r ".[$i].name"`
				[[ ! $name =~ "GTX" || $name =~ "1660" || $name =~ "RTX" ]] && fanCount[$i]=`echo "$NV_FANS_LIST" | grep -c "gpu:$i]"` #non-GTX and GTX 1660 GPUs
				[[ ${fanCount[$i]} -lt 1 ]] && fanCount[$i]=1
				#echo "Fan count $i ${fanCount[$i]}"
				((allFanCount = $allFanCount + ${fanCount[$i]}))
			done
		fi

		start
	;;
	start|restart)
		/dog/screen-kill af
		screen -c $SCREEN_CFG -dmS "af" -Logfile $LOG bash -c "/dog/af loop"
	;;
	log)
		[[ ! $2 ]] && n=200 || n=$2
		tail -n $n $LOG
	;;
	*)
		bname=`basename $0`
		echo -e "Usage: ${CYAN}$bname show|start|stop|restart${WHITE}"
	;;
esac
