#!/bin/bash
#SobakaOS Autofan v 0.1. Visit www.sobaka.group
#Dependencies: NVIDIA, AMD drivers; jq
AF_CFG="/sobaka/cfg/af.cfg"
[[ ! -f $AF_CFG ]] && echo "You need to create config file $AF_CFG..." && exit 1
#Sample af.cfg:
#Don`t forget to delete braces
#{
#  "af_enabled": 1,
#  "af_tt": 67,
#  "af_hyst": 2,
#  "af_fanmin": 20,
#  "af_fanmax": 95,
#  "af_shift": 4,
#  "af_delay": 12
#}

NVIDIASMI_AF_FILE="/tmp/nvidiasmi_autofan"

#colors section (somebody can use it without SobakaOS)
RED="\e[31m"
WHITE="\e[0m"
GREEN="\e[32m"
BROWN="\e[33m"
BLUE="\e[34m"
PURPLE="\e[35m"
CYAN="\e[36m"
GRAY="\e[37m"

LIGHTRED="\e[1;31m" #good for AMD
YELLOW="\e[1;33m"
LIGHTGREEN="\e[1;32m" #good for Nvidia
LIGHTBLUE="\e[1;34m"
LIGHTPURPLE="\e[1;35m" #comments?
LIGHTCYAN="\e[1;36m" #very bright
LIGHTWHITE="\e[1;37m" #bold white

UNDERLINE="\e[4m"
ITALIC="\e[3m"
STANDART='\e[0m'

up="↗"
down="↘"

LINE="echo -e $BROWN================================================================$WHITE"

LOGO="
                .--~~,__
   :-....,-------\`~~\`._.'
    \`-,,,  ,_      ;'~U'
     _,-' ,'\`-__; \'--.
    (_/'~~      ''''(;
"
#colors section end

function screen_kill () {
	local MINER_PID=$(screen -ls | grep "$1" | sed 's/\s\([0-9]*\)..*/\1/')
	[[ ! -z $MINER_PID ]]&& kill $MINER_PID
}

function set_fan_amd () {
	local fan=$1
	local fan_addr=$2
	echo 1 > $fan_addr/pwm1_enable
	let local fan_adapted=$fan*255/100+2 #fan power is beetween 0 and 255
	[[ $fan_adapted -gt 255 ]] && fan_adapted=255
	echo $fan_adapted > $fan_addr/pwm1
}

function set_fan_nvidia () {
	local fan=$1
	local i=$2
	local args=" -a [gpu:$i]/GPUFanControlState=1"
	args+=" -a [fan:$i]/GPUTargetFanSpeed=$fan"
	nvidia-settings$args >/dev/null 2>&1
}

function autofan () {
	nvidia-smi --query-gpu=index,gpu_bus_id,temperature.gpu,fan.speed --format=csv,noheader> $NVIDIASMI_AF_FILE
	echo -e "${GREEN}Target temp ${CYAN}$target_temp${GREEN}$C, hyst ${CYAN}$hyst${GREEN}, fan min/max ${LIGHTBLUE}$fan_min${GREEN}/${LIGHTRED}$fan_max${GREEN}, shift ${CYAN}$fan_shift${GREEN}, delay ${CYAN}$delay${WHITE}"
	echo -e `date -R`"\n"
	for (( i=0; i < ${#core_addr[@]}; i++ )); do
		if [ $(cat ${core_addr[$i]}/uevent | grep "DRIVER" | \
			sed -e 's/DRIVER\=\([a-z]*\)/\1/') == amdgpu ]; then
	
			local fan_addr[$i]=$(ls -d ${core_addr[$i]}/hwmon/hwmon?)
			local gpu_fan[$i]=$(($(cat "${fan_addr[$i]}/pwm1") * 100 / 255))
			local gpu_temp_raw[$i]=`cat "${fan_addr[$i]}/temp1_input"` #temp1_input - current temp 
			local gpu_temp[$i]=$(echo "scale=0; ${gpu_temp_raw[$i]}/1000" | bc -l) #temp format is something like 65000
			local gpu_brand[$i]="AMD"
		elif [ $(cat ${core_addr[$i]}/uevent | grep "DRIVER" | \
			sed 's/DRIVER\=\([a-z]*\)/\1/') == nvidia ]; then #GPU is NVIDIA
	
			local nvidiainfo=`cat $NVIDIASMI_AF_FILE | grep -i ${gpu_busid_sys[$i]}":00.0"`
			local gpu_index[$i]=`awk -F ', ' '{print $1}' <<< $nvidiainfo`
			local gpu_temp[$i]=`awk -F ', ' '{print $3}' <<< $nvidiainfo`
			local gpu_fan[$i]=$(echo `awk -F ', ' '{print $4}' <<< $nvidiainfo` | sed 's/ %//')
			local gpu_brand[$i]="NVIDIA"
		fi
		[[ -z ${gpu_brand[$i]} ]] && continue
		
		if (( ${gpu_temp[$i]} - $hyst > $target_temp )); then #high temp
			local temp_color=$RED
			if [[ ${gpu_fan[$i]} -ge $fan_max ]]; then
				local fan_color=$RED
				local message="\t${LIGHTRED}Max %${WHITE}"
			else
				local new_fan[i]=$((${gpu_fan[$i]} + $fan_shift))
				[[ ${new_fan[$i]} -gt $fan_max ]] && new_fan[$i]=$fan_max
				local message="\t${LIGHTCYAN}$up ${new_fan[$i]}${WHITE}"
			fi
		elif (( ${gpu_temp[$i]} + $hyst < $target_temp )); then #low temp
			local temp_color=$BLUE
			if [[ ${gpu_fan[$i]} -le $fan_min ]];then
				local fan_color=$BLUE
				local message="\t${LIGHTBLUE}Min %${WHITE}" 
			else
				local new_fan[i]=$((${gpu_fan[$i]} - $fan_shift))
				[[ ${new_fan[$i]} -lt $fan_min ]] && new_fan[$i]=$fan_min
				local message="\t${LIGHTCYAN}$down ${new_fan[$i]}${WHITE}"
			fi
		fi
		[[ -z $temp_color ]] && temp_color=$WHITE
		[[ -z $fan_color ]] && fan_color="$WHITE"
		
		string="${CYAN}$i${WHITE} ${gpu_busid_sys[$i]}:00.0 ${gpu_brand[$i]}\t\t"
		string+="Temp: ${temp_color}${gpu_temp[$i]}${WHITE}°C\t"
		[[ "$temp_color" != "$WHITE" ]] && string+=" " #fucking bug because white is shorter than red
		string+="Fan: ${fan_color}${gpu_fan[$i]}${WHITE}$message"
		#echo $string
		echo -e "$string"
		
		unset temp_color fan_color message
		
		#Set fan if something changed
		if [[ ! -z ${new_fan[$i]} ]]; then
			if [[ ${gpu_brand[$i]} == "AMD" ]]; then
				set_fan_amd ${new_fan[i]} ${fan_addr[$i]}
			elif [[ ${gpu_brand[$i]} == "NVIDIA" ]]; then
				set_fan_nvidia ${new_fan[i]} ${gpu_index[$i]}
			fi
		fi
	done
	$LINE
}

function start () {
	cfg=`cat $AF_CFG`
	enabled=`echo $cfg | jq '.af_enabled'`
	[[ $enabled -ne 1 ]] && echo -e "${RED}Autofan is not enabled, exit${WHITE}" && exit 1
	target_temp=`echo $cfg | jq '.af_tt'`
	hyst=`echo $cfg | jq '.af_hyst'`
	fan_shift=`echo $cfg | jq '.af_shift'`
	fan_max=`echo $cfg | jq '.af_fanmax'`
	fan_min=`echo $cfg | jq '.af_fanmin'`
	delay=`echo $cfg | jq '.af_delay'`
	
	echo -e "${GREEN}Thank you for using ${CYAN}SobakaOS${GREEN} autofan v 0.1"
	echo -e "${BROWN}$LOGO${GREEN}"
	echo -e "Visit ${CYAN}www.sobaka.group${WHITE}"
	$LINE
	
	export DISPLAY=:0

	core_addr_raw=(`ls -d /sys/class/drm/card[0-9]*/device | egrep 'card[0-9]{1,2}/'`)
	
	for (( i=0; i < ${#core_addr_raw[@]}; i++ )); do
		gpu_busid_raw[$i]=$(cat ${core_addr_raw[$i]}/uevent | grep "PCI_SLOT_NAME" | sed 's/.*0000:\([0-9abcdefABCDEF]*\):.*/\1/')
	done
			
	IFS=$'\n' gpu_busid_sys=($(sort <<<"${gpu_busid_raw[*]}"))
	unset IFS
	for (( i=0; i < ${#gpu_busid_raw[@]}; i++ )) do
		for (( y=0; y < ${#gpu_busid_raw[@]}; y++ )) do
			[[ ${gpu_busid_sys[$i]} == ${gpu_busid_raw[$y]} ]] && core_addr[$i]=${core_addr_raw[$y]} && break
		done
	done
	
	while true; do
		autofan
		sleep $delay
	done
}



case $1 in
	show|"")
		screen -d af
		screen -r af
	;;
	stop)
		screen_kill af
		echo "Autofan stopped"
	;;
	loop)
		start
	;;
	start|restart)
		screen_kill af
		screen -dmS af bash -c "/sobaka/af loop"
		echo "Autofan (re)started"
	;;
	*)
		bname=`basename $0`
		echo -e "Usage: ${CYAN}$bname show|start|stop|restart${WHITE}"
	;;
esac