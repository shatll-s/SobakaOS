#!/bin/bash
AMDMEMINFO_FILE=/tmp/amdmeminfo
. colors

[[ ! -f /run/dog/gpuStats ]] && gpu-detect listJS > /run/dog/gpuStats
listAMD=`cat /run/dog/gpuStats | jq '[.gpu[] | select(.brand == "A")]'`
n=`echo $listAMD | jq '.|length'`

if [ $n -eq 0 ]; then
	echo "There are no AMD GPU detected, exiting"
	exit
fi
echo -e "$n "$LIGHTRED"AMD"$WHITE" GPU detected "$(date --rfc-3339=seconds)"\n"
#core_addr_raw=(`ls -d /sys/class/drm/card[0-9]*/device | egrep 'card[0-9]{1,2}/'`)
#for (( i=0; i < ${#core_addr_raw[@]}; i++ )); do
#	gpu_busid_raw[$i]=$(cat ${core_addr_raw[$i]}/uevent | grep "PCI_SLOT_NAME" | sed 's/.*0000:\([0-9abcdefABCDEF]*\):.*/\1/')
#done
#IFS=$'\n' gpu_busid_sys=($(sort <<<"${gpu_busid_raw[*]}"))
#unset IFS
#for (( i=0; i < ${#gpu_busid_raw[@]}; i++ )) do
#	for (( y=0; y < ${#gpu_busid_raw[@]}; y++ )) do
#		[[ ${gpu_busid_sys[$i]} == ${gpu_busid_raw[$y]} ]] && core_addr[$i]=${core_addr_raw[$y]} && break
#	done
#done
#y=0

atitoolData=`atitool -i=* -pciestatus`
echo -e "$atitoolData"
for (( i=0; i < $n; i++ )); do
		unset name navi coreAddr fan_addr temp_raw temp fan_raw fan voltTable memTable vram meminfo info coreState perfLevel memState
		name=`echo $listAMD | jq -r ".[$i].name"`
		bus=`echo $listAMD | jq -r ".[$i].bus"`
		navi=`echo $listAMD | jq -r ".[$i].navi"`
		coreAddr=`echo $listAMD | jq -r ".[$i].coreAddr"`
		fanAddr=`echo $listAMD | jq -r ".[$i].fanAddr"`
		info=`echo $listAMD | jq -r ".[$i].info"`

		card=`echo $coreAddr | sed 's/\/sys\/class\/drm\/card\([0-9]*\)\/device/\1/'`
		[[ $name == *"Vega"* ]] && script="vegatool" || script="wolfamdctrl"
		temp_raw=`cat "$fanAddr/temp1_input"` #temp1_input - current temp 
		temp=`expr $temp_raw / 1000` #temp format is something like 65000
		fan_raw=`cat "$fanAddr/pwm1"`
		let fan=$fan_raw*100/255

		coreState=`cat "$coreAddr/pp_dpm_sclk" | grep \* | sed 's/*//'`
		perfLevel=`cat "$coreAddr/power_dpm_force_performance_level"`
		memState=`cat "$coreAddr/pp_dpm_mclk" | grep \* | sed 's/*//'`

		[[ $n -gt 1 ]] && atitoolStr=`echo "$atitoolData" | grep "$bus" -A4` || atitoolStr=$atitoolData
		pcieWidth=`echo "$atitoolStr" | grep "PCIE Link Width" | sed 's/.*PCIE Link Width = //'`
		pcieSpeed=`echo "$atitoolStr" | grep "PCIE Link Speed" | sed 's/.*PCIE Link Speed = //'`

		#First line: PCI bus, address, temp, fan
		echo -e "GPU $i ${LIGHTRED}${name}${WHITE} $bus\t $coreAddr"

		#Second line: Core state, mem state
		echo -e "Core state\t${LIGHTCYAN}$coreState${WHITE} ($perfLevel)\t"
		echo -e "Mem state\t${LIGHTCYAN}$memState${WHITE}"
		echo -e "Temp\t\t${LIGHTCYAN}$temp °C${WHITE}"
		if [[ $navi -eq 1 ]]; then
			temp_raw2=`cat "$fanAddr/temp3_input"` #temp1_input - current temp 
			temp2=`expr $temp_raw / 1000` #temp format is something like 65000
			echo -e "Mem Temp\t${LIGHTCYAN}$temp °C${WHITE}"
		fi
		echo -e "Fan\t\t${LIGHTCYAN}${fan} %${WHITE}"
		echo -e "PCIE\t\t${LIGHTCYAN}${pcieWidth} ${pcieSpeed}${WHITE}"
		
		#Core clocks (cut, change place, etc)
		if [[ $name == *"Vega"* ]]; then
			voltTable=$(echo -e `$script -i $card --show-core | grep "DPM" -A3` \
			| sed -e 's/VDDC\: /V/g; s/ (voltage table entry /\t\tV/g' \
			| sed -e 's/) Core clock: / /g' \
			| sed -e 's/DPM state /P/g; s/\: /\t/g' \
			| sed 's/\(P[0-9]*\t\)\(V[0-9]*\t\tV[0-9]*\) \([0-9]*\)/\n\1\3 \t\2/g; s/ P/P/g')
		else
			voltTable=$(echo -e `$script -i $card --show-core | grep "DPM" -A3` \
			| sed -e 's/VDDC\: /V/g; s/ (voltage table entry /\t\tV/g' \
			| sed -e 's/) VDDC offset: [-0-9]* Core clock: / /g' \
			| sed -e 's/DPM state /P/g; s/\: /\t/g' \
			| sed 's/\(P[0-9]*\t\)\(V[0-9]*\t\tV[0-9]*\) \([0-9]*\)/\n\1\3 \t\2/g; s/ P/P/g')
		fi
		[[ ! -z $voltTable ]] && echo "-----" && echo -e "${CYAN}State\tCore\tVoltage\t\tVolt.state${WHITE}$voltTable"

		
		echo -e '-----'
		#echo -e "${CYAN}Memory${WHITE}"
		echo -e "$info"
		#Mem clocks
		memTable=`$script -i $card --show-mem | grep "Memory clock" | sed 's/Memory clock\:/\\t/g'`
		#echo $memTable
		[[ ! -z $memTable ]] && echo -e "Clocks:\t" $memTable
		vram=`grep -m 1 "^total:" /sys/kernel/debug/dri/$card/amdgpu_vram_mm`
		meminfo=`echo "$vram" | awk '{printf "%s %.2f MB, %s: %.2f MB, %s: %.2f MB", $1, $2/256, $3, $4/256, $5, $6/256}'`
		[[ ! -z $meminfo ]] && echo $meminfo



		$LINE
#		(( y++ ))
#	fi
done
