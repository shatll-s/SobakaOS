#!/bin/bash
. colors
. /dog/service/pci.ids
AMDMEMINFO_FILE=/tmp/amdmeminfo
NVIDIASMI_FILE=/tmp/nvidiaGpuDetect

GPU_DETECT_STRING="VGA|3D controller|Display controller"

function listJS () {
	local listJS='{}'
	local list=`lspci | grep -E "VGA|3D controller|Display controller" | grep -E "NVIDIA|Advanced Micro Devices" | grep -Ev "$INTERNAL"`
	local coreAddrArray=(`ls -d /sys/class/drm/card[0-9]*/device | egrep 'card[0-9]{1,2}/'`)

	local nv=0

	while read -r string; do
		unset brand color name bus b coreAddr vendor mem info vbios pl
		local bus=`echo $string | awk '{print $1}'`
		local b=`echo $bus | awk -F ':' '{print $1}'`

		for gpuCoreAddr in ${coreAddrArray[@]}; do
			[[ ! -f $gpuCoreAddr/uevent ]] && continue
			local gpuBusRaw=`cat $gpuCoreAddr/uevent | grep "PCI_SLOT_NAME" | sed 's/.*0000:\([0-9abcdefABCDEF]*\):.*/\1/'`
			if [[ $gpuBusRaw == $b ]]; then
				local coreAddr=$gpuCoreAddr
				local vendor=`cat $coreAddr/subsystem_vendor | tr '[:lower:]' '[:upper:]'`
				break
			fi
		done

		if [[ $string =~ "NVIDIA" && `echo "$string" | grep -Ec "$INTERNAL_NVIDIA"` -eq 0 ]]; then
			local brand="N"
			[[ ! -f $NVIDIASMI_FILE ]] &&
				nvidia-smi --query-gpu=gpu_bus_id,name,temperature.gpu,fan.speed,power.draw,power.min_limit,power.default_limit,power.max_limit,memory.total,clocks.gr,clocks.mem,vbios_version,utilization.gpu --format=csv,noheader,nounits > $NVIDIASMI_FILE
			local nvidiainfo=`cat $NVIDIASMI_FILE | grep -i "$b:00.0"`
			if [[ ! -z $nvidiainfo ]]; then
				local name=`awk -F ', ' '{print $2}' <<< $nvidiainfo`
				local pl=`awk -F ', ' '{print $6"/"$7"/"$8}' <<< $nvidiainfo | sed 's/\.00//g'`
				local mem=`awk -F ', ' '{print $9}' <<< $nvidiainfo`
				local vbios=`awk -F ', ' '{print $12}' <<< $nvidiainfo`
				local status=0
			else
				local name=`echo $string | sed 's/.*controller: //'`
				local status=1
			fi
			local info="$vbios"
			(( nv++ )) #nvidia gpus
		elif [[ $string =~ "Advanced Micro Devices" && `echo "$string" | grep -Ec "$INTERNAL_AMD"` -eq 0 ]]; then
			local brand="A"
			#local color="$LIGHTRED"
			
			[[ ! -f $AMDMEMINFO_FILE ]] && amdmeminfo -q -s -n > $AMDMEMINFO_FILE
			local name=`cat $AMDMEMINFO_FILE | grep "$b.00.0" | awk -F ":" '{ print $3 }'`
			local info=`cat $AMDMEMINFO_FILE | grep "$b.00.0" | awk -F ":" '{ print $5", " $4 }'`
			
			if [[ ! -z $coreAddr ]]; then
				local iCard=`echo $coreAddr | sed "s/.*card\([0-9]*\).*/\1/"`
				local fanAddr=`ls -d $coreAddr/hwmon/hwmon[0-9]*`
				local n=`echo $coreAddr | sed 's#/sys/class/drm/card\([0-9a-zA-Z]*\).*#\1#'`

				if [[ -e $coreAddr/mem_info_vram_total ]]; then
					local mem="`cat $coreAddr/mem_info_vram_total 2>/dev/null`" && mem="$(( $mem/1024/1024 ))"
				elif [[ -e /sys/kernel/debug/dri/$iCard/amdgpu_vram ]]; then
					local mem="`stat -c %s /sys/kernel/debug/dri/$iCard/amdgpu_vram 2>/dev/null`" && mem="$(( $mem/1024/1024 ))"
				else
					local mem=`dmesg | grep ".*VRAM.*used" | grep "amdgpu 0000:${gpu_busid_sys[$i]}:00.0" | sed -n 's/.*VRAM:\s\([0-9MG]\+\).*/\1/p'`
				fi
				local status=0
				if [[ -f $coreAddr/uevent ]]; then
					. $coreAddr/uevent
					if [[ `echo $PCI_ID | grep -E "$NAVI_ID"` ]]; then
						local navi=1
					elif [[ `echo $PCI_ID | grep -E "$NAVI21_ID"` ]]; then
						local navi=21
					elif [[ `echo $PCI_ID | grep -E "$NAVI22_ID"` ]]; then
						local navi=22
					else
						local navi=0
					fi
				fi
			else
				local status=1
			fi
		else
			local internal=`lspci -s "$bus" | sed 's/.*controller: //'`
		fi
		
		if [[ $1 == "list" ]]; then
			[[ ! -z $text ]] && text+="\n"
			text+="${CYAN}$i${WHITE} $bus ${color}${name}${WHITE}\t${info}"
		fi
		
		local json='{}'
		for option in bus b brand name mem info vendor status coreAddr fanAddr vbios pl navi; do
			eval "[[ -z \$$option ]] && continue"
			eval "local value=\"\${$option}\""
			
			local json=$(jq -n --arg data "$json" \
				--arg key "$option" \
				--arg value "$value" \
				'$data | fromjson + { ($key) : ($value)}')
		done
		local listJS=`jq -c "{gpu:(.gpu + [$json])}" <<< "$listJS"`
		((i++))
	done <<< "$list"
	[[ $1 == "list" ]] && echo -e "$text"
	
	echo $listJS | jq '.'
}

case $1 in
	all)
		list=`lspci | grep -E "VGA|3D controller|Display controller"`
		echo "$list" | grep -E "NVIDIA|Advanced Micro Devices" | grep -Evc "$INTERNAL"
	;;
	listJS)
		[[ `gpu-detect NVIDIA` -gt 0 ]] && nvidia-smi --query-gpu=gpu_bus_id,name,temperature.gpu,fan.speed,power.draw,power.min_limit,power.default_limit,power.max_limit,memory.total,clocks.gr,clocks.mem,vbios_version,utilization.gpu --format=csv,noheader,nounits > $NVIDIASMI_FILE
		[[ `gpu-detect AMD` -gt 0 ]] && amdmeminfo -q -s -n > $AMDMEMINFO_FILE
		listJS
	;;
	list)
		[[ ! -f /run/dog/gpuStats ]] && listJS > /run/dog/gpuStats

		json=`cat /run/dog/gpuStats`
		count=`echo $json | jq '.gpu|length'`
		if [[ $count -gt 0 ]]; then
			for ((i=0; $i < $count; i++)); do
				name=`echo $json | jq ".gpu[$i].name" --raw-output`
				bus=`echo $json | jq ".gpu[$i].bus" --raw-output`
				brand=`echo $json | jq ".gpu[$i].brand" --raw-output`
				mem=`echo $json | jq ".gpu[$i].mem" --raw-output`" Mb"
				[[ -z $mem || $mem == "null" ]] && mem="n/a"
				if [[ $brand == "A" ]]; then
					info=`echo $json | jq ".gpu[$i].info" --raw-output`
					color="$LIGHTRED"
				elif [[ $brand == "N" ]]; then
					pl=`echo $json | jq ".gpu[$i].pl" --raw-output`
					info="PL: $pl"
					color="$LIGHTGREEN"
				else #this is integrated
					bus="       "
					mem=""
					color="$YELLOW"
				fi
				
				echo -e "${CYAN}$i${WHITE} $bus ${color}`fix-string \"${name}\" 23` ${CYAN}`fix-string \"${mem}\" 8`${WHITE} ${info}"
			done
		else
			echo "No GPU detected. May be you need to wait some time"
		fi
	;;
	AMD|Amd|amd)
		list=`lspci | grep -E "VGA|3D controller|Display controller"`
		echo "$list" | grep -E "Advanced Micro Devices" | grep -Evc "$INTERNAL_AMD"
	;;
	NVIDIA|Nvidia|nvidia)
		if [[ $2 == "list" ]]; then
			nvidia-smi --query-gpu=gpu_bus_id,name --format=csv,noheader | sed -e 's/[0]*://' 
		else
			list=`lspci | grep -E "VGA|3D controller|Display controller"`
			echo "$list" | grep -E "NVIDIA" | grep -Evc "$INTERNAL_NVIDIA"
		fi
	;;
	internal)
		list=`lspci | grep -E "VGA|3D controller|Display controller"`
		if [[ $2 == "show" ]]; then
			echo "$list" | grep -Ev "NVIDIA|Advanced Micro Devices" | sed 's/.*controller: //'
		else
			echo "$list" | grep -Evc "NVIDIA|Advanced Micro Devices"
		fi
	;;
	*)
		bname=`basename $0`
		echo "Usage: $bname AMD|NVIDIA|all|list|listJS|NVIDIA list"
	;;
esac
