#!/bin/bash
# tmate control script
. /dog/colors

T_HOST="188.127.251.99"
T_PORT=33322
FINGERPRINT="SHA256:2HqU8ShGUt3CwK9PCfp2PvSJbt7/BSyU2vtbtOlMHrE"
ED25519_FINGERPRINT="SHA256:1vbzBDcT6z6yPr9hM5uozyaLj7IhzYhstVOJHEZ0a+A"

SOCKET="/tmp/tmate.sock"
#CMD="/dog/sbin/tmate"
CMD="tmate"

INSTALL_LINK="https://os.dog/downloads/other/tmate.tar.gz"
NEED_VER="240"
CFG_FILE=/dog/service/tmate.conf
LOG=/dog/log/tmate.log

#Args
FORCE=
ATTACH=

showHelp () {
	echo "Help for $0"
}

checkVer () {
	ver=`tmate -V 2>/dev/null | sed 's/.*\s//'`
	exitcode=$?
	if [[ $exitcode -ne 0 ]]; then
		msg="Tmate is not installed"
		return=1
	else
		msg="Current version: $ver"
		[[ `echo $ver | sed 's/\.//g'` -lt $NEED_VER ]] && return=1 || return=0
	fi

	[[ $1 == 'verbose' ]] && echo "$msg"
	return $return
}

installTmate () {
	local tmpfile="/tmp/tmate.tar.gz"
	local tmpDir="/tmp/tmate"
	rm -f $tmpfile

	[ -t 1 ] && ARG="" || ARG="-q"

	wget $ARG -c $INSTALL_LINK -O $tmpfile
	[[ $? -ne 0 ]] && echo -e "${LIGHTRED}> Download failed${WHITE}" && exit 1
	
	echo -e "${CYAN}> Uncompressing${WHITE}"
	rm -r -f $tmpDir
	mkdir $tmpDir

	tar -xf $tmpfile -C $tmpDir
	[[ $? -ne 0 ]] && echo -e "${LIGHTRED}> Error while uncompressing${WHITE}" && rm -r -f $tmpDir && exit 1

	echo -e "${CYAN}> Installing${WHITE}"
	dpkg -i $tmpDir/*.deb

	[[ $? -ne 0 ]] && echo -e "${LIGHTRED}> Error while uncompressing${WHITE}" && rm -r -f $tmpDir && exit 1

	echo -e "${GREEN}> Tmate install complete${WHITE}"
	rm -r -f $tmpDir $tmpfile
}

setup () {
	local CFG="
set -g tmate-server-host $T_HOST
set -g tmate-server-port $T_PORT
set -g tmate-server-rsa-fingerprint $FINGERPRINT
set -g tmate-server-ed25519-fingerprint $ED25519_FINGERPRINT

# set-option -g -q mouse on
# Toggle mouse on
bind-key M \
  set-option -g mouse on \;\
  display-message 'Mouse: ON'

# Toggle mouse off
bind-key m \
  set-option -g mouse off \;\
  display-message 'Mouse: OFF'

unbind C-b 
set -g prefix C-a
bind -n M-Left select-pane -L 
bind -n M-Right select-pane -R 
bind -n M-Up select-pane -U 
bind -n M-Down select-pane -D
# set active-inactive window styles
set -g window-style 'fg=colour247,bg=colour236'
set -g window-active-style 'fg=default,bg=colour234'

# Pane border
set -g pane-border-bg default
set -g pane-border-fg colour238

# Active pane border
set -g pane-active-border-bg default
set -g pane-active-border-fg blue
"
	
	echo -e "$CFG" > $CFG_FILE	
}
show () {
	$CMD -S $SOCKET display -p '#{tmate_ssh}' 
}
attach () {
	$CMD -f $CFG_FILE -S $SOCKET -2 attach-session -d
}

start () {
	if [[ ! -z  `pidof tmate` ]]; then
		echo -e "${CYAN}> Tmate is already running${WHITE}"
		show
		exit 1
	fi
	#$CMD -f $CFG_FILE -S $SOCKET split-window -h 'screen -r yes'
	#$CMD -f $CFG_FILE -S $SOCKET split-window -v 'screen -r yes2'
	#$CMD -f $CFG_FILE -S $SOCKET select-pane -t 0

	[[ `checkVer` -eq 1 ]] && echo -e "${CYAN}> Need to install tmate firse${WHITE}" && installTmate
	[[ ! -f $CFG_FILE ]] && "${CYAN}> No config file, setup first${WHITE}" && setup

	$CMD -f $CFG_FILE -S $SOCKET new-session -d
	
	echo -en "${CYAN}> Waiting for connection${WHITE}"
	try=0
	while [[ $try -lt 100 ]]; do #30 sec
		data=`show`
		[[ ! -z $data ]] && break
		echo -en "${CYAN}.${WHITE}"
		sleep 0.3
		((try++))	
	done
	echo ""

	[[ $try -ge 30 ]] && echo -e "${LIGHTRED}Something goes wrong, connection can\`t be established${WHITE}" && exit 1
	
	echo -e "$data"
	[[ $ATTACH -eq 1 ]] && attach
}

stop () {
	[[ $1 == 'verbose' ]] && echo -e "${GREEN}> Stopping tmate session${WHITE}"
	PID=`pidof tmate`
	if [[ ! -z $PID ]]; then
		kill -9 $PID
	else
		[[ $1 == 'verbose' ]] && echo -e "${CYAN}> There is no active tmate sessions${WHITE}"
	fi
}

while [ -n "$1" ]; do
	option=$1
	case $option in
		--help|-h)
			showHelp
			exit 0
		;;
		--version|-V)
			checkVer verbose
			exit 0
		;;
		--force|-v)
			FORCE=1
		;;
		--attach|-a)
			ATTACH=1
		;;
		install|setup|attach|start|stop|restart|go|show)
			command=$option
		;;
		*)
			echo "Uncorrect argument $option"
		;;
	esac

	shift
done

case $command in
	install)
		if [[ $FORCE -ne 1 ]]; then
			if [[ `checkVer` -eq 0 ]]; then
				checkVer verbose
				echo "No need to reinstall tmate"
				
				if [[ -t 1 ]]; then 
					echo -en "If you want to reinstall tmate, type \"yes\": "
					read answer
					if [[ $answer == "y" || $answer == "Y" || $answer == "yes" || $answer == "Yes" ]]; then
						:
					else
						echo "Ok, bye"
						exit 0
					fi
				else
					echo "If you still want to do it, run command with \"-f\" argument"
					exit 1
				fi		
			fi
		fi

		installTmate
	;;
	setup)
		setup
	;;
	attach)
		attach
	;;
	start)
		start
	;;
	stop)
		stop verbose
	;;
	restart)
		stop
		start
	;;
	go)
		stop
		setup
		start
	;;
	show)
		$CMD -S $SOCKET display -p '#{tmate_ssh}' 
	;;
	*)
		echo -e "${LIGHTRED}No command specified${WHITE}"
		showHelp
		exit 1
	;;
esac
