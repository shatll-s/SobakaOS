#!/bin/bash
# tmate control script
. /dog/colors

#old
#T_HOST="188.127.251.99"
#T_PORT=33322
#FINGERPRINT="SHA256:2HqU8ShGUt3CwK9PCfp2PvSJbt7/BSyU2vtbtOlMHrE"
#ED25519_FINGERPRINT="SHA256:1vbzBDcT6z6yPr9hM5uozyaLj7IhzYhstVOJHEZ0a+A"

T_HOST="sobaka.group"
T_PORT=2200
FINGERPRINT="SHA256:pj6jMtCIgg26eJtHUro6KEmVOkVGmLdclArInW9LyLg"
ED25519_FINGERPRINT="SHA256:ltQuqZqoF1GHYrrAVd99jW8W7vj/1gwoBwBF/FC9iuU" 


SOCKET="/tmp/tmate.sock"

NEED_VER="240"
CFG_FILE=/dog/cfg/tmate.conf
LOG=/dog/log/tmate.log

#Args
FORCE=
ATTACH=

CMD="tmate"
system=`lsb_release -r | sed "s/.*\s\([.0-9]*\)/\1/"`

if [[ $system == '18.04' ]]; then
	INSTALL_LINK="https://os.dog/downloads/other/tmate-deb-18.04.tar.gz"
	#CMD="tmate"
else
	INSTALL_LINK="https://os.dog/downloads/other/tmate-deb-20.04.tar.gz"
	#CMD="/dog/sbin/tmate"
fi
	
showHelp () {
	bname=`basename $0`
	echo -e "Usage: ${CYAN}$bname [ arg ] command${WHITE}"
	echo ""
	echo -e "Commands:"
	echo -e "${GREEN}  install     ${WHITE}Install tmate"
	echo -e "${GREEN}  setup       ${WHITE}Setup tmate configuration"
	echo ""
	echo -e "${GREEN}  start       ${WHITE}Install and setup if needed, than start session"
	echo -e "${GREEN}  stop        ${WHITE}Stop session"
	echo -e "${GREEN}  restart     ${WHITE}Restart session"
	echo -e "${GREEN}  go          ${WHITE}Force setup and start session"
	echo -e "${GREEN}  show        ${WHITE}Show connection information"
	echo -e "${GREEN}  attach      ${WHITE}Attach to existing session"
	
	echo ""
	echo -e "Options:"
	echo -e "${GREEN}  -f,--force  ${WHITE}Used to force reinstall (even it is not needed)"
	echo -e "${GREEN}  -a,--attach ${WHITE}Attach to session after starting"
	echo -e "${GREEN}  -h,--help   ${WHITE}Show this message"
}

checkVer () {
	ver=`tmate -V 2>/dev/null | sed 's/.*\s//'`
	exitcode=$?
	if [[ $exitcode -ne 0 ]]; then
		msg="Tmate is not installed"
		return=1
	else
		msg="Current version: $ver. "
		if [[ `echo $ver | sed 's/\.//g'` -lt $NEED_VER ]]; then
			msg+="Need to upgrade"
			return=1
		else
			msg+="No need to upgrade"
			return=0
		fi
	fi

	[[ $1 == 'verbose' ]] && echo "$msg"
	return $return
}

installTmate () {
	local tmpfile="/tmp/tmate.tar.gz"
	local tmpDir="/tmp/tmate"
	rm -f $tmpfile

	[ -t 1 ] && ARG="" || ARG="-q"

	wget $ARG -c $INSTALL_LINK -O $tmpfile
	
	[[ $? -ne 0 ]] && echo -e "${LIGHTRED}> Download failed${WHITE}" && exit 1
	
	echo -e "${CYAN}> Uncompressing${WHITE}"
	rm -r -f $tmpDir
	mkdir $tmpDir

	tar -xf $tmpfile -C $tmpDir
	[[ $? -ne 0 ]] && echo -e "${LIGHTRED}> Error while uncompressing${WHITE}" && rm -r -f $tmpDir && exit 1

	echo -e "${CYAN}> Installing${WHITE}"
	if [[ `ls -l $tmpDir | grep .deb` ]]; then
		dpkg -i $tmpDir/*.deb
		[[ $? -ne 0 ]] && echo -e "${LIGHTRED}> Error while installing${WHITE}" && rm -r -f $tmpDir && exit 1
	fi

	#if [[ $system == '20.04' ]]; then
	#	chmod 777 $tmpDir/tmate
	#	cp $tmpDir/tmate /dog/sbin/tmate
	#	[[ $? -ne 0 ]] && echo -e "${LIGHTRED}> Error while installing${WHITE}" && rm -r -f $tmpDir && exit 1
	#fi
		
	echo -e "${GREEN}> Tmate install complete${WHITE}"
	rm -r -f $tmpDir $tmpfile
}

setup () {
	local cfg="
set -g tmate-server-host $T_HOST
set -g tmate-server-port $T_PORT
set -g tmate-server-rsa-fingerprint $FINGERPRINT
set -g tmate-server-ed25519-fingerprint $ED25519_FINGERPRINT

# set-option -g -q mouse on
# Toggle mouse on
bind-key M \
  set-option -g mouse on \;\
  display-message 'Mouse: ON'

# Toggle mouse off
bind-key m \
  set-option -g mouse off \;\
  display-message 'Mouse: OFF'

#unbind C-b 
#set -g prefix C-a
bind -n M-Left select-pane -L 
bind -n M-Right select-pane -R 
bind -n M-Up select-pane -U 
bind -n M-Down select-pane -D
# set active-inactive window styles
set -g window-style 'fg=colour247,bg=colour236'
set -g window-active-style 'fg=default,bg=colour234'

# Pane border
set -g pane-border-bg default
set -g pane-border-fg colour238

# Active pane border
set -g pane-active-border-bg default
set -g pane-active-border-fg blue

#send-keys q
"
	
	echo -e "$cfg" > $CFG_FILE	
}
show () {
	$CMD -S $SOCKET display -p '#{tmate_ssh}' 2>/dev/null
	$CMD -S $SOCKET display -p '#{tmate_web}' 2>/dev/null
}
attach () {
	$CMD -f $CFG_FILE -S $SOCKET -2 attach-session -d
}

start () {
	if [[ ! -z  `pidof tmate` ]]; then
		echo -e "${CYAN}> tmate is already running${WHITE}"
		show
		exit 1
	fi
	
	checkVer
	checkVerExitcode=$?
	[[ $checkVerExitcode -eq 1 ]] && echo -e "${CYAN}> Need to install tmate first${WHITE}" && installTmate
	if [[ ! -f $CFG_FILE ]]; then
		echo -e "${CYAN}> No config file, setup first${WHITE}"
		setup
	else
		echo -e "${CYAN}> Found config file ${CFG_FILE}${WHITE}"
	fi

	systemctl restart dogmate

	echo -en "${CYAN}> Waiting for connection${WHITE}"
	try=0
	while [[ $try -lt 100 ]]; do #30 sec
		data=`show`
		[[ ! -z $data ]] && break
		echo -en "${CYAN}.${WHITE}"
		sleep 0.3
		((try++))	
	done
	echo ""

	[[ $try -ge 30 ]] && echo -e "${LIGHTRED}Something goes wrong, connection can\`t be established${WHITE}" && exit 1
	
	echo -e "$data"
	[[ $ATTACH -eq 1 ]] && attach #|| $CMD -f $CFG_FILE -S $SOCKET wait tmate-ready
}

stop () {
	[[ $1 == 'verbose' ]] && echo -e "${CYAN}> Stopping tmate service${WHITE}"
	systemctl stop dogmate

	[[ $1 == 'verbose' ]] && echo -e "${CYAN}> Stopping standalone tmate sessions${WHITE}"
	PID=`pidof tmate`
	if [[ ! -z $PID ]]; then
		kill -9 $PID
	else
		[[ $1 == 'verbose' ]] && echo -e "${CYAN}> There is no standalone tmate sessions${WHITE}"
	fi
}

while [ -n "$1" ]; do
	option=$1
	case $option in
		--help|-h)
			showHelp
			exit 0
		;;
		--version|-V)
			checkVer verbose
			exit 0
		;;
		--force|-f)
			FORCE=1
		;;
		--attach|-a)
			ATTACH=1
		;;
		install|setup|attach|start|stop|restart|go|show|start-cli)
			command=$option
		;;
		*)
			echo "Uncorrect argument $option"
		;;
	esac

	shift
done

[[ ! $command && $ATTACH -eq 1 ]] && command='attach' #short combination dogmate -a

case $command in
	install)
		echo $FORCE
		if [[ $FORCE -ne 1 ]]; then
			checkVer
			checkVerExitcode=$?
			if [[ $checkVerExitcode -eq 0 ]]; then #if version is OK, may be no need to upgrade?
				checkVer verbose #just for text
				echo "No need to reinstall tmate"
				
				if [[ -t 1 ]]; then 
					echo -en "If you want to reinstall tmate, type \"yes\": "
					read answer
					if [[ $answer == "y" || $answer == "Y" || $answer == "yes" || $answer == "Yes" ]]; then
						:
					else
						echo "Ok, bye"
						exit 0
					fi
				else
					echo "If you still want to do it, run command with \"-f\" argument"
					exit 1
				fi		
			fi
		fi

		echo -e "${CYAN}> Stopping tmate service${WHITE}"
		systemctl stop dogmate
		stop verbose

		echo -e "${CYAN}> Remove previos versions${WHITE}"
		[[ `dpkg -l | grep -c tmate` -ne 0 ]] && apt remove -y --purge tmate
		installTmate
	;;
	setup)
		setup
	;;
	attach)
		attach
	;;
	start-cli) #only for service. Don`t use in manually
		echo "$CMD -f $CFG_FILE -S $SOCKET new-session -d"
		#if [[ $system == '18.04' ]]; then
			$CMD -f $CFG_FILE -S $SOCKET new-session -d
		#else
		#	$CMD -f $CFG_FILE -S $SOCKET new-session -d	
		#fi

		#$CMD -f $CFG_FILE -S $SOCKET -F new-session -d -c bash
	;;
	start)
		start		
	;;
	stop)
		echo -e "${CYAN}> Stopping tmate service${WHITE}"
		systemctl stop dogmate
		stop verbose
	;;
	restart)
		stop verbose
		start
	;;
	go)
		#stop
		setup
		systemctl start dogmate
	;;
	show)
		show
	;;
	*)
		echo -e "${LIGHTRED}No command specified${WHITE}"
		showHelp
		exit 1
	;;
esac
