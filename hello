#!/bin/bash
API_TIMEOUT=10
RIG_CFG="/dog/cfg/rig.cfg"
NVIDIASMI_FILE=/tmp/nvidiasmi #need to get some info from nvidia-smi
AMDMEMINFO_FILE=/tmp/amdmeminfo
. colors

. $RIG_CFG
export DISPLAY=":0"

for arg in $@; do
	[[ $arg == '--initial' ]] && INITIAL=1
	[[ $arg == '-v' || $arg == '--verbose' ]] && VERBOSE=1
	[[ $arg == '-b' || $arg == '--boot' ]] && BOOT=1
done

###########################################################################################
#get first stats from system and miner, send to host, receive answer with comands 		  #
###########################################################################################
function firststats {
	echo -e "${GREEN}> Collecting GPU data${WHITE}"
	gpu-detect listJS > /run/dog/gpuStats
	list=`cat /run/dog/gpuStats`
	gpuCount=`echo $list | jq '.gpu|length'`

	for option in b name info mem brand vendor pl status; do
		optionName=$option
		[[ $option == 'b' ]] && optionName='busid' #bad code, but po hui
		local json='{}'
		for ((i=0; i < $gpuCount; i++)); do
			local value=`echo $list | jq -r ".gpu[$i].$option"`
			[[ $value == 'null' ]] && value=''
			
			json=`jq -n --arg data "$json" \
				--arg key "$i" \
				--arg value "$value" \
				'$data | fromjson + { ($key) : ($value)}'`

		done
		eval "${optionName}Json='$json'"
	done

	##################################################################
	# get system info
	##################################################################
	echo -e "${GREEN}> Collecting system data${WHITE}"
	dmidecode_processor=`dmidecode -t Processor`
	dmidecode_mb=`dmidecode -t Baseboard`
	dmidecode_bios=`dmidecode -t BIOS`
	cpu_json=$(
		jq -n \
		--arg version "`echo "$dmidecode_processor" | grep "Version" | sed -e 's/Version\: //; s/\t//' | tr -d '\n'`" \
		--arg core "`echo "$dmidecode_processor" | grep  "Core Count" | sed -e 's/Core Count\: //; s/\t//' | tr -d '\n'`" \
		--arg cur_speed "`echo "$dmidecode_processor" | grep  "Current Speed" | sed -e 's/Current Speed\: //; s/\t//' | tr -d '\n'`" \
		--arg max_speed "`echo "$dmidecode_processor" | grep  "Max Speed" | sed -e 's/Max Speed\: //; s/\t//' | tr -d '\n'`" \
		'{
			$version,
			$core,
			$cur_speed,
			$max_speed
		}'
	)

	mb_json=$(
		jq -n \
		--arg product_name "`echo "$dmidecode_mb" | grep  "Product Name" | sed -e 's/Product Name\: //; s/\t//' | tr -d '\n'`" \
		--arg manufacturer "`echo "$dmidecode_mb" | grep  "Manufacturer" | sed -e 's/Manufacturer\: //; s/\t//' | tr -d '\n'`" \
		--arg sn "`echo "$dmidecode_mb" | grep  "Serial Number" | sed -e 's/Serial Number\: //; s/\t//' | tr -d '\n'`" \
		--arg bios "`dmidecode -s bios-version` `dmidecode -s bios-release-date`" \
		'{
			$product_name,
			$manufacturer,
			$sn,
			$bios
		}'
	)

	#ip=(`ifconfig | grep "inet addr" | grep -v "127.0.0.1" | awk '{print $2}' | sed 's/addr\://'`)
	ifconfig=`ifconfig`
	ip=(`echo "$ifconfig" | grep "inet " | grep -v "127.0.0.1" | awk '{print $2}' | sed 's/addr\://'`)
	ip_json='{}'
	mac_json='{}'
	for ((i=0; i < ${#ip[@]}; i++)); do
		mac[$i]=`ifconfig | grep "${ip[$i]}" -A4 | grep "ether" | awk '{print $2}'`
		[[ ! -z ${mac[$i]} ]] && 
			mac_json=$(jq -n --arg data "$mac_json" \
				--arg key "$i" \
				--arg value "${mac[$i]^^}" \
				'$data | fromjson + { ($key) : ($value)}')

		ip_json=$(jq -n --arg data "$ip_json" \
			--arg key "$i" \
			--arg value "${ip[$i]}" \
			'$data | fromjson + { ($key) : ($value)}')
	done

	##################################################################

	driver_amd=`dpkg -l | grep amdgpu-core | awk '{print $3}'`
	driver_nvidia=`modinfo nvidia -F version`

	sysinfo=$(
		jq -n \
		--arg system "`lsb_release -d --short` `uname -m`" \
		--arg osver "`apt-cache policy osdog | grep Installed | sed 's/Installed://; s/\s*//'`" \
		--arg kernel "`uname -r`" \
		--arg driver_amd "$driver_amd" \
		--arg driver_nvidia "$driver_nvidia" \
		--arg ram "`free -m | grep Mem | awk '{print $2}'`" \
		--arg hdd_model "`hdparm -I /dev/sda | grep "Model Number" | sed 's/.*Model Number:\s*//' | sed 's/\"/\\\\\"/'`" \
		--arg hdd_total "`df -H | grep "/$" | awk '{print $2}'`" \
		--arg hdd_free "`df -H | grep "/$" | awk '{print $4}'`" \
		--argjson cpu "$cpu_json" \
		--argjson mb "$mb_json" \
		'{	
			$system,
			$osver,
			$kernel,
			$driver_amd,
			$driver_nvidia,
			$cpu,
			$mb,
			$ram,
			$hdd_model,
			$hdd_total,
			$hdd_free
		}'
	)

	local request=$(
		jq -n \
		--arg password "$PASSWD" \
		--arg refresh "$(date +%s)" \
		--arg online $(date --date "`uptime -s`" +%s) \
		--argjson ip "$ip_json" \
		--argjson mac "$mac_json" \
		--argjson gpu_busid "$busidJson" \
		--argjson gpu_name "$nameJson" \
		--argjson gpu_mem "$memJson" \
		--argjson gpu_brand "$brandJson" \
		--argjson gpu_info "$infoJson" \
		--argjson gpu_vendor "$vendorJson" \
		--argjson gpu_status "$statusJson" \
		--argjson sysinfo "$sysinfo" \
		'{	
			"jsonrpc": "2.0",
			"stats": {
				$password,
				$refresh,
				$online,
				$ip,
				$mac,
				$gpu_busid,
				$gpu_name,
				$gpu_mem,
				$gpu_vendor,
				$gpu_info,
				$gpu_brand,
				$gpu_status,
				$sysinfo
			}
		}'
	)
	[[ $plJson != '{}' ]] && request=`jq ".stats += {\"pl\": $plJson}" <<< "$request"`
	#[[ $gpu_vendor_json != '{}' ]] && request=`jq ".stats += {\"gpu_vendor\": $gpu_vendor_json}" <<< "$request"`

	[[ $VERBOSE -eq 1 ]] && echo $request | jq '.' 
	echo $request | jq '.stats' | jq 'del(.password)' > /run/dog/statsHello #save stats for watchdogs
	try=0
	url="$HOST/$RIG_ID"
	#"${HOST}?id=${RIG_ID}&method=hello2"
	echo -e "${GREEN}> Trying to say \"hello\" to server side $url${WHITE}"

	while [[ $try -lt 5 ]]; do
		response=$(echo $request | curl -s --data @- \
			--connect-timeout 7 --max-time 15 \
			"$url" -H "Content-Type: application/json; charset=utf-8\r\n")
		#echo $response
		if [[ $? -eq 0 ]]; then
			[[ $VERBOSE -eq 1 ]] && echo $response | jq '.' 
			#echo $response | jq '.'
			answer=$(echo $response | jq -r '.hello_answer')
			#answer=$(echo $response) #just for debug
			[ -t 1 ] && echo -e "${GREEN}> First stats (GPU names, memory, bus ID) sent ${CYAN}[$answer]${WHITE}" ||
				echo $(date --rfc-3339=seconds)" First stats (GPU names, memory, bus ID) sent [$answer]"
			
			#  echo $response | jq '.'
			
			if [[ $answer == "Data received" ]]; then
				#name
				name=$(echo $response | jq ".name" -r)
				if [[ ! -z $name && $name != 'null' ]]; then
					dog-command change_name "$name" --hello
				fi

				#settings
				command_argument=$(echo $response | jq ".settings" --raw-output)
				dog-command settings "$command_argument" --hello

				#nvidia
				command_argument=$(echo $response | jq ".nvidia" --raw-output)
				dog-command change_nvidia_oc "$command_argument" --hello

				#amd
				command_argument=$(echo $response | jq ".amd" --raw-output)
				dog-command change_amd_oc "$command_argument" --hello

				#autofan
				command_argument=$(echo $response | jq ".af" --raw-output)
				dog-command af "$command_argument" --hello

				#autoswitch
				command_argument=$(echo $response | jq ".as" --raw-output)
				dog-command autoswitch "$command_argument" --hello

				#remotessh
				command_argument=$(echo $response | jq ".remotessh" --raw-output)
				dog-command remotessh "$command_argument"
				
				#. $RIG_CFG
				#if [[ $SERVICE_MODE -gt 0 ]]; then
				#	manifest1=''
				#	manifest2=''
				#else
					manifest1=`echo $response | jq ".batch1" --raw-output`
					manifest2=`echo $response | jq ".batch2" --raw-output`
				#fi
				if [[ ! -z $INITIAL ]]; then
					echo -e "${GREEN}> This is initial run, applying batches ${WHITE}"
					netmanager start
					#manifests
					dog-command batch1 "$manifest1" --hello
					dog-command batch2 "$manifest2" --hello
				else
					echo "$manifest1" > /tmp/batch1
					echo "$manifest2" > /tmp/batch2
				fi
				
				echo -e "${GREEN}> Initial settings (AutoFan, AutoSwitch, NVIDIA & AMD OC, etc) received and applied${WHITE}"
				exit 0
			fi
		else
		[ -t 1 ] && echo -e "${RED}> Error while sending first stats${WHITE}" ||
			echo $(date --rfc-3339=seconds)" Error while sending first stats"
		fi
		sleep 5
		. $RIG_CFG
		((try++))
		
	done
}
if [[ $BOOT -eq 1 ]]; then
	try=0
	#echo "HOST $HOST"
	echo -e "${GREEN}> Trying to get boot parametres from server${WHITE}"
	while [[ $try -lt 5 ]]; do
		request=`jq -n --arg password "$PASSWD" '{	"jsonrpc": "2.0", "stats": { $password } }'`
		response=`echo $request | curl -s --data @- --connect-timeout 7 --max-time 15 \
			"${HOST}?id=${RIG_ID}&method=boot" -H "Content-Type: application/json; charset=utf-8\r\n"`
		exitcode=$?
		if [[ $exitcode -eq 0 ]]; then
			status=`echo $response | jq -r '.status'`
			
			if [[ $status == "success" ]]; then
				echo -e "${GREEN}> Boot parametres successfully received${WHITE}"
				
				command_argument=`echo $response | jq ".settings" --raw-output`
				dog-command settings "$command_argument" --hello
				exit 0
			else
				echo -e "${RED}> Something wrong with boot parametres (error code received)${WHITE}"
			fi
		else
			[ -t 1 ] && echo -e "${RED}> Error while receiving boot parametres (exitcode $exitcode)${WHITE}" ||
				echo $(date --rfc-3339=seconds)" Error while receiving boot parametres"
		fi

		sleep 2
		. $RIG_CFG
		((try++))
	done
else
	firststats
fi
