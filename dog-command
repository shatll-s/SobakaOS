#!/bin/bash
[ -t 1 ] && . colors #source colors only if running in terminal
AMD_CFG="/dog/cfg/amd.cfg"
NVIDIA_CFG="/dog/cfg/nvidia.cfg"
RIG_CFG="/dog/cfg/rig.cfg"
WALLET_CFG="/dog/cfg/wallet.cfg"
BATCH_CFG="/dog/cfg/batch.cfg"
LOCK_DIR="/tmp/dog-command"


########################################################
#exec comand and return								   #
########################################################

if (( $# < 1 )); then
	echo "Usage: $0 \"command\" [\"argument\"]"
	exit 1
fi

[[ ! -d $LOCK_DIR ]] && mkdir -p $LOCK_DIR
PID=$$
PID_file="$LOCK_DIR/$PID"
touch $PID_file

echo $(date --rfc-3339=seconds)" Start doing \"$1\"" # \"$2\""

case $1 in
	exec)
		return=$(timeout 300 bash -c "$2" 0> /dev/null)
		exitcode=$?
		if [[ $exitcode -eq 0 ]]; then
			msg "$1 : $2" success "$return"
		else
			msg "$1 : $2" warning $return
		fi
	;;
	get_bios)
		#[[ $2 < 10 ]] && bus="0"$2
		#bus=`echo $2 10 | awk '{ print ($1 >= $2) ? $1 : 0$1 }'` #now it`s mistake
		bus=${2^^}
		adapter=$(sudo atiflash -i | grep $bus | awk '{print $1}' | sed -e 's/$//; s/\n//')
		#echo -e "argument=$2\nbus=$bus\nadapter=$adapter"
		return=$(sudo atiflash -s $adapter "/tmp/amd${adapter}.rom")
		exitcode=$?
		if [[ $exitcode -eq 0 ]]; then
			. $RIG_CFG
			chown user:user "/tmp/amd$adapter.rom"
			#gzip -9 -c "/tmp/amd$adapter.rom" 
			#base64 -w 0 "/tmp/amd${adapter}.rom" | gzip -9 -c | msg "Bios-rig"${RIG_ID}"-GPU${adapter}.rom" file payload #it works
			gzip -9 -c "/tmp/amd${adapter}.rom" | base64 -w 0 | msg "Bios-rig"${RIG_ID}"-GPU"${adapter}".rom" file payload
		else
			msg "BIOS save error" warning "Error occured while saving bios for adapter ${adapter} (bus id $2)\n$return"
		fi
	;;
	flash_bios)
		. $RIG_CFG		
		cd /tmp
		link=$(echo $HOST | sed 's/\/[a-z]*.php//')$2 #https://os.dog/files/1/upload/0000001_bios_amd_bus02.rom.gz
		wget -q $link 
		exitcode=$?
		if [[ ! $exitcode -eq 0 ]]; then
			msg "Flash BIOS" error "Error occured during download BIOS ($exitcode)\n$return"
			rm $PID_file
			exit 1
		fi
		file_gz=$(echo $2 | sed 's/.*\/\([_.a-z0-9]*\)$/\1/') #0000003_bios_amd_bus02.rom.gz
		#echo "Filename: "$file
		gzip -df $file_gz 
		exitcode=$?
		if [[ ! $exitcode -eq 0 ]]; then
			msg "Flash BIOS" error "Error occured during unzipping BIOS ($exitcode)\n$return"
			rm $PID_file
			exit 1
		fi
		file=$(echo $file_gz | sed 's/.gz//') #0000004_bios_amd_bus02.rom
		bus=$(echo $file | sed 's/.*bus\([0-9a-z]*\).rom/\1/') #02
		bus=${bus^^}
		#bus=`echo $shortbus 10 | awk '{ print ($1 >= $2) ? $1 : 0$1 }'` 
		adapter=$(atiflash -i | grep $bus | awk '{print $1}' | sed -e 's/$//; s/\n//') && echo $adapter
		return=$(atiflash -p $adapter -f "/tmp/$file")
		exitcode=$?
		if [[ $exitcode -eq 0 ]]; then
			msg "Flash BIOS" success "$return"
		else
			msg "Flash BIOS" error "Something goes wrong ($exitcode)\n$return"
		fi
	;;
	change_host)
		#sed -i "s/.*MINER=.*/MINER=$2/g" $RIG_CFG
		if [[ $2 ]]; then
			[[ ! -z $(grep "HOST=" $RIG_CFG) ]]&& sed -i "s/.*HOST=.*/HOST=$2/g" $RIG_CFG || echo "HOST=$2" >> $RIG_CFG
			msg "Host change" ok \
			"$(date --rfc-3339=seconds)\nHost succesfully changed to <b>$2</b>."
		else
			msg "Host change" warning \
			"$(date --rfc-3339=seconds)\nHost is not changed (connection will be lose if you will set empty host)."
		fi
	;;
	change_amd_oc)
		echo "$2" > $AMD_CFG
		[[ $3 == "--hello" ]] && rm $PID_file && exit 0 #don`t send msg	
		return=$(amd-oc)
		exitcode=$?
		if [[ $exitcode -eq 0 ]]; then
			msg "AMD OC" success "$return"
		else
			msg "AMD OC" warning "Something goes wrong ($exitcode).\n$return"
		fi
	;;
	change_nvidia_oc)
		echo "$2" > $NVIDIA_CFG
		[[ $3 == "--hello" ]] && rm $PID_file && exit 0 #don`t send msg				
		return=$(nvidia-oc)
		exitcode=$?
		if [[ $exitcode -eq 0 ]]; then
			msg "NVIDIA OC" success "$return"
		else
			msg "NVIDIA OC" warning "Something goes wrong ($exitcode).\n$return"
		fi
	;;
	upgrade)
		return=`upgrade`
		exitcode=$?
		if [[ $exitcode -eq 0 ]]; then
			msg "Upgrade" success "<b>Upgraded successfully</b>\n$return"
			while [[ $try -lt 20 ]]; do
				if [ `ls -a $LOCK_DIR | wc -l` -eq 3 ]; then
					rm $PID_file
					systemctl restart agent
				fi
				sleep 1
				((try++))
			done
			msg "Upgrade" warning "Upgrade was successfull, but I can not restart OSdog services, because some commands are still running.<br>Sometimes we need to reboot or restart OSdog services (if you need it, try to reboot or send <b>systemctl restart agent</b> command to rig."
		else
			msg "Upgrade" warning "<b>Something goes wrong</b>\n$return"
		fi
	;;
	reboot)
		msg "Rebooting" ok "$(date --rfc-3339=seconds)\nRebooting."
		nohup bash -c 'sreboot' > /tmp/nohup.log 2>&1
	;;
	batch*)
		i=$(echo $1 | sed 's/batch//')
		#if [[ $(echo $2 | jq -R '.') != '""' && $(echo $2 | jq '.') != 'null' ]]; then
		if [[ $(echo $2 | jq '.') != 'null' ]]; then
			[[ $2 != "--reconfigure" ]] && echo $2 | jq '.' > /tmp/$1 #I forgot, what is --reconfigure???
			[[ $3 != "--hello" ]] && screen-kill miner$i #don`t kill miner if there is --hello argument
			json2batch /tmp/$1

			if [[ $3 != "--hello" && $3 != "--quiet" ]]; then #don`t send msg if there is --hello argument
				if [[ $(echo $2 | jq -R '.') != '""' ]]; then #if this is not STOP command
					msg "Batch $i change" ok "$(date --rfc-3339=seconds)\n Batch files changed, miners restarted." 
				else #it`s STOP command
					msg "Miner $i stop" ok "$(date --rfc-3339=seconds)\n Miner stopped" 
				fi
			fi
		else
			[[ $3 != "--hello" ]] && msg "Batch $i change" warning "$(date --rfc-3339=seconds)\n Error occured while wallet change."
		fi
	;;
	miner_log)
		screen -S $2 -X hardcopy /tmp/hardcopy
		if [[ $? -eq 0 ]]; then
			return=$(cat /tmp/hardcopy | sed 's/"//g')
			msg "Log: $2" success "$return"
		else
			return="$(screen -ls)"
			msg "Log: $2" error "$return"
		fi
	;;
	restart_miner)
		miner=$(screen -ls | grep $2 | sed "s/.*$2.\([a-z]*\).*/\1/")
		screen-kill $2
		miner_now=$(screen -ls | grep $2 | sed "s/.*$2.\([a-z]*\).*/\1/")
		if [[ $miner ]]; then
			if [[ ! $miner_now ]]; then
				msg "Restart $2" success \
				"$(date --rfc-3339=seconds)\n$2 (<b>$miner</b>) succesfully restarted."
			else
				msg "Restart $2" error\
				"$(date --rfc-3339=seconds)\n$2 (<b>$miner</b>) cannot be closed. Propably reboot will help."
			fi
		else
			. $RIG_CFG
			if [[ $2 -eq "miner1" ]]; then
				miner=$MINER
			elseif [[ $2 -eq "miner2" ]]
				miner=$MINER2
			fi
			msg "Restart $2" warning \
			"$(date --rfc-3339=seconds)\n$2 (<b>$miner</b>) is not working.\nMay be this miner isn\`t suitable for your GPU."
		fi
	;;
	change_name)
		if [[ ! -z $2 && $2 != 'null' ]]; then
			oldname=$(cat /etc/hostname)
			if [[ $name != $oldname ]]; then
				sed -i "s/$oldname/$2/" /etc/hosts
				echo $2 > /etc/hostname
				#systemctl restart networking #disable for 18.04
				hostnamectl set-hostname $2 #for 18.04
			fi
			if [[ $3 != '--hello' ]]; then
				dog-command batch1 --reconfigure --quiet
				dog-command batch2 --reconfigure --quiet
			fi
			[[ $3 != '--hello' && $3 != '--quiet' ]] && msg "Name change" ok "$(date --rfc-3339=seconds)\n Name successfully changed to $2, may be you need reboot to get effect."
		else
			msg "Name change" warning "$(date --rfc-3339=seconds)\nError occured while changing name"
		fi
	;;
	change_password) #doesn`t work now
		sed -i "s/.*PASSWD=.*/PASSWD=$2/g" $RIG_CFG
		local return="Password succesfully changed" 
		echo $(date --rfc-3339=seconds)" "$return
	;;
	openvpn_config)
		. $RIG_CFG
		#echo $2
		url=$(echo $2 | jq ".url" | sed 's/"//g')
		#echo $url
		if [[ "$url" != "0" ]]; then
			#echo "It seems like url link"
			cd /tmp
			link=$(echo $HOST | sed 's/\/[a-z]*.php//')$url
			wget -q $link
			exitcode=$?
			if [[ ! $exitcode -eq 0 ]]; then
				msg "OpenVPN config" error "Error occured while download config ($exitcode)\n$return"
				rm $PID_file
				exit 1
			fi
			file_gz=$(echo $url | sed 's/.*\/\([_.a-z0-9]*\)$/\1/')
			gzip -df $file_gz
			exitcode=$?
			if [[ ! $exitcode -eq 0 ]]; then
				msg "OpenVPN config" error "Error occured while unzipping config ($exitcode)\n$return"
				rm $PID_file
				exit 1
			fi
			file=$(echo $file_gz | sed 's/.gz//')
			mv /tmp/$file /dog/cfg/openvpn.conf
		fi
		#echo "next step"
	
		[[ -f /etc/openvpn/client.conf ]] && rm /etc/openvpn/client.conf		
		systemctl restart openvpn@client
		
		use=$(echo $2 | jq ".openvpn_use")
		#echo $use
		if [[ ! -z $use && $use -eq 1 ]]; then
			echo "Trying to activate openvpn"
			cp /dog/cfg/openvpn.conf /etc/openvpn/client.conf
			systemctl restart openvpn@client
			sleep 15
		fi

		hello
		exitcode=$?
		return="$(date --rfc-3339=seconds)\n"$(ifconfig)
		if [[ $exitcode -eq 0 ]]; then
			msg "OpenVPN config" success "$return"
		else
			msg "OpenVPN config" error "Something goes wrong ($exitcode)\n$return"
		fi
	;;
	telec*)
		argument=`echo $1 | sed 's/telec //'`

		raw_return=`$1 | sed "s,$(printf '\033')\\[[0-9;]*[a-zA-Z],,g"` #remove color
		return=`echo $raw_return | sed '/^\s*$/d'`
		exitcode=$?

		[[ $exitcode -eq 0 ]] && type='info' || type='warning'
	
		data="$(date --rfc-3339=seconds)\n"
		if [[ $argument == "start" || $argument == "restart" ]]; then
			link=`echo "$raw_return" | grep "WebUI for this session" | sed 's/.*\(https.*\)$/\1/'`
			#[[ $link ]] && title="Teleconsole <a href=$link>$argument</a>" || title="Teleconsole $argument"
			#data="$(date --rfc-3339=seconds)\nLink <a href='$link'>connect to console</a>$return"
			[[ $link ]] && data=$data"<a href='$link' target='_blank'>Connect to console</a>\n"
		#else
		#	#title="Teleconsole $argument"
		#	data="$(date --rfc-3339=seconds)\n$return"
		fi
		data=$data"$return\nExitcode: $exitcode"
		msg "Teleconsole $argument" $type "$data"
	;;
	af)
		case $2 in
			log)
				screen -S af -X hardcopy /tmp/af_hardcopy
				if [[ $? -eq 0 ]]; then
					return=$(cat -v /tmp/af_hardcopy | sed -e 's/M-0/\&deg/g; s/M-^X/\&#x2798/g; s/M-^W/\&#x279a/g;')
					msg "Autofan log" info "$return"
				else
					return="$(screen -ls)"
					msg "Autofan log" error "$return"
				fi
				rm /tmp/af_hardcopy
			;;
			*)
			af="$2"
			echo "$af" > /dog/cfg/af.cfg
			if [[ `echo $af | jq '.af_enabled'` -eq 1 ]]; then
				af restart
				text="Autofan (re)started"
			else
				af stop
				text="Autofan stopped"
			fi
			[[ $3 != '--hello' ]] && msg "$text" info "$(date --rfc-3339=seconds) $text"
			;;
		esac
	;;
	autoswitch)
		command=`echo $2 | jq -r '.command'`
		data=`echo $2 | jq '.|del(.command)'`
		case $command in
			log)
				screen -S asw -X hardcopy /tmp/asw_hardcopy
				sleep 0.5
				if [[ $? -eq 0 ]]; then
					return=$(cat -v /tmp/asw_hardcopy | sed -e 's/M-0/\&deg/g; s/M-^X/\&#x2798/g; s/M-^W/\&#x279a/g;')
					msg "AutoSwitch log" info "$return"
				else
					return="$(screen -ls)"
					msg "AutoSwitch log" error "$return"
				fi
				rm /tmp/asw_hardcopy
			;;
			check)
				echo "$data" > /dog/cfg/autoswitch.cfg
				return="$(asw check)"
				msg "Profit check" info "$return"
			;;
			*)
				echo "$data" > /dog/cfg/autoswitch.cfg
				[[ $3 != '--hello' ]] && msg "AutoSwitch config" info "$(date --rfc-3339=seconds) AutoSwitch config saved\n$2"
			;;
		esac
	;;
	benchmark)
		case "$2" in
			stop|log)
				return=$(benchmark $2)
				msg "Benchmark $2" primary "$(date --rfc-3339=seconds)\n$return"
			;;
			*)
				echo "$2" > /tmp/benchmark
				screen -dmS benchmark bash -c "benchmark start"
			;;
		esac
	;;
	remotessh)
		command=`echo $2 | jq -r '.command'`
		data=`echo $2 | jq '.|del(.command)'`
		#echo "$2" > /tmp/remotessh
		case $command in
			setup)
				remotessh setup --config "$2"
				[[ `echo $2 | jq -r '.use'` -eq 1 ]] && remotessh restart || remotessh stop
				if [[ $? -eq 0 ]]; then
					msg "RemoteSSH setup" success "$(date --rfc-3339=seconds) RemoteSSH success"
				else
					msg "RemoteSSH setup" error "$(date --rfc-3339=seconds) Error occured while RemoteSSH setup"
				fi
			;;
			hello)
				remotessh setup --config "$2"
			;;
		#case "$2" in
		#	stop|log)
		#		return=$(benchmark $2)
		#		msg "Benchmark $2" primary "$(date --rfc-3339=seconds)\n$return"
		#	;;
		#	*)
		#		echo "$2" > /tmp/benchmark
		#		screen -dmS benchmark bash -c "benchmark start"
		#	;;
		esac
	;;
	settings)
		[[ `echo $2 | jq ".notify_on_boot"` != null ]]	&& NOTIFY=`echo $2 | jq ".notify_on_boot"` || NOTIFY=0
		[[ `echo $2 | jq ".use_graphic"` != null ]]	&& USE_GRAPHIC=`echo $2 | jq ".use_graphic"` || USE_GRAPHIC=1
		
		[[ ! -z $(grep "NOTIFY_ON_BOOT=" $RIG_CFG) ]]&& sed -i "s/.*NOTIFY_ON_BOOT=.*/NOTIFY_ON_BOOT=$NOTIFY/g" $RIG_CFG || echo "NOTIFY_ON_BOOT=$NOTIFY" >> $RIG_CFG
		[[ ! -z $(grep "USE_GRAPHIC=" $RIG_CFG) ]]&& sed -i "s/.*USE_GRAPHIC=.*/USE_GRAPHIC=$USE_GRAPHIC/g" $RIG_CFG || echo "USE_GRAPHIC=$USE_GRAPHIC" >> $RIG_CFG
		
		[[ $3 != '--hello' ]] && msg "Rig settings" ok \
			"$(date --rfc-3339=seconds)\nRig settings applied:\n$2"
	;;
	*)
		#echo "I don\`t know this command($1)"
		msg "Unknown command ($1)" warning
	;;
esac
echo $(date --rfc-3339=seconds)" End doing \"$1\"" #\"$2\""
rm $PID_file


