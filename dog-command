#!/bin/bash
. colors 
AMD_CFG="/dog/cfg/amd.cfg"
NVIDIA_CFG="/dog/cfg/nvidia.cfg"
RIG_CFG="/dog/cfg/rig.cfg"
WALLET_CFG="/dog/cfg/wallet.cfg"
BATCH_CFG="/dog/cfg/batch.cfg"
LOCK_DIR="/tmp/dog-command"
API_DIR="/run/dog/apiports/"
LF='
'

########################################################
#exec comand and return								   #
########################################################

#Functions
function screen_check () {
	[[ $(screen -ls | grep -c "$1")  > 0 ]]&& echo $(screen -ls | grep -c "$1") || echo "0"
}

function services_stop () {
	echo -e "`date --rfc-3339=seconds` ${GREEN}Stopping services${WHITE}"
	wd stop > /dev/null 2>&1
	#systemctl stop mining
	mv /dog/cfg/batch.cfg /tmp/batch.cfg
	if [[ $(screen_check miner1) -gt 0 ]]; then
		screen-kill miner1
	fi
	if [[ $(screen_check miner2) -gt 0 ]]; then
		screen-kill miner2
	fi	

	if [[ $(screen_check asw) -gt 0 ]]; then
		echo 1 > /tmp/asw_trigger
		screen-kill asw
	fi	
}

function services_start () {
	echo -e "`date --rfc-3339=seconds` ${GREEN}Starting services${WHITE}"
	#systemctl start mining
	mv /tmp/batch.cfg /dog/cfg/batch.cfg
	systemctl start wd
	af restart
	[[ -f /tmp/asw_trigger && `cat /tmp/asw_trigger` -eq 1 ]] && asw restart
}
#Functions end

if (( $# < 1 )); then
	echo "Usage: $0 \"command\" [\"argument\"]"
	exit 1
fi

[[ ! -d $LOCK_DIR ]] && mkdir -p $LOCK_DIR
PID=$$
PID_file="$LOCK_DIR/$PID"
touch $PID_file

echo $(date --rfc-3339=seconds)" Start doing \"$1\"" #"\"$2\""

case $1 in
	exec)
		[[ ! -z $2 && $2 == *"netdd"** ]] && timeout=1500 || timeout=300
		return=$(timeout 300 bash -c "$2 | tr -d '\0'" 0> /dev/null)
		exitcode=$?
		if [[ $exitcode -eq 0 ]]; then
			msg "$1 : $2" success "$return"
		else
			msg "$1 : $2" warning "Exitcode: $exitcode${LF}$return"
		fi
	;;
	get_bios)
		. $RIG_CFG

		function get_bios () {
			adapter=$1
			return=$(sudo atiflash -s $adapter "/tmp/amd${adapter}.rom")
			exitcode=$?
			if [[ $exitcode -eq 0 ]]; then
				chown user:user "/tmp/amd$adapter.rom"
				gzip -9 -c "/tmp/amd${adapter}.rom" | base64 -w 0 | msg "Bios-rig"${RIG_ID}"-GPU"${adapter}".rom" file payload
			else
				msg "BIOS save error" warning "`date -R`${LF}Error occured while saving bios for adapter ${adapter} (bus id $2)${LF}$return"
			fi
		}

		bus=${2^^}
		if [[ $bus != 'ALL' ]]; then
			while read string; do
				[[ `echo $string | awk '{print $3}'` == $bus ]] && adapter=`echo $string | awk '{print $1}'` && break
			done < <(atiflash -i)
			get_bios $adapter
		else
			for ((i=0; i < `gpu-detect AMD`; i++)); do
				get_bios $i
			done
		fi
	;;
	get_bios_nvidia)
		. $RIG_CFG

		function get_bios () {
			adapter=$1
			bios_ver=`nvidia-tool bios_ver $adapter`
			file="/tmp/${bios_ver}.rom"
			return=`nvidia-tool save_bios $adapter $file`
			exitcode=$?
			if [[ $exitcode -eq 0 ]]; then
				chown user:user $file
				gzip -9 -c "$file" | base64 -w 0 | msg "Bios-rig${RIG_ID}-GPU${adapter}_${bios_ver}.rom" file payload
			else
				msg "BIOS save error" warning "`date -R`${LF}Error occured while saving bios for adapter ${adapter} (bus id $2)${LF}$return"
			fi
		}
		bus=${2^^}
		
		nvidia-tool stop
		exitcode=$?
		[[ $exitcode -ne 0 ]] && msg "BIOS save error" warning "`date -R`${LF}Error occured while stopping services" && exit 1

		if [[ $bus != 'ALL' ]]; then
			adapter=`nvflash --list | grep "B:$bus" | sed "s/^<\([0-9]*\).*/\1/"`
			[[ ! $adapter ]] && msg "BIOS save error" warning "`date -R`${LF}Error occured (wrong $bus bus number)" && exit 1
			get_bios $adapter
		else
			for ((i=0; i < `gpu-detect NVIDIA`; i++)); do
				get_bios $i
			done
		fi

		nvidia-tool start
		exitcode=$?
		[[ $exitcode -ne 0 ]] && msg "BIOS save error" warning "`date -R`${LF}Error occured while starting services. Try to reboot.${LF}$return"
	;;
	flash_bios)
		platform=`echo $2 | jq -r ".platform" `
		ignore_mismatch=`echo $2 | jq -r ".ignore_mismatch" `
		#echo "Plat: $platform"
		[[ $platform -ne 'amd' || $platform -ne 'nvidia' ]] && msg "Flash BIOS" error "`date --rfc-3339=seconds` Something goes wrong. Contact administrator." && exit 1

		url=`echo $2 | jq -r ".url" `
		bus=`echo $2 | jq -r ".bus" `
		disable_services=`echo $2 | jq -r ".disable_services" `
		. $RIG_CFG		
		cd /tmp
		link=$(echo $HOST | sed 's/\/[a-z]*.php//')$url #https://os.dog/files/1/upload/0000001_bios_amd_bus02.rom.gz
		wget -q $link 
		exitcode=$?
		if [[ ! $exitcode -eq 0 ]]; then
			msg "Flash BIOS" error "`date -R`${LF}Error occured during download BIOS ($exitcode)${LF}$return"
			rm $PID_file
			exit 1
		fi
		file_gz=$(echo $url | sed 's/.*\/\([_.a-z0-9]*\)$/\1/') #0000003_bios_amd_bus02.rom.gz
		#echo "Filename: "$file
		gzip -df $file_gz 
		exitcode=$?
		if [[ ! $exitcode -eq 0 ]]; then
			msg "Flash BIOS" error "Error occured during unzipping BIOS ($exitcode)${LF}$return"
			rm $PID_file
			exit 1
		fi
		file=$(echo $file_gz | sed 's/.gz//') #0000004_bios_amd_bus02.rom
		
		if [[ $platform == 'amd' ]]; then		
			[[ $disable_services -eq 1 ]] && services_stop
			if [[ $bus != 'all' ]]; then
				#adapter=$(atiflash -i | grep $bus | awk '{print $1}' | sed -e 's/$//; s/\n//')
				while read string; do
						[[ `echo $string | awk '{print $3}'` == ${bus^^} || `echo $string | awk '{print $3}'` == $bus ]] && adapter=`echo $string | awk '{print $1}'` && break
				done < <(atiflash -i)

				result=$(atiflash -p $adapter -f "/tmp/$file")
				exitcode=$?
			else
				logfile='/tmp/amd_flash.log'
				rm -f $logfile
				for ((i=0; i < `gpu-detect AMD`; i++)); do
					echo -e "$BROWN================================================================$WHITE" >> $logfile
					echo -e "${LIGHTRED}GPU $i${WHITE}" >> $logfile
					atiflash -p $i -f "/tmp/$file" >> $logfile
					exitcode=$?
					[[ $exitcode -ne 0 ]] && echo -e "${RED}Error (exitcode $exitcode) while flasing GPU $i${WHITE}" >> $logfile
				done
				result=`cat $logfile`
			fi
			[[ $disable_services -eq 1 ]] && services_start
		elif [[ $platform == 'nvidia' ]]; then
			[[ $ignore_mismatch -eq 1 ]] && add="-6 -override"
			nvidia-tool stop
			exitcode=$?
			[[ $exitcode -ne 0 ]] && msg "BIOS flash error" warning "`date -R`${LF}Error occured while stopping services" && exit 1

			if [[ $bus != 'all' ]]; then
				adapter=`nvflash --list | grep "B:${bus^^}" | sed "s/^<\([0-9]*\).*/\1/"`
				[[ ! $adapter ]] && msg "BIOS flash error" warning "`date -R`${LF}Error occured (wrong $bus bus number)" && exit 1
				result=$(nvidia-tool flash $adapter $file "$add")
				exitcode=$?
			else
				logfile='/tmp/nvidia_flash.log'
				rm -f $logfile
				for ((i=0; i < `gpu-detect NVIDIA`; i++)); do
					echo -e "$BROWN================================================================$WHITE" >> $logfile
					echo -e "${GREEN}GPU $i${WHITE}" >> $logfile
					nvidia-tool flash $i $file "$add" >> $logfile
					exitcode=$?
					[[ $exitcode -ne 0 ]] && echo -e "${RED}Error (exitcode $exitcode) while flasing GPU $i${WHITE}" >> $logfile
				done
				result=`cat $logfile`
			fi

			nvidia-tool start
			exitcode=$?
			[[ $exitcode -ne 0 ]] && msg "BIOS save error" warning "`date -R`${LF}Error occured while starting services. Try to reboot.${LF}$return"
		fi

		if [[ $exitcode -eq 0 ]]; then
			msg "Flash BIOS" success "`date --rfc-3339=seconds` Successfull BIOS flashing${LF}$result"
		else
			msg "Flash BIOS" error "`date --rfc-3339=seconds` Something goes wrong ($exitcode)${LF}$result"
		fi
	;;
	change_host)
		#sed -i "s/.*MINER=.*/MINER=$2/g" $RIG_CFG
		if [[ $2 ]]; then
			[[ ! -z $(grep "HOST=" $RIG_CFG) ]]&& sed -i "s/.*HOST=.*/HOST=$2/g" $RIG_CFG || echo "HOST=$2" >> $RIG_CFG
			msg "Host change" ok \
			"$(date --rfc-3339=seconds)${LF}Host succesfully changed to <b>$2</b>."
		else
			msg "Host change" warning \
			"$(date --rfc-3339=seconds)${LF}Host is not changed (connection will be lose if you will set empty host)."
		fi
	;;
	change_amd_oc)
		echo "$2" > $AMD_CFG
		[[ $3 == "--hello" ]] && rm $PID_file && exit 0 #don`t send msg	
		return=$(amd-oc)
		exitcode=$?
		if [[ $exitcode -eq 0 ]]; then
			msg "AMD OC" success "$return"
		else
			msg "AMD OC" warning "Something goes wrong ($exitcode).\n$return"
		fi
	;;
	change_nvidia_oc)
		echo "$2" > $NVIDIA_CFG
		[[ $3 == "--hello" ]] && rm $PID_file && exit 0 #don`t send msg				
		return=$(nvidia-oc)
		exitcode=$?
		if [[ $exitcode -eq 0 ]]; then
			msg "NVIDIA OC" success "$return"
		else
			msg "NVIDIA OC" warning "Something goes wrong ($exitcode).${LF}$return"
		fi
	;;
	upgrade)
		return=`upgrade`
		exitcode=$?
		if [[ $exitcode -eq 0 ]]; then
			msg "Upgrade" success "<b>Upgraded successfully</b>${LF}$return"
			while [[ $try -lt 20 ]]; do
				if [ `ls -a $LOCK_DIR | wc -l` -eq 3 ]; then
					rm $PID_file
					systemctl restart agent
				fi
				sleep 1
				((try++))
			done
			msg "Upgrade" warning "Upgrade was successfull, but I can not restart OSdog services, because some commands are still running.<br>Sometimes we need to reboot or restart OSdog services (if you need it, try to reboot or send <b>systemctl restart agent</b> command to rig."
		else
			msg "Upgrade" warning "<b>Something goes wrong</b>${LF}$return"
		fi
	;;
	reboot)
		msg "Rebooting" ok "$(date --rfc-3339=seconds)${LF}Rebooting."
		nohup bash -c "sreboot $2" > /tmp/nohup.log 2>&1
	;;
	batch*)
		i=$(echo $1 | sed 's/batch//')
		if [[ $(echo $2 | jq '.') != 'null' ]]; then
			[[ $2 != "--reconfigure" ]] && echo "$2" | jq '.' > /tmp/$1 #I forgot, what is --reconfigure???
			
			if [[ $3 != "--hello" ]]; then  #don`t kill miner and ports if there is --hello argument
				. $BATCH_CFG
				eval "old_port=\$port${i}"
				eval "old_aswports=(\$aswports${i})"
			fi

			json2batch /tmp/$1

			if [[ $3 != "--hello" ]]; then  #don`t kill miner and ports if there is --hello argument
				screen-kill miner$i
				if [[ ! -z $old_aswports ]]; then
					for ((y=0; y < ${#old_aswports[@]}; y++)); do
						old_port=${old_aswports[$y]}
						release-port $old_port &
					done
				elif [[ ! -z $old_port ]]; then
					release-port $old_port &
				fi
			fi

			if [[ $3 != "--hello" && $3 != "--quiet" ]]; then #don`t send msg if there is --hello argument
				if [[ $(echo $2 | jq -R '.') != '""' ]]; then #if this is not STOP command
					wd restart #restart watchdog if batch is changed
					msg "Batch $i change" ok "$(date --rfc-3339=seconds)${LF}Batch files changed, miners restarted." 
				else #it`s STOP command
					msg "Miner $i stop" ok "$(date --rfc-3339=seconds)${LF}Miner stopped" 
				fi
			fi
		else
			[[ $3 != "--hello" ]] && msg "Batch $i change" warning "$(date --rfc-3339=seconds)${LF}Error occured while wallet change."
		fi
	;;
	miner_log)
		logfile="/dog/log/$2.log"
		return=`tail -n 100 $logfile`

		if [[ ! -z $return ]]; then
			msg "Log: $2" success "$return"
		else
			msg "Log: $2" error "No log file found. May be miner is not running?"
		fi
	;;
	restart_miner)
		miner=$(screen -ls | grep $2 | sed "s/.*$2.\([a-z]*\).*/\1/")
		screen-kill $2
		miner_now=$(screen -ls | grep $2 | sed "s/.*$2.\([a-z]*\).*/\1/")
		if [[ $miner ]]; then
			if [[ ! $miner_now ]]; then
				msg "Restart $2" success \
				"$(date --rfc-3339=seconds)${LF}$2 (<b>$miner</b>) succesfully restarted."
			else
				msg "Restart $2" error\
				"$(date --rfc-3339=seconds)${LF}$2 (<b>$miner</b>) cannot be closed. Propably reboot will help."
			fi
		else
			. $RIG_CFG
			if [[ $2 -eq "miner1" ]]; then
				miner=$MINER
			elseif [[ $2 -eq "miner2" ]]
				miner=$MINER2
			fi
			msg "Restart $2" warning \
			"$(date --rfc-3339=seconds)${LF}$2 (<b>$miner</b>) is not working.\nMay be this miner isn\`t suitable for your GPU."
		fi
	;;
	change_name)
		if [[ ! -z $2 && $2 != 'null' ]]; then
			oldname=$(cat /etc/hostname)
			if [[ $name != $oldname ]]; then
				sed -i "s/$oldname/$2/" /etc/hosts
				echo $2 > /etc/hostname
				#systemctl restart networking #disable for 18.04
				hostnamectl set-hostname $2 #for 18.04
			fi
			if [[ $3 != '--hello' ]]; then
				dog-command batch1 --reconfigure --quiet
				dog-command batch2 --reconfigure --quiet
			fi
			[[ $3 != '--hello' && $3 != '--quiet' ]] && msg "Name change" ok "$(date --rfc-3339=seconds)${LF}Name successfully changed to $2, may be you need reboot to get effect."
		else
			msg "Name change" warning "$(date --rfc-3339=seconds)${LF}Error occured while changing name"
		fi
	;;
	change_password) #doesn`t work now
		sed -i "s/.*PASSWD=.*/PASSWD=$2/g" $RIG_CFG
		local return="Password succesfully changed" 
		echo $(date --rfc-3339=seconds)" "$return
	;;
	openvpn_config)
		. $RIG_CFG
		#echo $2
		url=$(echo $2 | jq ".url" | sed 's/"//g')
		#echo $url
		if [[ "$url" != "0" ]]; then
			#echo "It seems like url link"
			cd /tmp
			link=$(echo $HOST | sed 's/\/[a-z]*.php//')$url
			wget -q $link
			exitcode=$?
			if [[ ! $exitcode -eq 0 ]]; then
				msg "OpenVPN config" error "Error occured while download config ($exitcode)${LF}$return"
				rm $PID_file
				exit 1
			fi
			file_gz=$(echo $url | sed 's/.*\/\([_.a-z0-9]*\)$/\1/')
			gzip -df $file_gz
			exitcode=$?
			if [[ ! $exitcode -eq 0 ]]; then
				msg "OpenVPN config" error "Error occured while unzipping config ($exitcode)${LF}$return"
				rm $PID_file
				exit 1
			fi
			file=$(echo $file_gz | sed 's/.gz//')
			mv /tmp/$file /dog/cfg/openvpn.conf
		fi
		#echo "next step"
	
		[[ -f /etc/openvpn/client.conf ]] && rm /etc/openvpn/client.conf		
		systemctl restart openvpn@client
		
		use=$(echo $2 | jq ".openvpn_use")
		#echo $use
		if [[ ! -z $use && $use -eq 1 ]]; then
			echo "Trying to activate openvpn"
			cp /dog/cfg/openvpn.conf /etc/openvpn/client.conf
			systemctl restart openvpn@client
			sleep 15
		fi

		hello
		exitcode=$?
		return="$(date --rfc-3339=seconds)\n"$(ifconfig)
		if [[ $exitcode -eq 0 ]]; then
			msg "OpenVPN config" success "$return"
		else
			msg "OpenVPN config" error "Something goes wrong ($exitcode)${LF}$return"
		fi
	;;
	telec*)
		#argument=`echo $1 | sed 's/telec //'`
		
		#raw_return=`$1 | sed "s,$(printf '\033')\\[[0-9;]*[a-zA-Z],,g"` #remove color
		#return=`echo $raw_return | sed '/^\s*$/d'`
		return=`telec $2 | sed '/^\s*$/d'`
		exitcode=$?

		[[ $exitcode -eq 0 ]] && type='info' || type='warning'
	
		data="$(date --rfc-3339=seconds)\n"
		if [[ $argument == "start" || $argument == "restart" ]]; then
			link=`echo "$raw_return" | grep "WebUI for this session" | sed 's/.*\(https.*\)$/\1/'`
			#[[ $link ]] && title="Teleconsole <a href=$link>$argument</a>" || title="Teleconsole $argument"
			#data="$(date --rfc-3339=seconds)\nLink <a href='$link'>connect to console</a>$return"
			[[ $link ]] && data=$data"<a href='$link' target='_blank'>Connect to console</a>"
		#else
		#	#title="Teleconsole $argument"
		#	data="$(date --rfc-3339=seconds)\n$return"
		fi
		data=$data"$return${LF}Exitcode: $exitcode"
		msg "Teleconsole $2" $type "$data"
	;;
	af)
		case $2 in
			log)
				screen -S af -X hardcopy /tmp/af_hardcopy
				if [[ $? -eq 0 ]]; then
					return=$(cat -v /tmp/af_hardcopy | sed -e 's/M-0/\&deg/g; s/M-^X/\&#x2798/g; s/M-^W/\&#x279a/g;')
					msg "Autofan log" info "$return"
				else
					return="$(screen -ls)"
					msg "Autofan log" error "$return"
				fi
				echo "@$return@"
				rm /tmp/af_hardcopy
			;;
			*)
			af="$2"
			echo "$af" > /dog/cfg/af.cfg
			if [[ `echo $af | jq -r '.af_enabled'` -eq 1 ]]; then
				#af restart
				text="Autofan (re)started"
			else
				#af stop
				text="Autofan stopped"
			fi
			[[ $3 != '--hello' ]] && msg "$text" info "$(date --rfc-3339=seconds) $text"
			;;
		esac
	;;
	autoswitch)
		if [[ $2 == 'log' ]]; then
			screen -S asw -X hardcopy /tmp/asw_hardcopy
			sleep 0.5
			if [[ $? -eq 0 ]]; then
				return=$(cat -v /tmp/asw_hardcopy | sed -e 's/M-0/\&deg/g; s/M-^X/\&#x2798/g; s/M-^W/\&#x279a/g;')
				msg "AutoSwitch log" info "$return"
			else
				return="$(screen -ls)"
				msg "AutoSwitch log" error "$return"
			fi
			rm /tmp/asw_hardcopy
		else
			command=`echo $2 | jq -r '.command'`
			data=`echo $2 | jq '.|del(.command)'`
			case $command in
				check)
					echo "$data" > /dog/cfg/autoswitch.cfg
					return="$(asw check)"
					msg "Profit check" info "$return"
				;;
				*)
					echo "$data" > /dog/cfg/autoswitch.cfg
					[[ $3 != '--hello' ]] && msg "AutoSwitch config" info "$(date --rfc-3339=seconds) AutoSwitch config saved${LF}$2"
				;;
			esac
		fi
	;;
	benchmark)
		case "$2" in
			stop|log)
				return=$(benchmark $2)
				msg "Benchmark $2" primary "$(date --rfc-3339=seconds)${LF}$return"
			;;
			*)
				echo "$2" > /tmp/benchmark
				screen -dmS benchmark bash -c "benchmark start"
			;;
		esac
	;;
	remotessh)
		command=`echo $2 | jq -r '.command'`
		data=`echo $2 | jq '.|del(.command)'`
		#echo "$2" > /tmp/remotessh
		case $command in
			setup)
				remotessh setup --config "$2"
				[[ `echo $2 | jq -r '.use'` -eq 1 ]] && remotessh restart || remotessh stop
				if [[ $? -eq 0 ]]; then
					msg "RemoteSSH setup" success "$(date --rfc-3339=seconds) RemoteSSH success"
				else
					msg "RemoteSSH setup" error "$(date --rfc-3339=seconds) Error occured while RemoteSSH setup"
				fi
			;;
			hello)
				remotessh setup --config "$2"
			;;
		#case "$2" in
		#	stop|log)
		#		return=$(benchmark $2)
		#		msg "Benchmark $2" primary "$(date --rfc-3339=seconds)\n$return"
		#	;;
		#	*)
		#		echo "$2" > /tmp/benchmark
		#		screen -dmS benchmark bash -c "benchmark start"
		#	;;
		esac
	;;
	settings)
		echo $2 > /tmp/settings #just for development
		for option in service_mode use_graphic notify_on_boot wd_kern; do
		if [[ `echo $2 | jq ".$option"` != null ]]; then
			option_value="`echo $2 | jq -r \".$option\"`" #double slash, because eval open it
			eval "${option^^}=$option_value"

			if [[ ! -z `grep "${option^^}=" $RIG_CFG` ]]; then
				sed -i "s/.*${option^^}=.*/${option^^}=$option_value/g" $RIG_CFG
			else
				echo "${option^^}=$option_value" >> $RIG_CFG
			fi
		fi
		done
		########################      RigOnline.ru SECTION      ########################
		echo $2 | jq ".rigonlineru" > /dog/cfg/rigonlineru.cfg
		if [[ `echo $2 | jq ".rigonlineru"` != null ]]; then
			RIGONLINE_CFG="/dog/cfg/rigonlineru.cfg"
			[[ `echo $2 | jq -r ".rigonlineru.enabled"` == 1 ]] && THIRDPARTY_RIGONLINE=1 || THIRDPARTY_RIGONLINE=0

			[[ `screen-check 3dparty_rigonline` -ne 0 ]] && screen-kill 3dparty_rigonline

			[[ ! -z `grep "THIRDPARTY_RIGONLINE=" $RIG_CFG` ]]&& sed -i "s/.*THIRDPARTY_RIGONLINE=.*/THIRDPARTY_RIGONLINE=$THIRDPARTY_RIGONLINE/g" $RIG_CFG || echo "THIRDPARTY_RIGONLINE=$THIRDPARTY_RIGONLINE" >> $RIG_CFG
		fi
		######################      RigOnline.ru SECTION END      ######################

		if [[ $WD_KERN -eq 1 && `systemctl is-active wd-kern` == 'inactive' ]]; then
			systemctl restart wd-kern
		elif [[ $WD_KERN -eq 0 && `systemctl is-active wd-kern` == 'active' ]]; then
			systemctl stop wd-kern
		fi

		########################      Hashrate WD SECTION      ########################
		if [[ `echo $2 | jq '.wd'` != '""' && `echo $2 | jq '.wd'` != 'null' ]]; then
			[[ `cat $RIG_CFG | grep -c "Hashrate WD SECTION"` -gt 0 ]] && sed -i "/.*Hashrate WD SECTION.*/d" $RIG_CFG
			echo -e "`fix-string '      Hashrate WD SECTION      ' 80 '#' 'symmetrically'`" >> $RIG_CFG

			WD_RESTART=3	#default
			WD_REBOOT=5		#default
			for option in wd_enabled wd_wakealarm wd_restart wd_reboot wd_nonet_noreboot wd_nonet_reboot_time wd_hr; do
				[[ `cat $RIG_CFG | grep -c "${option^^}="` -gt 0 ]] && sed -i "/.*${option^^}=.*/d" $RIG_CFG
				if [[ $option != 'wd_hr' ]]; then
					if [[ `echo $2 | jq ".wd.$option"` != null ]]; then				
						option_value="`echo $2 | jq -r \".wd.$option\"`"
						echo "${option^^}=\"$option_value\"" >> $RIG_CFG 
					fi
				else
					echo "WD_HR='"`echo $2 | jq '.wd.wd_hr'`"'" >> $RIG_CFG
				fi
			done
			echo -e "`fix-string '      Hashrate WD SECTION END      ' 80 '#' 'symmetrically'`" >> $RIG_CFG
		fi
		######################      Hashrate WD SECTION END      ######################

		#######################      Temperature WD SECTION      ######################
		if [[ `echo $2 | jq '.wd_temp'` != '""' && `echo $2 | jq '.wd_temp'` != 'null' ]]; then
			[[ `cat $RIG_CFG | grep -c "Temperature WD SECTION"` -gt 0 ]] && sed -i "/.*Temperature WD SECTION.*/d" $RIG_CFG
			echo -e "`fix-string '      Temperature WD SECTION      ' 80 '#' 'symmetrically'`" >> $RIG_CFG

			for option in wd_temp_enabled wd_temp_crit wd_temp_resume wd_temp_action wd_temp_notifications; do
				[[ `cat $RIG_CFG | grep -c "${option^^}="` -gt 0 ]] && sed -i "/.*${option^^}=.*/d" $RIG_CFG

				if [[ `echo $2 | jq ".wd_temp.$option"` != null ]]; then				
					option_value="`echo $2 | jq -r \".wd_temp.$option\"`"
					echo "${option^^}=\"$option_value\"" >> $RIG_CFG 
				fi
			done
			echo -e "`fix-string '      Temperature WD SECTION END      ' 80 '#' 'symmetrically'`" >> $RIG_CFG
		fi
		#####################      Temperature WD SECTION END      ####################

		#######################          LA WD SECTION         ######################
		if [[ `echo $2 | jq '.wd_la'` != '""' && `echo $2 | jq '.wd_la'` != 'null' ]]; then
			prefix="WD_LA_"
			[[ `cat $RIG_CFG | grep -c "LA WD SECTION"` -gt 0 ]] && sed -i "/.*LA WD SECTION.*/d" $RIG_CFG
			echo -e "`fix-string '      LA WD SECTION      ' 80 '#' 'symmetrically'`" >> $RIG_CFG

			sed -i "/^${prefix}.*=.*/d" $RIG_CFG
			for option in enabled max reboot; do
				#[[ `cat $RIG_CFG | grep -c "${prefix}${option^^}="` -gt 0 ]] && sed -i "/.*${prefix}${option^^}=.*/d" $RIG_CFG

				if [[ `echo $2 | jq ".wd_la.$option"` != null ]]; then				
					option_value="`echo $2 | jq -r \".wd_la.$option\"`"
					echo "${prefix}${option^^}=\"$option_value\"" >> $RIG_CFG 
				fi
			done
			echo -e "`fix-string '      LA WD SECTION END      ' 80 '#' 'symmetrically'`" >> $RIG_CFG
		fi
		#####################          LA WD SECTION END         ####################

		#######################          Load WD SECTION         ######################
		if [[ `echo $2 | jq '.wd_load'` != '""' && `echo $2 | jq '.wd_load'` != 'null' ]]; then
			prefix="WD_LOAD_"
			[[ `cat $RIG_CFG | grep -c "Load WD SECTION"` -gt 0 ]] && sed -i "/.*Load WD SECTION.*/d" $RIG_CFG
			echo -e "`fix-string '      Load WD SECTION      ' 80 '#' 'symmetrically'`" >> $RIG_CFG

			for option in enabled min restart reboot; do
				[[ `cat $RIG_CFG | grep -c "${prefix}${option^^}="` -gt 0 ]] && sed -i "/.*${prefix}${option^^}=.*/d" $RIG_CFG

				if [[ `echo $2 | jq ".wd_load.$option"` != null ]]; then				
					option_value="`echo $2 | jq -r \".wd_load.$option\"`"
					echo "${prefix}${option^^}=\"$option_value\"" >> $RIG_CFG 
				fi
			done
			echo -e "`fix-string '      Load WD SECTION END      ' 80 '#' 'symmetrically'`" >> $RIG_CFG
		fi
		#####################          Load WD SECTION END         ####################

		#######################          mb-af SECTION         ######################
		if [[ `echo $2 | jq '.mb_af'` != '""' && `echo $2 | jq '.mb_af'` != 'null' ]]; then
			cfg=`echo $2 | jq ".mb_af"`
			echo "$cfg" > /dog/cfg/mb-af.cfg

			if [[ `echo "$cfg" | jq -r '.enabled'` -eq 1 ]]; then
				[[ `systemctl is-active mb-af` == 'inactive' ]] && systemctl restart mb-af
			elif [[ `echo "$cfg" | jq -r '.enabled'` -eq 0 ]]; then
				[[ `systemctl is-active mb-af` == 'active' ]] && systemctl stop mb-af
			fi
		fi
		#####################          mb-af SECTION END         ####################		
		[[ $3 != '--hello' ]] && msg "Rig settings" ok \
			"$(date --rfc-3339=seconds)${LF}Rig settings applied:${LF}$2"
	;;
	*)
		#echo "I don\`t know this command($1)"
		msg "Unknown command ($1)" warning
	;;
esac
echo $(date --rfc-3339=seconds)" End doing \"$1\"" #\"$2\""
rm $PID_file


