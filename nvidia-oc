#!/bin/bash
. colors
NVIDIA_CFG="/dog/cfg/nvidia.cfg"
LOCK_FILE="/tmp/.nvidia-oc.lock"
[[ ! -f /run/dog/gpuStats ]] && gpu-detect listJS > /run/dog/gpuStats
#list=`cat /run/dog/gpuStats`
#listNV=`cat /run/dog/gpuStats | jq '[.gpu[] | select(.brand == "N")]'`
listNV=`cat /run/dog/gpuStats | jq '[.gpu[] | select(.brand == "N") | select(.status != "1")]'`

function getdata () {
	for option in core_clock memory_clock power_limit pill pill_args light fan; do
		if [[ `echo $1 | jq ".$option"` != null ]]; then
			option_value="`echo $1 | jq -r \".$option\"`" #double slash, because eval open it
			eval "${option^^}=\"$option_value\""
		fi
	done
}

if  [[ -e $LOCK_FILE ]]; then
	pid=`cat $LOCK_FILE`
	ps --pid $pid &>/dev/null
	[[ $? == 0 ]] && echo -e "${RED}It seems another copy of NVIDIA Overclocking script is already running\nCooldown a bit :)${WHITE}" && exit 1	
fi
echo $$ > $LOCK_FILE

#Check OSdog X server
echo -en "> Checking OSdog X server "
try=0
while [[ $try -lt 30 ]]; do
	[[ ! -z `sudo systemctl status dogx | grep "active (running)"` ]] && break
	echo -n '.'
	sleep 1
	((try++))	
done
echo ""
[[ $try -ge 30 ]] && echo -e $(date --rfc-3339=seconds)" ${RED}OSdog X server is not active!${WHITE}" && rm $LOCK_FILE && exit 1
echo -e "${GREEN}OSdog X server is active (running)${WHITE}"
#Check end

export DISPLAY=:0
NV_FANS_LIST=`nvidia-settings -q fans -V 2>/dev/null | sed -e '/^$/d; /Has the following name:.*/d; /FAN-.*/d; /Is connected/d'`

screen-kill pill
pkill -f '/dog/sbin/nvidia-pill'
pkill -f '/dog/sbin/OhGodAnETHlargementPill-r2'

echo -e $BROWN"================================================================"$WHITE
#n=$(gpu-detect NVIDIA)
n=`echo $listNV | jq '.|length'`
[[ $n == 0 ]]&&	echo $(date --rfc-3339=seconds)" 0 NVIDIA GPU detected" && exit 1
echo -e $(date --rfc-3339=seconds)" $n ${GREEN}NVIDIA${WHITE} GPU detected"

if [[ ! -z $1 && $1 != "--pill-delay" ]]; then
	echo "Overclocking config given in arguments"
	getdata "$1"
else
	[[ ! -f $NVIDIA_CFG ]]&& echo $(date --rfc-3339=seconds)" configuration file $NVIDIA_CFG does not exist!" && rm $LOCK_FILE && exit 1
	cfg=`cat $NVIDIA_CFG`
	echo $cfg | jq '.'  > /dev/null 2>&1
	exitcode="$?"
	if [[ $exitcode -eq 0 ]]; then
		echo "Overclocking config in JSON format (or empty)"
		getdata "$cfg"
	else
		echo "OverClocking config in BASH format"
		
		. $NVIDIA_CFG
	fi
fi

#Making arrays
CORE_CLOCK=($CORE_CLOCK)
MEMORY_CLOCK=($MEMORY_CLOCK)
FAN=($FAN)
POWER_LIMIT=($POWER_LIMIT)

for (( i=0; i < $n; ++i )); do
	[[ ! ${CORE_CLOCK[$i]} && ! -z ${CORE_CLOCK[0]} ]]&& CORE_CLOCK[$i]=${CORE_CLOCK[-1]}
	[[ ! ${MEMORY_CLOCK[$i]} && ! -z ${MEMORY_CLOCK[0]} ]]&& MEMORY_CLOCK[$i]=${MEMORY_CLOCK[-1]}
	[[ ! ${FAN[$i]} && ! -z ${FAN[0]} ]]&& FAN[$i]=${FAN[-1]}
	[[ ! ${POWER_LIMIT[$i]} && ! -z ${POWER_LIMIT[0]} ]]&& POWER_LIMIT[$i]=${POWER_LIMIT[-1]}
done

echo "Trying to apply next settings:"
echo -e ${CYAN}"Core Clock:${WHITE}\t${CORE_CLOCK[@]}"
echo -e ${CYAN}"Memory:${WHITE}\t\t${MEMORY_CLOCK[@]}"
echo -e ${CYAN}"Fan:${WHITE}\t\t${FAN[@]}"
echo -e ${CYAN}"Power limit:${WHITE}\t${POWER_LIMIT[@]}"
echo -en ${CYAN}"Light:${WHITE}\t\t"
[[ $LIGHT == 1 ]] && echo "off" || echo "on"
echo -en ${CYAN}"Pill:${WHITE}\t\t"
[[ $PILL == 0 ]] && echo "off" || echo "on"
echo -e ${CYAN}"Pill args:${WHITE}\t$PILL_ARGS"

#We need to do persistence-mode just once
nvidia-persistenced --persistence-mode
nvidia-smi -pm 1

echo -e $BROWN"================================================================"$WHITE
#starting overclocking

i=0
allFanCount=0
#while read string; do
for (( i=0; i < $n; i++ )); do
	name=`echo $listNV | jq -r ".[$i].name"`
	bus=`echo $listNV | jq -r ".[$i].bus"`
	[[ ! $name =~ "GTX" || $name =~ "1660" || $name =~ "RTX" ]] && fanCount=`echo "$NV_FANS_LIST" | grep -c "gpu:$i]"` #non-GTX and GTX 1660 GPUs
	[[ $fanCount -lt 1 ]] && fanCount=1
	
	echo -e "${LIGHTGREEN}GPU $i: $name${WHITE} ($bus)"
	
	if [[ $name =~ "1050" ]]; then x=2
		elif [[ $name =~ "P106-100" ]]; then x=2
		elif [[ $name =~ "P106-090" ]]; then x=1
		elif [[ $name =~ "P104-100" ]]; then x=1
		elif [[ $name =~ "P102-100" ]]; then x=1
		elif [[ $name =~ "1660 Ti" || $name =~ "1660 SUPER" ]]; then x=4
		elif [[ $name =~ "RTX" ]]; then x=4
		elif [[ $name =~ "1650" ]]; then x=2
		elif [[ $name =~ "1660" ]]; then x=2
		else x=3;
	fi

	args=
	[[ ! -z ${CORE_CLOCK[$i]} ]] && args+=" -a [gpu:$i]/GPUGraphicsClockOffset[$x]=${CORE_CLOCK[$i]}"
	[[ ! -z ${MEMORY_CLOCK[$i]} ]] && args+=" -a [gpu:$i]/GPUMemoryTransferRateOffset[$x]=${MEMORY_CLOCK[$i]}"
	if [[ ! -z ${FAN[$i]} && ${FAN[$i]} != "A" ]]; then
		args+=" -a [gpu:$i]/GPUFanControlState=1"
		for ((z=$allFanCount; z < $allFanCount + $fanCount; z++)); do
			args+=" -a [fan:$z]/GPUTargetFanSpeed=${FAN[$i]}"
		done
	else
		args+=" -a [gpu:$i]/GPUFanControlState=0"
	fi
	[[ ! -z $LIGHT ]] && args+=" -a [gpu:$i]/GPULogoBrightness=0"
	#echo $args
	[[ ! -z $args ]] &&	nvidia-settings$args | sed -e "/^\s*$/d; s/'//g"
	[[ ! -z ${POWER_LIMIT[$i]} ]] && echo -n "  " && nvidia-smi -i $i -pl ${POWER_LIMIT[$i]}
	[[ $i -lt $n ]] && echo -e $BROWN"----------------------------------------------------------------"$WHITE

	((allFanCount = $allFanCount + $fanCount))
	unset fanCount
done #< <(/dog/gpu-detect NVIDIA list)

if [[ $PILL == 1 ]]; then
	if [[ ! -z $1 && $1 == "--pill-delay" ]]; then
		sleep=30 
	fi
	[[ ! $sleep ]] && sleep=1
	#nvidia-pill "$PILL_ARGS" "$sleep" 
	#echo "sleep $sleep; /dog/sbin/nvidia-pill \"$PILL_ARGS\" \"$sleep\""
#	screen -dmS pill bash -c "sleep $sleep; /dog/sbin/nvidia-pill \"$PILL_ARGS\" \"$sleep\"" &
	screen -dmS pill bash -c "sleep $sleep; /dog/sbin/OhGodAnETHlargementPill-r2 \"$PILL_ARGS\" \"$sleep\"" &
fi
echo -e $BROWN"================================================================"$WHITE

rm $LOCK_FILE
