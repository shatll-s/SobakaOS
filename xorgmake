#!/bin/bash
. colors

#echo -e $BROWN"================================================================"$WHITE
n=$(/dog/gpu-detect NVIDIA)
file="/tmp/xorg.conf"
connected_monitor=`nvidia-smi --query-gpu=gpu_bus_id,display_mode --format=csv,noheader | grep -c Enabled `
echo "Connected monitors: $connected_monitor"
internal=`lspci | grep -E "VGA|3D controller" | head -n 1 | grep -vE "NVIDIA|AMD"`

#server flags
echo -e "#File generated by OSdog at $(date --rfc-3339=seconds)" > $file
echo -e "Section \"ServerFlags\"" >> $file
	echo -e "\tOption \"BlankTime\" \"0\"" >> $file
	echo -e "\tOption \"StandbyTime\" \"0\"" >> $file
	echo -e "\tOption \"SuspendTime\" \"0\"" >> $file
	echo -e "\tOption \"OffTime\" \"0\"" >> $file
echo -e "EndSection\n" >> $file
if [[ $n -gt 0 || ! -z $internal ]]; then
	#server layout
	echo -e "Section \"ServerLayout\"" >> $file
		echo -e "\tIdentifier\t\"Layout0\"" >> $file
		[[ ! -z $internal ]] && echo -e "\tScreen\t\t0 \"Screen0\" 0 0" >> $file
		for ((i=1; i <= $n; i++)); do
			echo -e "\tScreen\t\t$i \"Screen$i\" 0 0" >> $file
		done
		echo -e "\tInputDevice \"Keyboard0\" \"CoreKeyboard\"" >> $file
		echo -e "\tInputDevice \"Mouse0\" \"CorePointer\"" >> $file
	echo -e "EndSection\n" >> $file

	echo -e "Section \"Files\"" >> $file
	echo -e "EndSection\n" >> $file

	#mouse
	echo -e "Section \"InputDevice\"" >> $file
		echo -e "\tIdentifier\t\"Mouse0\"" >> $file
		echo -e "\tDriver\t\t\"mouse\"" >> $file
		echo -e "\tOption\t\t\"Protocol\" \"auto\"" >> $file
		echo -e "\tOption\t\t\"Device\" \"/dev/psaux\"" >> $file
		echo -e "\tOption\t\t\"Emulate3Buttons\" \"no\"" >> $file
		echo -e "\tOption\t\t\"ZAxisMapping\" \"4 5\"" >> $file
	echo -e "EndSection\n" >> $file

	#keyboard
	echo -e "Section \"InputDevice\"" >> $file
		echo -e "\tIdentifier\t\"Keyboard0\"" >> $file
		echo -e "\tDriver\t\t\"kbd\"" >> $file
	echo -e "EndSection\n" >> $file

	#monitor
	echo -e "Section \"Monitor\"" >> $file
		echo -e "\tIdentifier\t\"Monitor0\"" >> $file
		echo -e "\tVendorName\t\"Unknown\"" >> $file
		echo -e "\tModelName\t\"Unknown\"" >> $file
		echo -e "\tHorizSync\t28.0 - 33.0" >> $file
		echo -e "\tVertRefresh\t43.0 - 72.0" >> $file
		echo -e "\tOption\t\t\"NODPMS\"" >> $file
	echo -e "EndSection\n" >> $file


	#device + screen for each GPU
	#internal
	if [[ ! -z $internal ]]; then
		busid=`echo $internal | awk '{print $1}' | awk -F : '{printf("%d:%d:%d\n", "0x"$1, $2, $3)}'` #se
		echo "Detected internal GPU $busid to be the first one"
		echo "#--- Internal GPU----------------------------------------" >> $file
		echo -e "Section \"Device\"" >> $file
					echo -e "\tIdentifier\t\"Device0\"" >> $file
					echo -e "\tDriver\t\t\"intel\"" >> $file
					echo -e "\tBUSID\t\t\"PCI:$busid\"" >> $file
		echo -e "EndSection\n" >> $file
		echo -e "Section \"Screen\"" >> $file
			echo -e "\tIdentifier\t\"Screen0\"" >> $file
			echo -e "\tDevice\t\t\"Device0\"" >> $file
			echo -e "\tMonitor\t\t\"Monitor0\"" >> $file
		echo -e "EndSection\n" >> $file
	fi
	#external
	i=0
	while read busname; do
		bus[$i]=`echo $busname | awk -F ', ' '{print $1}'`
		b[$i]=`echo ${bus[$i]} | sed 's/:.*//'`
		b_10[$i]=`printf "%d" 0x${b[$i]}`
		
		name[$i]=`echo $busname | awk -F ', ' '{print $2}'`
		((i++))
	done < <(/dog/gpu-detect NVIDIA list)

	for ((y=1; y <= ${#bus[@]}; y++)); do
		let i=y-1 #$i for array index, $y for device number
		echo "#--- Bus_ID ${bus[$i]} --- ${name[$i]}----------------------------------------" >> $file
		echo -e "Section \"Device\"" >> $file
			echo -e "\tIdentifier\t\"Device$y\"" >> $file
			echo -e "\tDriver\t\t\"nvidia\"" >> $file
			echo -e "\tVendorName\t\"NVIDIA Corporation\"" >> $file
			echo -e "\tOption\t\t\"Coolbits\" \"31\"" >> $file
			echo -e "\tBusID\t\t\"PCI:${b_10[$i]}:0:0\"" >> $file
			[[ $i -ge $connected_monitor ]] && echo -e "\tOption\t\t\"ConnectedMonitor\" \"DFP-0\"" >> $file
			[[ $i -ge $connected_monitor ]] && echo -e "\tOption\t\t\"CustomEDID\" \"DFP-0:/dog/service/edid.bin\"" >> $file
		echo -e "EndSection\n" >> $file
		echo -e "Section \"Screen\"" >> $file
			echo -e "\tIdentifier\t\"Screen$y\"" >> $file
			echo -e "\tDevice\t\t\"Device$y\"" >> $file
			echo -e "\tOption\t\t\"Coolbits\" \"31\"" >> $file
			[[ $i -ge 1 || ! -z $internal ]] && echo -e "\tOption\t\t\"UseDisplayDevice\" \"none\"" >> $file #if this is second or more gpu OR there is internal
		echo -e "EndSection\n" >> $file
	done
	cp $file /etc/X11/xorg.conf
elif [[ $(/dog/gpu-detect AMD) -gt 0 ]]; then
	cp /dog/service/xorg.conf.amd /etc/X11/xorg.conf
else
	rm /etc/X11/xorg.conf #rm config so maybe xorg autoconfig will work
fi
