#!/bin/bash
[ -t 1 ] && . colors #source colors only if running in terminal
LOG="/tmp/opendev.log"

if [[ `lsusb | grep -E '0483:5740|0483:a26d' | wc -l` -gt 0 ]]; then
	for sysdevpath in $(find /sys/bus/usb/devices/usb*/ -name dev); do
		syspath=`echo $sysdevpath | sed 's/\/dev$//'`
		[[ -f $syspath/uevent ]] && . $syspath/uevent #DEVNAME=bus/usb/001/001
		[[ "$DEVNAME" == "bus/"* ]] && continue
		eval "$(udevadm info -q property --export -p $syspath | grep -E 'ID_VENDOR_ID|DEVNAME|ID_MODEL_ID|ID_SERIAL')" 
		#There are some bug DEVNAME and MODEL_ID
		[[ ! ($ID_MODEL_ID == "5740" || $ID_MODEL_ID == "a26d") || $ID_VENDOR_ID != "0483" || $DEVNAME == "/dev/sg0" || $DEVNAME == *"hiddev"* ]] && continue
		echo -e "${GREEN}>Detected open-dev watchdog ${CYAN}${DEVNAME} ${GREEN}(${ID_SERIAL})${WHITE}"
		PORT=$DEVNAME
	done
fi

[[ -z $PORT ]] && echo -e "${RED}>There is no open-dev watchdog in system, exiting${WHITE}" && exit 1
#[[ $PORT == "/dev/sg0" ]] && echo -e "${RED}>Detected wrong port (${PORT}), exiting${WHITE}" && exit 1

function watchdog_query() {
	local query=$1
	#echo -e ">Making query ${CYAN}\"$query\"${WHITE} to port ${CYAN}${PORT}${WHITE}"
	stty -F $PORT 115200 raw -echo
	for (( i=1; i <= 10; i++ )); do
		exec 9< $PORT
		cat <&9 > $LOG &
		echo -n $query > $PORT
		sleep 0.1s
		kill -INT $!
		exec 9<&-
		reply=`cat $LOG | cut -d"~" -f 2`
		if [ ! -z "$reply" ]; then
			break
		fi
	done
	echo $reply
}

case $1 in
	initial)
		MINER_PID=$(screen -ls | grep "wd-opendev" | sed 's/\s\([0-9]*\)..*/\1/')
		[[ ! -z "$MINER_PID" ]] && echo ">Killing old screens" && kill $MINER_PID
		echo -e "${GREEN}>Opening screen ${CYAN}wd-opendev${GREEN} with endless ping${WHITE}"
		screen -dmS "wd-opendev" bash -c "wd-opendev ping"
	;;
	show)
		screen -d wd-opendev
		screen -r wd-opendev
	;;
	ping)
		while true
		do
			echo "$(date --rfc-3339=seconds) Pinging watchdog"
			[[ `nc -w 2 -zv localhost 22 2>&1 | grep -c succeeded` -gt 0 ]] && echo -n "~U" > $PORT
			sleep 5
		done
	;;
	read|settings)
		echo -e "${GREEN}>Reading settings${WHITE}"
		watchdog_query "~F"
	;;
	setup-time)
		[[ -z $2 ]] && echo -e "${RED}> You need to input time-before-reset, f.e. wd-opendev setup-time 5${WHITE}" && exit 1
		[[ $2 -lt 1 || $2 -gt 15 ]] && echo -e "${RED}> You need to input time-before-reset, in 5-15 range${WHITE}" && exit 1
		time=`echo "obase=16; ibase=10; $2" | bc`
		old_settings=`watchdog_query "~F"`
		new_settings=`echo $old_settings | sed "s/^F//; s/^./$time/"`
		echo -e "${GREEN}>Writing settings ${CYAN}${new_settings}${WHITE}"
		watchdog_query "~W${new_settings}"
	;;
	write)
		[[ -z $2 ]] && echo -e "${RED}> You need to input settings-string, like, 52532120300${WHITE}" && exit 1
		echo -e "${GREEN}>Writing settings ${CYAN}${2}${WHITE}"
		watchdog_query "~W${2}"
	;;
	firmware|fw)
		echo -e "${GREEN}>Reading firmware version${WHITE}"
		watchdog_query "~I"
	;;
	reset)
		echo -e "${GREEN}>Pushing Reset${WHITE}"
		echo -n "~T1" > $PORT
	;;
	power)
		echo -e "${GREEN}>Pushing Power${WHITE}"
		echo -n "~T2" > $PORT
	;;
	*|-h|--help)
		bname=`basename $0`
		echo -e "Usage: ${CYAN}$bname initial|ping|reset|power|firmware|settings|setup-time${WHITE}"
	;;
esac
