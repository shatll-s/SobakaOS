#!/bin/bash
. colors
RIGONLINE_CFG="/dog/cfg/rigonlineru.cfg"
SETTINGS_CFG="/dog/cfg/rigonlineru_settings.cfg"
LOG="/dog/log/rigonlineru.log"
RESTART_LOCK="/tmp/.rigonline_restart.lock"
API_URL="https://rigonline.ru/api/"
NVIDIASMI_FILE=/tmp/nvidiasmi #need to get some info from nvidia-smi
AMDMEMINFO_FILE=/tmp/amdmeminfo

function main () {
	# # если первый вызов
	if [[ ! -f $RESTART_LOCK ]]; then
		touch $RESTART_LOCK

		# берем настройки
		[[ -f $SETTINGS_CFG ]] && . $SETTINGS_CFG

		echo -e "================================================================"
		echo -e "SEND RESTART TO RIGONLINE.RU ..."

		# дергаем урл перезагрузки на сервисе
		return=`wget -q -T 10 -O log.txt "${API_URL}?email=${EMAIL}&secret=${SECRET}&rig=${RIGID}&restart=y" --no-check-certificate`
		exitcode=$?
	else
		# обновление конфига
		echo -e "================================================================"
		echo -e "UPDATE CONFIG FROM RIGONLINE.RU ..."

	 	return=`wget -T 10 -O $SETTINGS_CFG "${API_URL}get.php?type=config&email=${EMAIL}&rig=${RIGID}" --no-check-certificate`
		exitcode=$?
		[[ $exitcode -eq 0 ]] && echo "UPDATE DONE" || echo "ERROR: FAILED TO UPDATE CONFIG"

		echo -e "================================================================"

	 	# берем настройки
		[[ -f $SETTINGS_CFG ]] && . $SETTINGS_CFG
		echo -e "================================================================"
		echo -e "SEND DATA TO RIGONLINE.RU ..."
		
		# дергаем урл на сервисе
		local version='os.dog' #'18.2'
		local name=`cat /etc/hostname`
		local ut=`awk '{printf("%d:%02d:%02d:%02d\n",($1/60/60/24),($1/60/60%24),($1/60%60),($1%60))}' /proc/uptime`
		local cpu=$(echo "`dmidecode -s processor-manufacturer`_`dmidecode -s processor-version`" | sed -e "s/ /_/g; s/://g; s/,//g")
		local cpu_load1=`uptime | sed 's/.*load average: \([.0-9]*\),.*/\1/'`
		local cpu_load2=`uptime | sed 's/.*, \([.0-9]*\),.*/\1/'`
		local core_count=`sudo dmidecode -t processor | grep "Core Count" | awk -F ':' '{print $2}'`
		local cl1=`echo "scale=0;$cpu_load1 * 100 / $core_count" | bc -l`
		#cl2=`echo "scale=0;$cpu_load2 *100 / $core_count" | bc -l`
		[[ ! $core_count ]] && core_count=1
		
		local mb=$(echo "`dmidecode -s baseboard-manufacturer`_`dmidecode -s baseboard-product-name`" | sed -e "s/ /_/g; s/://g; s/,//g")
		local result="CN:${name},UT:${ut},C:${cpu},M:${mb},CL:${cl1}" #:${cl2}
		
		if [[ ! -z `dpkg -s lm-sensors 2>&1 | grep '^Version: ' | sed 's/Version: //'` ]]; then
			local cpu_temp=(`sensors -u | grep Core -A1 | grep _input | sed 's/.*_input: //'`)
			if [[ ! -z $cpu_temp ]]; then
				local sum_cpu_temp=0
				for ((i=0; i < ${#cpu_temp[@]}; i++)); do
					local sum_cpu_temp=`echo "scale=0; $sum_cpu_temp + ${cpu_temp[$i]}" | bc -l`
				done
				local avg_cpu_temp=`echo "scale=0; $sum_cpu_temp/${#cpu_temp[@]}" | bc -l`
			fi
			[[ ! -z $avg_cpu_temp ]] && result+=",CT:$avg_cpu_temp"
		fi
		
		if [[ `gpu-detect NVIDIA` -gt 0 && ! -f $NV_STOP_TRIGGER ]]; then
			timeout -s9 30 nvidia-smi --query-gpu=gpu_bus_id,name,temperature.gpu,fan.speed,power.draw,power.min_limit,power.default_limit,power.max_limit,memory.total,clocks.gr,clocks.mem,vbios_version,utilization.gpu --format=csv,noheader,nounits > $NVIDIASMI_FILE
			
			exitcode=$?
			if [[ $exitcode -eq 0 ]]; then
				timer=0
				while [[ $timer -le 10 ]]; do
					if  [[ -f $NVIDIASMI_FILE ]]; then #We got nvidia-smi file
						break
					fi
					sleep 0.5
					((timer+=1))
				done
				if [[ -f $NVIDIASMI_FILE ]]; then
					local nvidia_smi=`cat $NVIDIASMI_FILE`
					rm $NVIDIASMI_FILE
				fi
			else
				echo -e "${RED}Nvidia drivers errror${WHITE}"
			fi
		fi
		core_addr_raw=(`ls -d /sys/class/drm/card[0-9]*/device | egrep 'card[0-9]{1,2}/'`)

		for (( i=0; i < ${#core_addr_raw[@]}; i++ )); do
			gpu_busid_raw[$i]=$(cat ${core_addr_raw[$i]}/uevent | grep "PCI_SLOT_NAME" | sed 's/.*0000:\([0-9abcdefABCDEF]*\):.*/\1/')
		done

		IFS=$'\n' gpu_busid_sys=($(sort <<<"${gpu_busid_raw[*]}"))
		unset IFS

		for (( i=0; i < ${#gpu_busid_raw[@]}; i++ )) do
			for (( y=0; y < ${#gpu_busid_raw[@]}; y++ )) do
				[[ ${gpu_busid_sys[$i]} == ${gpu_busid_raw[$y]} ]] && core_addr[$i]=${core_addr_raw[$y]} && break
			done
		done
		a=0
		n=0
		for (( i=0; i < ${#core_addr[@]}; i++ )); do
			if [ $(cat ${core_addr[$i]}/uevent | grep "DRIVER" | sed -e 's/DRIVER\=\([a-z]*\)/\1/') == amdgpu ]; then
				[[ ! -f $AMDMEMINFO_FILE ]] && amdmeminfo -q -s > $AMDMEMINFO_FILE
				local fan_addr[$i]=$(ls -d ${core_addr[$i]}/hwmon/hwmon[0-9]*)
				local gpu_name[$i]=$(cat $AMDMEMINFO_FILE | grep $(echo ${gpu_busid_sys[$i]}".00.0") | awk -F":" '{ print $3 }' | sed -e "s/ /_/g; s/://g; s/,//g")
				local core_clock[$i]=`cat ${core_addr[$i]}/pp_dpm_sclk | grep \* | sed "s/.* \([0-9]*\)Mhz.*/\1/"`
				local mem_clock[$i]=`cat ${core_addr[$i]}/pp_dpm_mclk | grep \* | sed "s/.* \([0-9]*\)Mhz.*/\1/"`
				local rig_gpu_fan_raw[$i]=`cat "${fan_addr[$i]}/pwm1"`
				local rig_gpu_fan_raw[$i]=`echo "scale=0; ${rig_gpu_fan_raw[$i]}*100/255" | bc -l`
				local temp_raw[$i]=`cat "${fan_addr[$i]}/temp1_input"` #temp1_input - current temp 
				local rig_gpu_temp_raw[$i]=`expr ${temp_raw[$i]} / 1000` #temp format is like 65000
				[[ -f "${core_addr[$i]}/gpu_busy_percent" ]] && local rig_gpu_utilisation[$i]=`cat "${core_addr[$i]}/gpu_busy_percent"`
				#result+=",G:a${a}:${gpu_name[$i]}"
				#result+=",a${a}:C:T:${rig_gpu_temp_raw[$i]}"
				#result+=",a${a}:F:C:${rig_gpu_fan_raw[$i]}"
				#result+=",a${a}:C:C:${core_clock[$i]}"
				#result+=",a${a}:M:C:${mem_clock[$i]}"
				local cardid="a${a}"
				(( a++ ))
			elif [ $(cat ${core_addr[$i]}/uevent | grep "DRIVER" | sed 's/DRIVER\=\([a-z]*\)/\1/') == nvidia ]; then #GPU is NVIDIA
				if [[ ! -z $nvidia_smi && $nvidia_smi != *"NVIDIA-SMI"* ]]; then
					local nvidiainfo=`echo "$nvidia_smi" | grep -i ${gpu_busid_sys[$i]}":00.0"`
					local gpu_name_raw[$i]=`awk -F ', ' '{print $2}' <<< $nvidiainfo`
					local gpu_name[$i]=`echo ${gpu_name_raw[$i]} | sed -e "s/ /_/g; s/://g; s/,//g"`
					local rig_gpu_temp_raw[$i]=`awk -F ', ' '{print $3}' <<< $nvidiainfo`
					local rig_gpu_fan_raw[$i]=`awk -F ', ' '{print $4}' <<< $nvidiainfo`
					local core_clock[$i]=`awk -F ', ' '{print $10}' <<< $nvidiainfo`
					local mem_clock[$i]=`awk -F ', ' '{print $11}' <<< $nvidiainfo`
					local rig_gpu_utilisation[$i]=`awk -F ', ' '{print $13}' <<< $nvidiainfo`
				fi
				local cardid="n${n}"
				(( n++ ))
			else
				continue
			fi
			[[ ! -z ${gpu_name[$i]} ]] && result+=",G:${cardid}:${gpu_name[$i]}"
			[[ ! -z ${rig_gpu_temp_raw[$i]} ]] && result+=",${cardid}:C:T:${rig_gpu_temp_raw[$i]}"
			[[ ! -z ${rig_gpu_fan_raw[$i]} ]] && result+=",${cardid}:F:C:${rig_gpu_fan_raw[$i]}"
			[[ ! -z ${core_clock[$i]} ]] && result+=",${cardid}:C:C:${core_clock[$i]}"
			[[ ! -z ${mem_clock[$i]} ]] && result+=",${cardid}:M:C:${mem_clock[$i]}"
			[[ ! -z ${rig_gpu_utilisation[$i]} ]] && result+=",${cardid}:C:L:${rig_gpu_utilisation[$i]}"
		done

		
		local url="https://rigonline.ru/api/?email=${EMAIL}&secret=${SECRET}&rig=${RIGID}&v=${version}&gpu=${result}"	
		local return=`wget -q -T 10 -O $LOG "$url" --no-check-certificate`
		exitcode=$?
		echo -e "DATA SENT TO RIGONLINE.RU ..."
	fi

	[[ $exitcode -eq 0 ]] && echo $return || echo "ERROR"

	echo -e "================================================================"
}

while true; do
	[[ ! -f $RIGONLINE_CFG ]] && echo "No config file for rigonline.ru, can\`t do anything..."
	json=`cat $RIGONLINE_CFG`

	for option in email secret rigid; do
		if [[ `echo $json | jq ".$option"` != null ]]; then
			option_value="`echo $json | jq -r \".$option\"`" #double slash, because eval open it
			eval "${option^^}=\"$option_value\""
		fi
	done

	main
	if [[ -f $RESTART_LOCK ]]; then # если не первый вызов
		[[ -z $pause ]] && pause=120
		echo "PAUSE $pause"
		sleep $pause
	fi
done
	
	
