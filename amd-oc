#!/bin/bash
. colors
AMD_CFG="/dog/cfg/amd.cfg"
AMDMEMINFO_FILE=/tmp/amdmeminfo
[[ ! -f $AMDMEMINFO_FILE ]] && amdmeminfo -q -s > $AMDMEMINFO_FILE
LOCK_FILE="/tmp/.amd-oc.lock"

function getdata () {
	for option in core_clock core_state core_voltage memory_clock memory_state memory_voltage memory_tweak_type fan enhanced alt; do
		if [[ `echo $1 | jq ".$option"` != null ]]; then
			option_value="`echo $1 | jq -r \".$option\"`" #double slash, because eval open it
			eval "${option^^}=\"$option_value\""
		fi
	done
	if [[ `echo $1 | jq ".memory_tweak"` != null ]]; then
		local memory_tweak="`echo $1 | jq -r \".memory_tweak\"`"
		if [[ $MEMORY_TWEAK_TYPE == 0 ]]; then
			MEMORY_TWEAK="$memory_tweak"
		else
			oldIFS="$IFS"
			IFS='
'
			IFS=${IFS:0:1}
			MEMORY_TWEAK=($memory_tweak)
			IFS="$oldIFS"
		fi
	fi
}

if  [[ -e $LOCK_FILE ]]; then
	pid=`cat $LOCK_FILE`
	ps --pid $pid &>/dev/null
	[[ $? == 0 ]] && echo -e "${RED}It seems another copy of AMD Overclocking script is already running\nCooldown a bit :)${WHITE}" && exit 1
fi
echo $$ > $LOCK_FILE

n=$(gpu-detect AMD)
[[ $n == 0 ]]&& echo $(date --rfc-3339=seconds)" no AMD GPU(s) detected, exiting" && rm $LOCK_FILE && exit 1
echo -e $(date --rfc-3339=seconds)" $n "$LIGHTRED"AMD"$WHITE" GPU detected"

if [[ ! -z $1 && $1 != "--firstrun" ]]; then
	echo "Overclocking config given in arguments"
	getdata "$1"
else
	[[ ! -f $AMD_CFG ]]&& echo $(date --rfc-3339=seconds)" configuration file $AMD_CFG does not exist, exiting" && rm $LOCK_FILE && exit 1
	cfg=`cat $AMD_CFG`
	echo $cfg | jq '.'  > /dev/null 2>&1
	exitcode="$?"
	if [[ $exitcode -eq 0 ]]; then
		echo "Overclocking config in JSON format (or empty)"
		getdata "$cfg"
	else
		echo "OverClocking config in BASH format"
		. $AMD_CFG
	fi
fi

#OC arrays
CORE_CLOCK=($CORE_CLOCK)
CORE_STATE=($CORE_STATE)
CORE_VOLTAGE=($CORE_VOLTAGE)
MEMORY_CLOCK=($MEMORY_CLOCK)
MEMORY_STATE=($MEMORY_STATE)
MEMORY_VOLTAGE=($MEMORY_VOLTAGE)
[[ ! $FAN ]]&& FAN[0]="A"
FAN=($FAN)

for (( i=0; i < $n; ++i )); do
	[[ ! ${CORE_CLOCK[$i]} && ! -z ${CORE_CLOCK[0]} ]]&& CORE_CLOCK[$i]=${CORE_CLOCK[-1]}
	[[ ! ${CORE_STATE[$i]} && ! -z ${CORE_STATE[0]} ]]&& CORE_STATE[$i]=${CORE_STATE[-1]}
	[[ ! ${CORE_VOLTAGE[$i]} && ! -z ${CORE_VOLTAGE[0]} ]]&& CORE_VOLTAGE[$i]=${CORE_VOLTAGE[-1]}
	[[ ! ${MEMORY_CLOCK[$i]} && ! -z ${MEMORY_CLOCK[0]} ]]&& MEMORY_CLOCK[$i]=${MEMORY_CLOCK[-1]}
	[[ ! ${MEMORY_STATE[$i]} && ! -z ${MEMORY_STATE[0]} ]]&& MEMORY_STATE[$i]=${MEMORY_STATE[-1]}
	[[ ! ${MEMORY_VOLTAGE[$i]} && ! -z ${MEMORY_VOLTAGE[0]} ]]&& MEMORY_VOLTAGE[$i]=${MEMORY_VOLTAGE[-1]}
	[[ ! ${FAN[$i]} && ! -z ${FAN[0]} ]]&& FAN[$i]=${FAN[-1]}
done

echo "Trying to apply next settings:"
echo -e ${CYAN}"Core Clock:${WHITE}\t${CORE_CLOCK[@]}"
echo -e ${CYAN}"Core State:${WHITE}\t${CORE_STATE[@]}"
echo -e ${CYAN}"Core Voltage:${WHITE}\t${CORE_VOLTAGE[@]}"
echo -e ${CYAN}"Memory Clock:${WHITE}\t${MEMORY_CLOCK[@]}"
echo -e ${CYAN}"Memory State:${WHITE}\t${MEMORY_STATE[@]}"
echo -e ${CYAN}"Memory Voltage:${WHITE}\t${MEMORY_VOLTAGE[@]}"
echo -en ${CYAN}"Alt. Memory OC:${WHITE} "
[[ $ALT -eq 1 ]] && echo "Yes" || echo "No"
echo -e ${CYAN}"Fan:${WHITE}\t\t${FAN[@]}"
echo -en ${CYAN}"Memory Tweak:${WHITE}\t"
if [[ $MEMORY_TWEAK_TYPE == 0 ]]; then
	echo "Common"
	echo "$MEMORY_TWEAK"
else
	echo "Individual"
	for (( i=0; i < ${#MEMORY_TWEAK[@]}; i++ )); do
		[[ $i > 0 ]] && echo -e "${BROWN}--------------------------${WHITE}"
		echo "${MEMORY_TWEAK[$i]}"
	done
fi

[ -t 1 ] && echo -e ${ITALIC}"\n*If there is not enough settings (i.e. you try to apply FAN 70 70 50,\nbut you have 5 GPU, last 2 GPU will use last available value = 50)"${WHITE}
echo -e $BROWN"================================================================"$WHITE

#making sorted array of core addresses
core_addr_raw=(`ls -d /sys/class/drm/card[0-9]*/device | egrep 'card[0-9]{1,2}/'`)
for (( i=0; i < ${#core_addr_raw[@]}; i++ )); do
	gpu_busid_raw[$i]=$(cat ${core_addr_raw[$i]}/uevent | grep "PCI_SLOT_NAME" | sed 's/.*0000:\([0-9abcdefABCDEF]*\):.*/\1/')
done
IFS=$'\n' gpu_busid_sys=($(sort <<<"${gpu_busid_raw[*]}"))
unset IFS
for (( i=0; i < ${#gpu_busid_raw[@]}; i++ )) do
	for (( y=0; y < ${#gpu_busid_raw[@]}; y++ )) do
		[[ ${gpu_busid_sys[$i]} == ${gpu_busid_raw[$y]} ]] && core_addr[$i]=${core_addr_raw[$y]} && break
	done
done

y=0 #$y = OC values, because not all $i are amdgpu cards, 
for (( i=0; i < ${#core_addr[@]}; i++ )); do
	if [ $(cat ${core_addr[$i]}/uevent | grep "DRIVER" | sed -e 's/DRIVER\=\([a-z]*\)/\1/') == amdgpu ]; then #GPU is AMD
		#wolfamdctrl -i 0 --mem-state 2 --mem-clock 2000 --core-state 4 --core-clock 1100 --volt-state 4 --vddc-table-set 900
		#wolfamdctrl -i /sys/class/drm/card5/device --core-state 3 --core-clock 1100 also works
		card=$(echo ${core_addr[$i]} | sed 's/\/sys\/class\/drm\/card\([0-9a-z]*\)\/device/\1/')
		gpu_name[$i]=$(cat $AMDMEMINFO_FILE | grep $(echo ${gpu_busid_sys[$i]}".00.0") | awk -F":" '{ print $3 }')
		echo -e "${LIGHTRED}GPU $y: ${gpu_name[$i]}${WHITE} (${core_addr[$i]})"

		if [[ -f ${core_addr[$i]}/pp_od_clk_voltage ]]; then #grub error is fixed, amdgpu.ppfeaturemask=0xffff7fff used
			if [[ -f ${core_addr[$i]}/pp_table ]]; then
				if [[ -f /tmp/pp_tables/card$card/pp_table ]]; then
					#echo "Copying Power Play table to restore defaults"
					#cp /tmp/pp_tables/card$card/pp_table ${core_addr[$i]}/pp_table
					#sync
					echo "Copying Power Play table is temporary DISABLED"
				else
					echo "Can\`t find saved Power Play table. Try to reboot"
				fi
			else
				echo "Can\`t find existing Power Play table. Try to reboot"
			fi
		else
			echo "Something is wrong, may be you need to upgrade to work with Power Play tables"
		fi
		[[ ${gpu_name[$i]} == *"Vega"* ]] && script="vegatool" || script="wolfamdctrl"

		if [[ $ENHANCED -eq 1 && ${gpu_name[$i]} != *"Vega"* ]]; then
			echo -e "${LIGHTRED}Enhanced overclock (for all states)${WHITE}"
			if [[ ! -z ${CORE_CLOCK[$y]} ]]; then
				dpm_state=(`echo -e $($script -i $card --show-core | grep "DPM state" | sed -e 's/://g; s/DPM state \([0-9]*\)/\1/')`)
				for ((z=1; z < ${#dpm_state[@]}; z++)); do
					$script -i $card --core-state ${dpm_state[$z]} --core-clock ${CORE_CLOCK[$y]}
				done
			fi
			if [[ ! -z ${CORE_VOLTAGE[$y]} ]]; then
				volt_states=(`echo -e $($script -i $card --show-voltage | grep "Voltage state" | sed -e 's/://g; s/.*Voltage state \([0-9]*\)/\1/')`) 
				for ((z=0; z < ${#volt_states[@]}; z++)); do
					[[ $z -gt 7 ]] && break
					$script -i $card --volt-state ${volt_states[$z]} --vddc-table-set ${CORE_VOLTAGE[$y]}
				done
			fi
			str="$script -i $card"	#for future
		else
			str="$script -i $card"
			if [[ -z ${CORE_STATE[$y]} || ${CORE_STATE[$y]} == "A" ]]; then
				#CORE_STATE[$y]=`cat "${core_addr[$i]}/pp_dpm_sclk" | grep \* | sed -e 's/*//; s/:.*//'`
				#cs_trigger=1
				CORE_STATE[$y]=5 #if Core State is not set, use default
			fi
			
			if [[ ${CORE_CLOCK[$y]} ]]; then
				if [[ ${gpu_name[$i]} == *"Vega"* ]]; then
					for (( vega_state=1; vega_state <= 7; vega_state++ )); do
						vega_clock=`echo "scale=0; ${CORE_CLOCK[$y]} - (7-$vega_state)*10" | bc -l`
						$script -i $card --core-state $vega_state --core-clock $vega_clock | sed -e "s/^MyTool 0.0.1$//; /^\s*$/d; s/'//g"
						#echo "$vega_state = $vega_clock"
					done
				else
					str="$str --core-state ${CORE_STATE[$y]} --core-clock ${CORE_CLOCK[$y]}"
				fi
			fi

			if [[ ${CORE_VOLTAGE[$y]} ]]; then
				volt_state=`echo -e $($script -i $card --show-core | grep "DPM state ${CORE_STATE[$y]}" -A1) \
					| sed -e 's/)//g; s/.*entry \([0-9]*\)/\1/'`
				str="$str --volt-state $volt_state --vddc-table-set ${CORE_VOLTAGE[$y]}"
			fi
		fi
		#str="$script -i $card"

		if [[ -z ${MEMORY_STATE[$y]} || ${MEMORY_STATE[$y]} == "A" ]]; then
			MEMORY_STATE[$y]=`$script -i $card --show-mem | grep -E "Memory state ([0-9]+):" | tail -n 1 | sed "s/Memory state \([0-9]*\).*/\1/"`
		fi
		[[ ! -z ${MEMORY_CLOCK[$y]} ]] && str="$str --mem-state ${MEMORY_STATE[$y]} --mem-clock ${MEMORY_CLOCK[$y]}"
		[[ $ALT -eq 1 && ! -z ${MEMORY_VOLTAGE[$y]} ]] && str="$str --vddci ${MEMORY_VOLTAGE[$y]}" #no need to change --mvdd --mvdd 1000"

		[[ $(echo $str | awk '{print length}') -gt 30 ]] && echo "$str" && bash -c "$str" | sed -e "s/^MyTool 0.0.1$//; /^\s*$/d; s/'//g"
		#29 is "wolfamdctrl -i 5", so it`s useless to do
		
		if [[ $ALT -ne 1 ]]; then 
			if [[ ! -z ${MEMORY_VOLTAGE[$y]} && ! -z ${MEMORY_STATE[$y]} && ! -z ${MEMORY_CLOCK[$y]} ]]; then
				mem_str="m ${MEMORY_STATE[$y]} ${MEMORY_CLOCK[$y]} ${MEMORY_VOLTAGE[$y]}"
				echo "$mem_str > ${core_addr[$i]}/pp_od_clk_voltage"
				echo "$mem_str" > ${core_addr[$i]}/pp_od_clk_voltage
				echo "c" > ${core_addr[$i]}/pp_od_clk_voltage
			fi
		fi

		if [[ $MEMORY_TWEAK_TYPE == 0 ]]; then
			amdmemtweak --i $y $MEMORY_TWEAK
		else
			#no need to use if args are too short
			[[ ${#MEMORY_TWEAK[$y]} -gt 4 ]] && amdmemtweak --i $y ${MEMORY_TWEAK[$y]} || echo -e "${RED}There are no AMDMemTweak settings for this card${WHITE}"
		fi

		#Fan section
		fan_addr[$i]=$(ls -d ${core_addr[$i]}/hwmon/hwmon[0-9]*)
		if (( ${FAN[$y]} == "A" )); then
			echo -e "${CYAN}Auto${WHITE} fan."
			echo 0 > ${fan_addr[$i]}/pwm1_enable
		else 
			echo -e "${CYAN}Manual${WHITE} fan (${FAN[$y]})." 
			echo 1 > ${fan_addr[$i]}/pwm1_enable
			if [[ ${gpu_name[$i]} == *"Vega@@@"* ]]; then #Need to check
				rpm_min=`cat ${fan_addr[$i]}/fan1_min`
				rpm_max=`cat ${fan_addr[$i]}/fan1_max`
				fan_target=`echo "scale=0; ${FAN[$y]} * $rpm_max / 100" | bc -l`
				[[ $fan_target -ge $rpm_max ]] && fan_target=`echo "$rpm_max - 1" | bc -l`
				[[ $fan_target -lt $rpm_min ]] && fan_target=`echo "$rpm_min + 1" | bc -l`
				echo $fan_target > ${fan_addr[$i]}/fan1_target
			else
				let fan_adapted[$i]=`echo "scale=0; ${FAN[$y]}*255/100" | bc -l` #fan power is beetween 0 and 255
				echo ${fan_adapted[$i]} > ${fan_addr[$i]}/pwm1
			fi
		fi
		if [[ ${gpu_name[$i]} == *"Vega"* ]]; then
			#echo "manual" > ${core_addr[$i]}/power_dpm_force_performance_level
			#echo 4 > ${core_addr[$i]}/pp_power_profile_mode

			echo "echo auto > ${core_addr[$i]}/power_dpm_force_performance_level"
			echo "auto" > ${core_addr[$i]}/power_dpm_force_performance_level	
		else
			if [[ $ENHANCED -eq 1 && ${gpu_name[$i]} != *"Vega"* ]]; then
				echo auto > ${core_addr[$i]}/power_dpm_force_performance_level
				echo -e "${CYAN}Auto${WHITE} Core State selection (because of Enhanced OC)"
			elif [[ $ms_trigger -eq 1 && $cs_trigger -eq 1 ]]; then
				echo auto > ${core_addr[$i]}/power_dpm_force_performance_level
				echo -e "${CYAN}Auto${WHITE} Core State selection (no states given)"
			else
				echo manual > ${core_addr[$i]}/power_dpm_force_performance_level
				#Core & Memory states selection
				if [[ $cs_trigger -ne 1 ]]; then #if core state given
					echo -e "${CYAN}Manual${WHITE} Core State selection (${CYAN}P${CORE_STATE[$y]}${WHITE})."
					echo ${CORE_STATE[$y]} > ${core_addr[$i]}/pp_dpm_sclk
				fi

				if [[ $ms_trigger -ne 1 ]]; then
					echo -e "${CYAN}Manual${WHITE} Memory State selection (${CYAN}P${MEMORY_STATE[$y]}${WHITE})."
					echo ${MEMORY_STATE[$y]} > ${core_addr[$i]}/pp_dpm_mclk
				fi
			fi
		fi
		echo -e $BROWN"================================================================"$WHITE
		(( y++ ))
		unset cs_trigger ms_trigger
	fi
done

rm $LOCK_FILE
