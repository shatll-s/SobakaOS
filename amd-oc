#!/bin/bash
. colors
AMD_CFG="/dog/cfg/amd.cfg"
AMDMEMINFO_FILE=/tmp/amdmeminfo
LOCK_FILE="/tmp/.amd-oc.lock"

[[ ! -f $AMDMEMINFO_FILE ]] && amdmeminfo -q -s -n > $AMDMEMINFO_FILE
[[ ! -f /run/dog/gpuStats ]] && gpu-detect listJS > /run/dog/gpuStats
#cat /run/dog/gpuStats
#cat $AMDMEMINFO_FILE

NAVI_VDDCI_MIN=650
NAVI_VDDCI_MAX=850
NAVI_MVDD_MIN=1200
NAVI_MVDD_MAX=1350

listAMD=`cat /run/dog/gpuStats | jq '[.gpu[] | select(.brand == "A")]'`

function getdata () {
	for option in core_clock core_state core_voltage memory_clock memory_state memory_voltage vddci soc_vdd_max soc_clk_max memory_tweak_type fan enhanced alt; do
		if [[ `echo $1 | jq ".$option"` != null ]]; then
			option_value="`echo $1 | jq -r \".$option\"`" #double slash, because eval open it
			eval "${option^^}=\"$option_value\""
		fi
	done
	if [[ `echo $1 | jq ".memory_tweak"` != null ]]; then
		local memory_tweak="`echo $1 | jq -r \".memory_tweak\"`"
		if [[ $MEMORY_TWEAK_TYPE == 0 ]]; then
			MEMORY_TWEAK="$memory_tweak"
		else
			oldIFS="$IFS"
			IFS='
'
			IFS=${IFS:0:1}
			MEMORY_TWEAK=($memory_tweak)
			IFS="$oldIFS"
		fi
	fi
}

if  [[ -e $LOCK_FILE ]]; then
	pid=`cat $LOCK_FILE`
	ps --pid $pid &>/dev/null
	[[ $? == 0 ]] && echo -e "${RED}It seems another copy of AMD Overclocking script is already running\nCooldown a bit :)${WHITE}" && exit 1
fi
echo $$ > $LOCK_FILE

n=`echo $listAMD | jq '.|length'`

[[ $n == 0 ]]&& echo $(date --rfc-3339=seconds)" no AMD GPU(s) detected, exiting" && rm $LOCK_FILE && exit 1
echo -e $(date --rfc-3339=seconds)" $n "$LIGHTRED"AMD"$WHITE" GPU detected"

if [[ ! -z $1 && $1 != "--firstrun" ]]; then
	echo "Overclocking config given in arguments"
	getdata "$1"
else
	[[ ! -f $AMD_CFG ]]&& echo $(date --rfc-3339=seconds)" configuration file $AMD_CFG does not exist, exiting" && rm $LOCK_FILE && exit 1
	cfg=`cat $AMD_CFG`
	echo $cfg | jq '.'  > /dev/null 2>&1
	exitcode="$?"
	if [[ $exitcode -eq 0 ]]; then
		echo "Overclocking config in JSON format (or empty)"
		getdata "$cfg"
	else
		echo "OverClocking config in BASH format"
		. $AMD_CFG
	fi
fi
#SOC_VDD_MAX="800 770 800 770 800 800 770 780 780"
#SOC_CLK_MAX=950
#OC arrays
CORE_CLOCK=($CORE_CLOCK)
CORE_STATE=($CORE_STATE)
CORE_VOLTAGE=($CORE_VOLTAGE)
MEMORY_CLOCK=($MEMORY_CLOCK)
MEMORY_STATE=($MEMORY_STATE)
MEMORY_VOLTAGE=($MEMORY_VOLTAGE)
VDDCI=($VDDCI)
SOC_VDD_MAX=($SOC_VDD_MAX)
SOC_CLK_MAX=($SOC_CLK_MAX)
[[ ! $FAN ]]&& FAN[0]="A"
FAN=($FAN)

for (( i=0; i < $n; ++i )); do
	[[ ! ${CORE_CLOCK[$i]} && ! -z ${CORE_CLOCK[0]} ]]&& CORE_CLOCK[$i]=${CORE_CLOCK[-1]}
	[[ ! ${CORE_STATE[$i]} && ! -z ${CORE_STATE[0]} ]]&& CORE_STATE[$i]=${CORE_STATE[-1]}
	[[ ! ${CORE_VOLTAGE[$i]} && ! -z ${CORE_VOLTAGE[0]} ]]&& CORE_VOLTAGE[$i]=${CORE_VOLTAGE[-1]}
	[[ ! ${MEMORY_CLOCK[$i]} && ! -z ${MEMORY_CLOCK[0]} ]]&& MEMORY_CLOCK[$i]=${MEMORY_CLOCK[-1]}
	[[ ! ${MEMORY_STATE[$i]} && ! -z ${MEMORY_STATE[0]} ]]&& MEMORY_STATE[$i]=${MEMORY_STATE[-1]}
	[[ ! ${MEMORY_VOLTAGE[$i]} && ! -z ${MEMORY_VOLTAGE[0]} ]]&& MEMORY_VOLTAGE[$i]=${MEMORY_VOLTAGE[-1]}
	[[ ! ${SOC_VDD_MAX[$i]} && ! -z ${SOC_VDD_MAX[0]} ]]&& SOC_VDD_MAX[$i]=${SOC_VDD_MAX[-1]}
	[[ ! ${SOC_CLK_MAX[$i]} && ! -z ${SOC_CLK_MAX[0]} ]]&& SOC_CLK_MAX[$i]=${SOC_CLK_MAX[-1]}
	[[ ! ${FAN[$i]} && ! -z ${FAN[0]} ]]&& FAN[$i]=${FAN[-1]}
done

echo "Trying to apply next settings:"
echo -e ${CYAN}"Core Clock:${WHITE}\t${CORE_CLOCK[@]}"
echo -e ${CYAN}"Core State:${WHITE}\t${CORE_STATE[@]}"
echo -e ${CYAN}"Core Voltage:${WHITE}\t${CORE_VOLTAGE[@]}"
echo -e ${CYAN}"Memory Clock:${WHITE}\t${MEMORY_CLOCK[@]}"
echo -e ${CYAN}"Memory State:${WHITE}\t${MEMORY_STATE[@]}"
echo -e ${CYAN}"Memory Voltage:${WHITE}\t${MEMORY_VOLTAGE[@]}"
echo -e ${CYAN}"MemCon Voltage:${WHITE}\t${MEMORY_VOLTAGE[@]}"
echo -e ${CYAN}"Max Soc Clock:${WHITE}\t${SOC_CLK_MAX[@]}"
echo -e ${CYAN}"MaxSoc Voltage:${WHITE}\t${SOC_VDD_MAX[@]}"

echo -en ${CYAN}"Alt. Memory OC:${WHITE} "
[[ $ALT -eq 1 ]] && echo "Yes" || echo "No"
echo -e ${CYAN}"Fan:${WHITE}\t\t${FAN[@]}"
echo -en ${CYAN}"Memory Tweak:${WHITE}\t"
if [[ $MEMORY_TWEAK_TYPE == 0 ]]; then
	echo "Common"
	echo "$MEMORY_TWEAK"
else
	echo "Individual"
	for (( i=0; i < ${#MEMORY_TWEAK[@]}; i++ )); do
		[[ $i > 0 ]] && echo -e "${BROWN}--------------------------${WHITE}"
		echo "${MEMORY_TWEAK[$i]}"
	done
fi

[ -t 1 ] && echo -e ${ITALIC}"\n*If there is not enough settings (i.e. you try to apply FAN 70 70 50,\nbut you have 5 GPU, last 2 GPU will use last available value = 50)"${WHITE}
echo -e $BROWN"================================================================"$WHITE

for (( i=0; i < $n; i++ )); do
	name=`echo $listAMD | jq -r ".[$i].name"`
	navi=`echo $listAMD | jq -r ".[$i].navi"`
	coreAddr=`echo $listAMD | jq -r ".[$i].coreAddr"`
	

	if [[ -z $coreAddr || $coreAddr == 'null' ]]; then
		echo -e "${LIGHTRED}GPU $i: $name${WHITE}"
		echo -e "${RED}Something wrong with GPU (driver is not enabled)${WHITE}"
		echo -e "$BROWN================================================================$WHITE"
		continue
	fi
	card=`echo $coreAddr | sed 's/\/sys\/class\/drm\/card\([0-9a-z]*\)\/device/\1/'`
	fanAddr=`echo $listAMD | jq -r ".[$i].fanAddr"`
	echo -e "${LIGHTRED}GPU $i: $name${WHITE} ($coreAddr)"
	
	#wolfamdctrl -i 0 --mem-state 2 --mem-clock 2000 --core-state 4 --core-clock 1100 --volt-state 4 --vddc-table-set 900
	#wolfamdctrl -i /sys/class/drm/card5/device --core-state 3 --core-clock 1100 also works
	
	if [[ -f $coreAddr/pp_od_clk_voltage ]]; then #grub error is fixed, amdgpu.ppfeaturemask=0xffff7fff used
		if [[ -f $coreAddr/pp_table ]]; then
			if [[ -f /tmp/pp_tables/card$card/pp_table ]]; then
				#echo "Copying Power Play table to restore defaults"
				#cp /tmp/pp_tables/card$card/pp_table$coreAddr/pp_table
				#sync
				#echo "Copying Power Play table is temporary DISABLED"
				:
			else
				echo "Can\`t find saved Power Play table" #. Try to reboot"
			fi
		else
			echo "Can\`t find existing Power Play table" #. Try to reboot"
		fi
	else
		echo "Something is wrong, may be you need to upgrade to work with Power Play tables"
	fi
	
	if [[ $navi -ne 1 ]]; then
		[[ $name == *"Vega"* ]] && script="vegatool" || script="wolfamdctrl"
		if [[ $ENHANCED -eq 1 && $name != *"Vega"* ]]; then
			echo -e "${LIGHTRED}Enhanced overclock (for all states)${WHITE}"
			if [[ ! -z ${CORE_CLOCK[$i]} ]]; then
				dpm_state=(`echo -e $($script -i $card --show-core | grep "DPM state" | sed -e 's/://g; s/DPM state \([0-9]*\)/\1/')`)
				for ((z=1; z < ${#dpm_state[@]}; z++)); do
					$script -i $card --core-state ${dpm_state[$z]} --core-clock ${CORE_CLOCK[$i]}
				done
			fi
			if [[ ! -z ${CORE_VOLTAGE[$i]} ]]; then
				volt_states=(`echo -e $($script -i $card --show-voltage | grep "Voltage state" | sed -e 's/://g; s/.*Voltage state \([0-9]*\)/\1/')`) 
				for ((z=0; z < ${#volt_states[@]}; z++)); do
					[[ $z -gt 7 ]] && break
					$script -i $card --volt-state ${volt_states[$z]} --vddc-table-set ${CORE_VOLTAGE[$i]}
				done
			fi
			str="$script -i $card"	#for future
		else
			str="$script -i $card"
			if [[ -z ${CORE_STATE[$i]} || ${CORE_STATE[$i]} == "A" ]]; then
				#CORE_STATE[$i]=`cat "${core_addr[$i]}/pp_dpm_sclk" | grep \* | sed -e 's/*//; s/:.*//'`
				#cs_trigger=1
				CORE_STATE[$i]=5 #if Core State is not set, use default
			fi
			
			if [[ ${CORE_CLOCK[$i]} ]]; then
				if [[ $name == *"Vega"* ]]; then
					for (( vega_state=1; vega_state <= 7; vega_state++ )); do
						vega_clock=`echo "scale=0; ${CORE_CLOCK[$i]} - (7-$vega_state)*10" | bc -l`
						$script -i $card --core-state $vega_state --core-clock $vega_clock | sed -e "s/^MyTool 0.0.1$//; /^\s*$/d; s/'//g"
						#echo "$vega_state = $vega_clock"
					done
				else
					str="$str --core-state ${CORE_STATE[$i]} --core-clock ${CORE_CLOCK[$i]}"
				fi
			fi

			if [[ ${CORE_VOLTAGE[$i]} ]]; then
				volt_state=`echo -e $($script -i $card --show-core | grep "DPM state ${CORE_STATE[$i]}" -A1) \
					| sed -e 's/)//g; s/.*entry \([0-9]*\)/\1/'`
				str="$str --volt-state $volt_state --vddc-table-set ${CORE_VOLTAGE[$i]}"
			fi
		fi
		#str="$script -i $card"

		if [[ -z ${MEMORY_STATE[$i]} || ${MEMORY_STATE[$i]} == "A" ]]; then
			MEMORY_STATE[$i]=`$script -i $card --show-mem | grep -E "Memory state ([0-9]+):" | tail -n 1 | sed "s/Memory state \([0-9]*\).*/\1/"`
		fi

		if [[ ! -z ${MEMORY_CLOCK[$i]} ]]; then
			str="$str --mem-state ${MEMORY_STATE[$i]} --mem-clock ${MEMORY_CLOCK[$i]}"
		fi
		[[ $ALT -eq 1 && ! -z ${MEMORY_VOLTAGE[$i]} ]] && str="$str --vddci ${MEMORY_VOLTAGE[$i]}" #no need to change --mvdd --mvdd 1000"

		[[ $(echo $str | awk '{print length}') -gt 30 ]] && echo "$str" && bash -c "$str" | sed -e "s/^MyTool 0.0.1$//; /^\s*$/d; s/'//g"
		#29 is "wolfamdctrl -i 5", so it`s useless to do
		
		if [[ $ALT -ne 1 ]]; then 
			if [[ ! -z ${MEMORY_VOLTAGE[$i]} && ! -z ${MEMORY_STATE[$i]} && ! -z ${MEMORY_CLOCK[$i]} ]]; then
				mem_str="m ${MEMORY_STATE[$i]} ${MEMORY_CLOCK[$i]} ${MEMORY_VOLTAGE[$i]}"
				echo "$mem_str > $coreAddr/pp_od_clk_voltage"
				echo "$mem_str" >$coreAddr/pp_od_clk_voltage
				echo "c" > $coreAddr/pp_od_clk_voltage
			fi
		fi

		if [[ $MEMORY_TWEAK_TYPE == 0 ]]; then
			amdmemtweak --i $i $MEMORY_TWEAK
		else
			#no need to use if args are too short
			[[ ${#MEMORY_TWEAK[$i]} -gt 4 ]] && amdmemtweak --i $i ${MEMORY_TWEAK[$i]} || echo -e "${RED}There are no AMDMemTweak settings for this card${WHITE}"
		fi

		
		if [[ $name == *"Vega"* ]]; then
			#echo "manual" >$coreAddr/power_dpm_force_performance_level
			#echo 4 >$coreAddr/pp_power_profile_mode

			echo "echo auto > $coreAddr/power_dpm_force_performance_level"
			echo "auto" > $coreAddr/power_dpm_force_performance_level	
		else
			if [[ $ENHANCED -eq 1 && $name != *"Vega"* ]]; then
				echo auto > $coreAddr/power_dpm_force_performance_level
				echo -e "${CYAN}Auto${WHITE} Core State selection (because of Enhanced OC)"
			elif [[ $ms_trigger -eq 1 && $cs_trigger -eq 1 ]]; then
				echo auto > $coreAddr/power_dpm_force_performance_level
				echo -e "${CYAN}Auto${WHITE} Core State selection (no states given)"
			else
				echo manual > $coreAddr/power_dpm_force_performance_level
				#Core & Memory states selection
				if [[ $cs_trigger -ne 1 ]]; then #if core state given
					echo -e "${CYAN}Manual${WHITE} Core State selection (${CYAN}P${CORE_STATE[$i]}${WHITE})."
					echo ${CORE_STATE[$i]} > $coreAddr/pp_dpm_sclk
				fi

				if [[ $ms_trigger -ne 1 ]]; then
					echo -e "${CYAN}Manual${WHITE} Memory State selection (${CYAN}P${MEMORY_STATE[$i]}${WHITE})."
					echo ${MEMORY_STATE[$i]} > $coreAddr/pp_dpm_mclk
				fi
			fi
		fi
	#elif [[ $name == *"5700"* || $name == *"5500"* || $name == *"5600"* ]]; then
	else #this is NAVI
		#echo "It\`s 5700!"
		echo "manual" > $coreAddr/power_dpm_force_performance_level
		uppArgs="smc_pptable/FanStopTemp=0 "
		uppArgs+="smc_pptable/FanStartTemp=0 "
		uppArgs+="smc_pptable/FanZeroRpmEnable=0 "
		uppArgs+="smc_pptable/MinVoltageGfx=2800 "
		#uppArgs+="smc_pptable/MinVoltageSoc=2800 "
		#upp -p /sys/class/drm/card7/device/pp_table dump | grep Soc
		if [[ ! -z ${SOC_VDD_MAX[$i]} ]]; then
			if [[ ${SOC_VDD_MAX[$i]} -ge $NAVI_VDDCI_MIN && ${SOC_VDD_MAX[$i]} -le $NAVI_VDDCI_MAX ]]; then
		   		soc_vdd_max=$((${SOC_VDD_MAX[$i]} * 4 ))
				uppArgs+="smc_pptable/MaxVoltageSoc=$soc_vdd_max "
	   		fi
		fi

		if [[ ! -z ${SOC_CLK_MAX[$i]} ]]; then
			uppArgs+="smc_pptable/FreqTableSocclk/1=${SOC_CLK_MAX[$i]} "
			uppArgs+="smc_pptable/FreqTableSocclk/2=${SOC_CLK_MAX[$i]} "
			uppArgs+="smc_pptable/FreqTableSocclk/3=${SOC_CLK_MAX[$i]} "
		fi

		if [[ ${VDDCI[$i]} -ge $NAVI_VDDCI_MIN && ${VDDCI[$i]} -le $NAVI_VDDCI_MAX ]]; then
       		vlt_vddci=$((${VDDCI[$i]} * 4 ))
			uppArgs+="smc_pptable/MemVddciVoltage/1=${vlt_vddci} "
			uppArgs+="smc_pptable/MemVddciVoltage/2=${vlt_vddci} "
			uppArgs+="smc_pptable/MemVddciVoltage/3=${vlt_vddci} "
   		fi
	    if [[ ${MEMORY_VOLTAGE[$i]} -ge $NAVI_MVDD_MIN && ${MEMORY_VOLTAGE[$i]} -le $NAVI_MVDD_MAX ]]; then
			vlt_mvdd=$((${MVDD[$i]} * 4 ))
			uppArgs+="smc_pptable/MemMvddVoltage/1=${vlt_mvdd} "
			uppArgs+="smc_pptable/MemMvddVoltage/2=${vlt_mvdd} "
			uppArgs+="smc_pptable/MemMvddVoltage/3=${vlt_mvdd} "
    	fi
		uppArgs+="overdrive_table/max/8=960 "
		uppArgs+="overdrive_table/min/3=700 "
		uppArgs+="overdrive_table/min/5=700 "
		uppArgs+="overdrive_table/min/7=700"

		#echo "upp -p $coreAddr/pp_table set $uppArgs --write"
		upp -p $coreAddr/pp_table set $uppArgs --write

		echo "m 1 ${MEMORY_CLOCK[$i]}" > $coreAddr/pp_od_clk_voltage

		if [[ ! -z ${CORE_CLOCK[$i]} ]]; then
			echo "s 1 ${CORE_CLOCK[$i]}" > $coreAddr/pp_od_clk_voltage

			if [[ ! -z ${CORE_VOLTAGE[$i]} ]]; then
				[[ ${CORE_VOLTAGE[$i]} -gt 725 ]] &&
					echo "vc 1 $((${CORE_CLOCK[$i]}-100)) $((${CORE_VOLTAGE[$i]}-25))" > $coreAddr/pp_od_clk_voltage
				echo "vc 2 ${CORE_CLOCK[$i]} ${CORE_VOLTAGE[$i]}" > $coreAddr/pp_od_clk_voltage
				echo c > $coreAddr/pp_od_clk_voltage
			fi
		fi
		echo "c" >$coreAddr/pp_od_clk_voltage
	fi

	#Fan section
	if (( ${FAN[$i]} == "A" )); then
		echo -e "${CYAN}Auto${WHITE} fan."
		echo 0 > $fanAddr/pwm1_enable
	else 
		echo -e "${CYAN}Manual${WHITE} fan (${FAN[$i]})." 
		echo 1 > $fanAddr/pwm1_enable
		if [[ $name == *"Vega@@@"* ]]; then #Need to check
			rpm_min=`cat $fanAddr/fan1_min`
			rpm_max=`cat $fanAddr/fan1_max`
			fan_target=`echo "scale=0; ${FAN[$i]} * $rpm_max / 100" | bc -l`
			[[ $fan_target -ge $rpm_max ]] && fan_target=`echo "$rpm_max - 1" | bc -l`
			[[ $fan_target -lt $rpm_min ]] && fan_target=`echo "$rpm_min + 1" | bc -l`
			echo $fan_target >$fanAddr/fan1_target
		else
			let fan_adapted[$i]=`echo "scale=0; ${FAN[$i]}*255/100" | bc -l` #fan power is beetween 0 and 255
			echo ${fan_adapted[$i]} > $fanAddr/pwm1
		fi
	fi

	echo -e $BROWN"================================================================"$WHITE
	(( y++ ))
	unset cs_trigger ms_trigger
	#fi
done

rm $LOCK_FILE
