#!/bin/bash
[ -t 1 ] && . colors #source colors only if running in terminal
AMD_CFG="/sobaka/cfg/amd.cfg"
AMDMEMINFO_FILE=/tmp/amdmeminfo
[[ ! -f $AMDMEMINFO_FILE ]] && amdmeminfo -q -s > $AMDMEMINFO_FILE
LOCK_FILE="/tmp/.amd-oc.lock"

function getdata () {
	for option in core_clock core_state core_voltage memory_clock memory_state memory_tweak fan; do
		if [[ `echo $1 | jq ".$option"` != null ]]; then
			option_value="`echo $1 | jq -r \".$option\"`" #double slash, because eval open it
			eval "${option^^}=\"$option_value\""
		fi
	done
}

if  [[ -e $LOCK_FILE ]]; then
	pid=`cat $LOCK_FILE`
	ps --pid $pid &>/dev/null
	[[ $? == 0 ]] && echo -e "${RED}It seems another copy of AMD Overclocking script is already running\nCooldown a bit :)${WHITE}" && exit 1
fi

echo $$ > $LOCK_FILE

n=$(gpu-detect AMD)
[[ $n == 0 ]]&& echo $(date --rfc-3339=seconds)" no AMD GPU(s) detected, exiting" && exit 1
echo -e $(date --rfc-3339=seconds)" $n "$LIGHTRED"AMD"$WHITE" GPU detected"

if [[ ! -z $1 ]]; then
	echo "Overclocking config given in arguments"
	getdata "$1"
else
	[[ ! -f $AMD_CFG ]]&& echo $(date --rfc-3339=seconds)" configuration file $AMD_CFG does not exist, exiting" && exit 1
	cfg=`cat $AMD_CFG`
	echo $cfg | jq '.'  > /dev/null 2>&1
	exitcode="$?"
	if [[ $exitcode -eq 0 ]]; then
		echo "Overclocking config in JSON format (or empty)"
		getdata "$cfg"
	else
		echo "OverClocking config in BASH format"
		. $AMD_CFG
	fi
fi

#OC arrays
CORE_CLOCK=($CORE_CLOCK)
CORE_STATE=($CORE_STATE)
CORE_VOLTAGE=($CORE_VOLTAGE)
MEMORY_CLOCK=($MEMORY_CLOCK)
MEMORY_STATE=($MEMORY_STATE)

[[ ! $FAN ]]&& FAN[0]="A"
FAN=($FAN)

for (( i=0; i < $n; ++i )); do
	[[ ! ${CORE_CLOCK[$i]} && ! -z ${CORE_CLOCK[0]} ]]&& CORE_CLOCK[$i]=${CORE_CLOCK[-1]}
	[[ ! ${CORE_STATE[$i]} && ! -z ${CORE_STATE[0]} ]]&& CORE_STATE[$i]=${CORE_STATE[-1]}
	[[ ! ${CORE_VOLTAGE[$i]} && ! -z ${CORE_VOLTAGE[0]} ]]&& CORE_VOLTAGE[$i]=${CORE_VOLTAGE[-1]}
	[[ ! ${MEMORY_CLOCK[$i]} && ! -z ${MEMORY_CLOCK[0]} ]]&& MEMORY_CLOCK[$i]=${MEMORY_CLOCK[-1]}
	[[ ! ${MEMORY_STATE[$i]} && ! -z ${MEMORY_STATE[0]} ]]&& MEMORY_STATE[$i]=${MEMORY_STATE[-1]}
	[[ ! ${FAN[$i]} && ! -z ${FAN[0]} ]]&& FAN[$i]=${FAN[-1]}
done

echo "Trying to apply next settings:"
echo -e ${CYAN}"Core Clock:${WHITE}\t${CORE_CLOCK[@]}"
echo -e ${CYAN}"Core State:${WHITE}\t${CORE_STATE[@]}"
echo -e ${CYAN}"Core Voltage:${WHITE}\t${CORE_VOLTAGE[@]}"
echo -e ${CYAN}"Memory Clock:${WHITE}\t${MEMORY_CLOCK[@]}"
echo -e ${CYAN}"Memory State:${WHITE}\t${MEMORY_STATE[@]}"
echo -e ${CYAN}"Memory Tweak:${WHITE}\t${MEMORY_TWEAK[@]}"
echo -e ${CYAN}"Fan:${WHITE}\t\t${FAN[@]}"
[ -t 1 ] && echo -e ${ITALIC}"*If there is not enough settings (i.e. you try to apply FAN 70 70 50,\nbut you have 5 GPU, last 2 GPU will use last available value = 50)"${WHITE}
echo -e $BROWN"================================================================"$WHITE

core_addr_raw=(`ls -d /sys/class/drm/card[0-9]*/device | egrep 'card[0-9]{1,2}/'`)

for (( i=0; i < ${#core_addr_raw[@]}; i++ )); do
	gpu_busid_raw[$i]=$(cat ${core_addr_raw[$i]}/uevent | grep "PCI_SLOT_NAME" | sed 's/.*0000:\([0-9abcdefABCDEF]*\):.*/\1/')
done

IFS=$'\n' gpu_busid_sys=($(sort <<<"${gpu_busid_raw[*]}"))
unset IFS

for (( i=0; i < ${#gpu_busid_raw[@]}; i++ )) do
	for (( y=0; y < ${#gpu_busid_raw[@]}; y++ )) do
		[[ ${gpu_busid_sys[$i]} == ${gpu_busid_raw[$y]} ]] && core_addr[$i]=${core_addr_raw[$y]} && break
	done
done

#restoring default pp_table
#if [[ -z $1 && $1 -ne "--firstrun" ]]; then
#	for ppfile in /tmp/pp_tables/card*/pp_table ; do
#		card=$(echo $ppfile | sed 's/.*card\([0-9]*\).*/\1/')
#		[[ -z $card ]] && echo "Can\`t find saved Power Play table. Try to reboot" && continue
#		dir="/sys/class/drm/card$card/device/pp_table"
#		[[ -z $dir ]] && echo "Can\`t find existing Power Play table. Try to reboot" && continue
#		cp $ppfile $dir
#		echo "Copying pp_table to $dir"
#	done
#fi
y=0 #not all $i are amdgpu cards
for (( i=0; i < ${#core_addr[@]}; i++ )); do
	if [ $(cat ${core_addr[$i]}/uevent | grep "DRIVER" | sed -e 's/DRIVER\=\([a-z]*\)/\1/') == amdgpu ]; then #GPU is AMD
		#####################################################
		#Core, mem, volt settings
		#####################################################
		#wolfamdctrl -i 0 --mem-state 2 --mem-clock 2000 --core-state 4 --core-clock 1100 --volt-state 4 --vddc-table-set 900
		#wolfamdctrl -i /sys/class/drm/card5/device --core-state 3 --core-clock 1100 also works
		card=$(echo ${core_addr[$i]} | sed 's/\/sys\/class\/drm\/card\([0-9]*\)\/device/\1/')
		gpu_name[$i]=$(cat $AMDMEMINFO_FILE | grep $(echo ${gpu_busid_sys[$i]}".00.0") | awk -F":" '{ print $3 }')
		echo -e "${LIGHTRED}GPU $y: ${gpu_name[$i]}${WHITE} (${core_addr[$i]})"
		if [[ ${gpu_name[$i]} == *"Vega"* ]]; then
			#echo "This is Vega"
			script="vegatool"
		else
			script="wolfamdctrl"
		fi

		#####################################################
		#Core State section
		#####################################################
		if [[ ${CORE_STATE[$y]} == "A" || ! ${CORE_STATE[$y]} ]]; then
			echo -e "${CYAN}Auto${WHITE} Core State selection."
			echo auto > ${core_addr[$i]}/power_dpm_force_performance_level
		else 
			echo -e "${CYAN}Manual${WHITE} Core State selection (${CYAN}P${CORE_STATE[$y]}${WHITE})."
			echo manual > ${core_addr[$i]}/power_dpm_force_performance_level
			echo ${CORE_STATE[$y]} > ${core_addr[$i]}/pp_dpm_sclk
		fi
		#echo "Card $card, ${core_addr[$i]}"
		str="$script -i $card"
		if [[ ! -z ${CORE_STATE[$y]} && ! ${CORE_STATE[$y]} == "A" ]]; then
			str=$str" --core-state ${CORE_STATE[$y]}"
			[[ ${CORE_CLOCK[$y]} ]]&& str=$str" --core-clock ${CORE_CLOCK[$y]}"
			if [ ${CORE_VOLTAGE[$y]} ]; then
				volt_state=`echo -e $($script -i $card --show-core | grep "DPM state ${CORE_STATE[$y]}" -A1) \
				| sed -e 's/)//g; s/.*entry \([0-9]*\)/\1/'`
				str=$str" --volt-state $volt_state --vddc-table-set ${CORE_VOLTAGE[$y]}"
			fi
		else
			if [ ${CORE_VOLTAGE[$y]} ]; then
				default_clock=`cat "${core_addr[$i]}/pp_dpm_sclk" | grep \* | sed -e 's/*//; s/:.*//'`
				volt_state=`echo -e $($script -i $card --show-core | grep "DPM state $default_clock" -A1) \
				| sed -e 's/)//g; s/.*entry \([0-9]*\)/\1/'`
				str=$str" --volt-state $volt_state --vddc-table-set ${CORE_VOLTAGE[$y]}"
			fi
		fi
		if [ ${MEMORY_STATE[$y]} ]; then
			str=$str" --mem-state ${MEMORY_STATE[$y]}"
			[[ ${MEMORY_CLOCK[$y]} ]]&&	str=$str" --mem-clock ${MEMORY_CLOCK[$y]}"
		elif [ ${MEMORY_CLOCK[$y]} ]; then #mem clock is set, stat isn`t
			default_mem_state=`cat "${core_addr[$i]}/pp_dpm_mclk" | grep \* | sed -e 's/*//; s/:.*//'`
			echo "GPU$y Memory State isn\`t set, using current state ("$default_mem_state")"
			str=$str" --mem-state $default_mem_state --mem-clock ${MEMORY_CLOCK[$y]}"
		fi
		[[ $(echo $str | awk '{print length}') -gt 30 ]] && bash -c "$str"
		#29 is "wolfamdctrl -i 5", so it`s useless to do
		amdmemtweak --i $y $MEMORY_TWEAK
		#####################################################
		#Fan section
		#####################################################
		fan_addr[$i]=$(ls -d ${core_addr[$i]}/hwmon/hwmon[0-9]*)
		if (( ${FAN[$y]} == "A" )); then
			echo -e "${CYAN}Auto${WHITE} fan."
			echo 0 > ${fan_addr[$i]}/pwm1_enable
		else 
			echo -e "${CYAN}Manual${WHITE} fan (${FAN[$y]})." 
			echo 1 > ${fan_addr[$i]}/pwm1_enable
			if [[ ${gpu_name[$i]} == *"Vega"* ]]; then
				rpm_min=`cat ${fan_addr[$i]}/fan1_min`
				rpm_max=`cat ${fan_addr[$i]}/fan1_max`
				fan_target=`echo "scale=0; ${FAN[$y]} * $rpm_max / 100" | bc -l`
				[[ $fan_target -ge $rpm_max ]] && fan_target=`echo "$rpm_max - 1" | bc -l`
				[[ $fan_target -lt $rpm_min ]] && fan_target=`echo "$rpm_min + 1" | bc -l`
				#echo "Fan target: $fan_target"
				echo $fan_target > ${fan_addr[$i]}/fan1_target
			else
				let fan_adapted[$i]=${FAN[$y]}*255/100 #fan power is beetween 0 and 255
				echo ${fan_adapted[$i]} > ${fan_addr[$i]}/pwm1
			fi
		fi
		echo -e $BROWN"================================================================"$WHITE
		(( y++ ))
	fi
done

rm $LOCK_FILE
