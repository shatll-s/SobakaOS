#!/bin/bash
. colors
NV_STOP_TRIGGER="/run/dog/nvidia_stop_trigger"
ASW_TRIGGER="/run/dog/asw_trigger"
RIG_CFG="/dog/cfg/rig.cfg"

function services_stop () {
	try_count=3
	[[ ! -z $1 ]] && try_count=$1
	echo -e "${CYAN}> Stopping services${WHITE}"
	echo 1 > $NV_STOP_TRIGGER

	for (( i=0; i < $try_count; i++ ))
	do
		wd stop > /dev/null 2>&1
		systemctl stop mining 
		systemctl stop dogx #> /dev/null 2>&1
		systemctl stop af
		if [[ $(screen-check asw) -gt 0 ]]; then
			echo 1 > $ASW_TRIGGER
			screen-kill asw
		fi

		killall -9 xinit > /dev/null 2>&1
		rmmod -f nvidia_uvm > /dev/null 2>&1
		rmmod -f nvidia_drm > /dev/null 2>&1
		rmmod -f nvidia_modeset > /dev/null 2>&1
		rmmod -f nvidia > /dev/null 2>&1
		sleep 1
		count_nvidia=`lsmod | grep -c nvidia`
		if [[ $count_nvidia -eq 0 ]]; then
			echo -e "${GREEN}> Unload modules successfull${WHITE}"
			return 0
		fi
	done
	echo -e "${RED}> Unload modules failed${WHITE}"
	return 1
}

function services_start () {
	. $RIG_CFG
	rm -f $NV_STOP_TRIGGER
	echo -e "${CYAN}> Turning all services on${WHITE}"
	modprobe nvidia-drm
	if [[ $USE_GRAPHIC == 1 || -z $USE_GRAPHIC ]]; then
		if [[ `gpu-detect AMD` -lt 8 ]]; then
			echo "> Starting OSdog Xserver"
			sudo systemctl start dogx
			sleep 10
		else
			echo "> Don\`t start OSdog Xserver (there are 8+ AMD GPUs)"
		fi
	else
		echo "> Don\`t start OSdog Xserver (due to settings)"
		sudo systemctl start dog-console
	fi

	systemctl start mining
	systemctl start wd
	systemctl start af
	[[ -f $ASW_TRIGGER && `cat $ASW_TRIGGER` -eq 1 ]] && asw restart
	return 0
}

function get_biosver () {
	[[ -z $1 ]] && echo -e "${RED}Not enough arguments, exiting${WHITE}" && return 1
	gpu_i=$1

	bios_ver=`nvflash -i $gpu_i -v | grep "^Version" | awk -F ': ' '{print $2}'`
	[[ -z $bios_ver ]] && echo -e "${RED}Error while getting BIOS version. May be wrong GPU id? Exiting${WHITE}" && return 1
	
	echo $bios_ver
}

function save_bios () {
	[[ -z $1 ]] && echo -e "${RED}Not enough arguments, exiting${WHITE}" && return 1
	gpu_i=$1

	if [[ ! -z $2 ]]; then
		file=$2
	else
		bios_ver=`get_biosver $gpu_i`
		[[ -z $bios_ver ]] && echo -e "${RED}Error while getting BIOS version. May be wrong GPU id? Exiting${WHITE}" && return 1
		file="/tmp/${bios_ver}.rom"
	fi
	
	nvflash -i $gpu_i -b $file
	exitcode=$?
	[[ $exitcode -eq 0 ]] && echo -e "${GREEN}Bios saved to $file${WHITE}" || echo -e "${RED}Error occured while saving bios${WHITE}"
}

function flash_bios () {
	[[ -z $1 || -z $2 ]] && echo -e "${RED}Not enough arguments \"$*\", exiting${WHITE}" && return 1
	gpu_i=$1
	file=$2
	[[ ! -z $3 ]] && add=$3
	
	echo "Starting autoflash with arguments \"$*\""
	#exp_internal 1
	#set timeout -1
	expect -c "
		set timeout 10
		spawn nvflash -i $gpu_i $file "$add"
		expect -re \".*Press 'y' to confirm.*\"
		send \"y\"
		expect eof
	"
}

case $1 in
	services_start|start)
		services_start
	;;
	services_stop|stop)
		services_stop
	;;
	get_bios|bios_ver)
		get_biosver $2
	;;
	save_bios|save)
		save_bios $2 $3
	;;
	flash_bios|flash)
		flash_bios $2 $3 $4
	;;
	*)
		bname=`basename $0`
		echo -e "Usage: ${CYAN}$bname start|stop|save gpu_id file|get_bios gpu_id${WHITE}"
		echo -e "  start, services_start\t\tStart mining, X-server, load Nvidia modules"
		echo -e "  stop, services_stop\t\tStop mining, X-server, load Nvidia modules"
		echo -e "  get_bios, bios_ver gpu_id\tGet bios version "
		echo -e "  save, save_bios gpu_id file\tSave Nvidia GPU bios"
	;;
esac
