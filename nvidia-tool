#!/bin/bash
. colors
NV_STOP_TRIGGER="/run/dog/nvidia_stop_trigger"
RO_TRIGGER="/run/dog/ro_trigger"
ASW_TRIGGER="/run/dog/asw_trigger"
RIG_CFG="/dog/cfg/rig.cfg"

function services_stop () {
	try_count=10
	[[ ! -z $1 ]] && try_count=$1
	echo -e "${CYAN}> Stopping services${WHITE}"

	#kill 3rd party hujnia
	. $RIG_CFG
	if [[ $THIRDPARTY_RIGONLINE -eq 1 ]]; then
		sed -i "s/.*THIRDPARTY_RIGONLINE=.*/THIRDPARTY_RIGONLINE=0/g" $RIG_CFG
		echo 1 > $RO_TRIGGER
	fi
	[[ `screen-check 3dparty_rigonline` -ne 0 ]] && screen-kill 3dparty_rigonline

	echo 1 > $NV_STOP_TRIGGER
	
	for (( i=0; i < $try_count; i++ ))
	do
		wd stop > /dev/null 2>&1
		systemctl stop mining 
		systemctl stop dogx #> /dev/null 2>&1
		systemctl stop af
		if [[ $(screen-check asw) -gt 0 ]]; then
			echo 1 > $ASW_TRIGGER
			screen-kill asw
		fi

		killall -9 xinit > /dev/null 2>&1
		rmmod -f nvidia_uvm > /dev/null 2>&1
		rmmod -f nvidia_drm > /dev/null 2>&1
		rmmod -f nvidia_modeset > /dev/null 2>&1
		rmmod -f nvidia > /dev/null 2>&1
		sleep 1
		count_nvidia=`lsmod | grep -c nvidia`
		if [[ $count_nvidia -eq 0 ]]; then
			echo -e "${GREEN}> Unload modules successfull${WHITE}"
			return 0
		fi
	done
	echo -e "${RED}> Unload modules failed${WHITE}"
	return 1
}

function services_start () {
	. $RIG_CFG
	rm -f $NV_STOP_TRIGGER
	echo -e "${CYAN}> Turning all services on${WHITE}"
	modprobe nvidia-drm
	if [[ $USE_GRAPHIC == 1 || -z $USE_GRAPHIC ]]; then
		if [[ `gpu-detect AMD` -lt 8 ]]; then
			echo "> Starting OSdog Xserver"
			sudo systemctl start dogx
			sleep 10
		else
			echo "> Don\`t start OSdog Xserver (there are 8+ AMD GPUs)"
		fi
	else
		echo "> Don\`t start OSdog Xserver (due to settings)"
		sudo systemctl start dog-console
	fi

	systemctl start mining
	systemctl start wd
	systemctl start af
	[[ -f $ASW_TRIGGER && `cat $ASW_TRIGGER` -eq 1 ]] && asw restart

	#resume 3rd party hujnia
	if [[ -f $RO_TRIGGER ]]; then
		[[ ! -z $(grep "THIRDPARTY_RIGONLINE=" $RIG_CFG) ]]&& sed -i "s/.*THIRDPARTY_RIGONLINE=.*/THIRDPARTY_RIGONLINE=1/g" $RIG_CFG || echo "THIRDPARTY_RIGONLINE=1" >> $RIG_CFG
		rm $NV_STOP_TRIGGER
	fi
	[[ `screen-check 3dparty_rigonline` -ne 0 ]] && screen-kill 3dparty_rigonline
	return 0
}

function get_biosver () {
	[[ -z $1 ]] && echo -e "${RED}Not enough arguments, exiting${WHITE}" && return 1
	gpu_i=$1

	bios_ver=`nvflash -i $gpu_i -v | grep "^Version" | awk -F ': ' '{print $2}'`
	[[ -z $bios_ver ]] && echo -e "${RED}Error while getting BIOS version. May be wrong GPU id? Exiting${WHITE}" && return 1
	
	echo $bios_ver
}

function save_bios () {
	[[ -z $1 ]] && echo -e "${RED}Not enough arguments, exiting${WHITE}" && return 1
	gpu_i=$1

	if [[ ! -z $2 ]]; then
		file=$2
	else
		bios_ver=`get_biosver $gpu_i`
		[[ -z $bios_ver ]] && echo -e "${RED}Error while getting BIOS version. May be wrong GPU id? Exiting${WHITE}" && return 1
		file="/tmp/${bios_ver}.rom"
	fi
	
	nvflash -i $gpu_i -b $file
	exitcode=$?
	[[ $exitcode -eq 0 ]] && echo -e "${GREEN}Bios saved to $file${WHITE}" || echo -e "${RED}Error occured while saving bios${WHITE}"
}

function flash_bios () {
	[[ -z $1 || -z $2 ]] && echo -e "${RED}Not enough arguments \"$*\", exiting${WHITE}" && return 1
	gpu_i=$1
	file=$2
	[[ ! -z $3 ]] && add="$3"
	[[ -z `dpkg -l | grep expect | awk '{print $3}'` ]] && echo "Need to install some packages" && apt-get install -y expect
	echo "Starting autoflash with arguments \"$*\""
	#exp_internal 1
	#set timeout -1
	#Press y to confirm, press y to confirm override PCI subsystem ID
	expect -c "
		set timeout -1		
		spawn nvflash -i $gpu_i $file $add
		while { true } {
			expect {
				-re \".*ress 'y' to confirm.*\" { send \"y\" }
				-re \".*reboot is required.*\" { exit }
				-re \".*ERROR.*\" { exit }
				-re \".*Firmware image filename must have a valid extension.*\" { exit }
			}
		}
	"
}

function driver_install () {
	url=$1
	
	df=`df | grep "/$" | awk '{print $4}'`
	[[ $df -lt 500000 ]] && echo -e "${RED}You don\`t have enough disk space. Try to delete something or disk-expand. Exiting...${WHITE}" && exit 1
		
	if [[ -z $url ]]; then
		echo -e "${CYAN}> Getting the latest version${WHITE}"
		versions_url="https://os.dog/downloads/drivers/driver_versions.txt"
		versions=`curl -sLk $versions_url`
		[[ -z $versions ]] && echo -e "${RED}Error downloading versions from $versions_url${WHITE}" && return 1
		eval "$versions"
		url="https://os.dog/downloads/drivers/${LATEST_NVIDIA}"
	fi

	current_driver=`nvidia-smi | grep "Driver Version" | sed 's/.*Driver Version: \([0-9.]*\)\s.*/\1/'`
	echo -e "Current driver:\t${GREEN}$current_driver${WHITE}"
	echo -e "New driver:\t${GREEN}${LATEST_NVIDIA}${WHITE}"
	echo -e "Are you really want to update driver? y/n"
	read answer
	if [[ $answer != 'y' &&  $answer != 'yes' && $answer != 'Y' && $answer && 'Yes' ]]; then
		echo -e "${RED}OK, bye!${WHITE}"
		exit 1
	fi
	services_stop

	cd "/dog/downloads"
	driver_name=`basename $url`

	if [[ -e ./$driver_name ]]; then
		echo -e "${CYAN}> Driver $driver_name is already downloaded${WHITE}"
	else
		echo -e "${CYAN}> Downloading $url${WHITE}"
		rm -f "/tmp/$driver_name"
		wget -c $url -O "/tmp/$driver_name" #`[ -t 0 ] && echo '--no-verbose'`
		mv "/tmp/$driver_name" "/dog/downloads/$driver_name"
		[[ $? -ne 0 ]] && echo -e "${RED}Error downloading driver${WHITE}" && exit 1
	fi


	echo -e "${CYAN}> Installing${WHITE}"
	#apt update
	#apt-get install -y dkms
	sh "$driver_name" --accept-license --no-questions --ui=none --install-libglvnd #--dkms 
	exitcode=$?
	hello

	if [[ $exitcode -eq 0 ]]; then
			echo -e ""
			echo -e "${CYAN}> Updating nvidia-settings${WHITE}"
			apt update
			nvidia_settings_version=`dpkg -s nvidia-settings 2>&1 | grep '^Version: ' | sed 's/Version: //'`
			if [[ -z "$nvidia_settings_version" ]]; then
				echo -e "nvidia-setting is not installed, installing"
				apt-get install --reinstall -y nvidia-settings
			else
				echo -e "nvidia-setting is installed, upgrading"
				apt-get install --only-upgrade --reinstall -y nvidia-settings
			fi
			services_start
			echo -e "${GREEN}Installation complete, reboot please${WHITE}"
	else
		services_start
		echo -e "${RED}Error installing driver${WHITE}" && exit 1
	fi
}

case $1 in
	services_start|start)
		services_start
	;;
	services_stop|stop)
		services_stop
	;;
	get_bios|bios_ver)
		get_biosver $2
	;;
	save_bios|save)
		save_bios $2 $3
	;;
	flash_bios|flash)
		flash_bios $2 $3 "$4"
	;;
	driver_install|update)
		driver_install $2
	;;
	*)
		bname=`basename $0`
		echo -e "Usage: ${CYAN}$bname start|stop|install|save gpu_id file|get_bios gpu_id${WHITE}"
		echo -e "  start, services_start\t\tStart mining, X-server, load Nvidia modules"
		echo -e "  stop, services_stop\t\tStop mining, X-server, load Nvidia modules"
		echo -e "  get_bios, bios_ver gpu_id\tGet bios version "
		echo -e "  save, save_bios gpu_id file\tSave Nvidia GPU bios"
		echo -e "  update, driver_install\tUpdate Nvidia driver to latest or argument version"
		echo -e "  \t\t\t\te .g. nvidia-tool update http://ru.download.nvidia.com/XFree86/Linux-x86_64/418.56/NVIDIA-Linux-x86_64-418.56.run"
	;;
esac
