#!/bin/bash
. colors
NV_STOP_TRIGGER="/run/dog/nvidia_stop_trigger"
RO_TRIGGER="/run/dog/ro_trigger"
ASW_TRIGGER="/run/dog/asw_trigger"
RIG_CFG="/dog/cfg/rig.cfg"

function services_stop () {
	try_count=10
	[[ ! -z $1 ]] && try_count=$1
	echo -e "${CYAN}> Stopping services${WHITE}"

	#kill 3rd party hujnia
	. $RIG_CFG
	if [[ $THIRDPARTY_RIGONLINE -eq 1 ]]; then
		sed -i "s/.*THIRDPARTY_RIGONLINE=.*/THIRDPARTY_RIGONLINE=0/g" $RIG_CFG
		echo 1 > $RO_TRIGGER
	fi
	[[ `screen-check 3dparty_rigonline` -ne 0 ]] && screen-kill 3dparty_rigonline

	echo 1 > $NV_STOP_TRIGGER
	
	for (( i=0; i < $try_count; i++ ))
	do
		wd stop > /dev/null 2>&1
		systemctl stop mining 
		systemctl stop dogx #> /dev/null 2>&1
		systemctl stop af
		if [[ $(screen-check asw) -gt 0 ]]; then
			echo 1 > $ASW_TRIGGER
			screen-kill asw
		fi

		killall -9 xinit > /dev/null 2>&1
		rmmod -f nvidia_uvm > /dev/null 2>&1
		rmmod -f nvidia_drm > /dev/null 2>&1
		rmmod -f nvidia_modeset > /dev/null 2>&1
		rmmod -f nvidia > /dev/null 2>&1
		sleep 1
		count_nvidia=`lsmod | grep -c nvidia`
		if [[ $count_nvidia -eq 0 ]]; then
			echo -e "${GREEN}> Unload modules successfull${WHITE}"
			return 0
		fi
	done
	echo -e "${RED}> Unload modules failed${WHITE}"
	return 1
}

function services_start () {
	. $RIG_CFG
	rm -f $NV_STOP_TRIGGER
	echo -e "${CYAN}> Turning all services on${WHITE}"
	modprobe nvidia-drm
	if [[ $USE_GRAPHIC == 1 || -z $USE_GRAPHIC ]]; then
		if [[ `gpu-detect AMD` -lt 8 ]]; then
			echo "> Starting OSdog Xserver"
			sudo systemctl start dogx
			sleep 10
		else
			echo "> Don\`t start OSdog Xserver (there are 8+ AMD GPUs)"
		fi
	else
		echo "> Don\`t start OSdog Xserver (due to settings)"
		sudo systemctl start dog-console
	fi

	systemctl start mining
	systemctl start wd
	systemctl start af
	[[ -f $ASW_TRIGGER && `cat $ASW_TRIGGER` -eq 1 ]] && asw restart

	#resume 3rd party hujnia
	if [[ -f $RO_TRIGGER ]]; then
		[[ ! -z $(grep "THIRDPARTY_RIGONLINE=" $RIG_CFG) ]]&& sed -i "s/.*THIRDPARTY_RIGONLINE=.*/THIRDPARTY_RIGONLINE=1/g" $RIG_CFG || echo "THIRDPARTY_RIGONLINE=1" >> $RIG_CFG
		rm $NV_STOP_TRIGGER
	fi
	[[ `screen-check 3dparty_rigonline` -ne 0 ]] && screen-kill 3dparty_rigonline
	return 0
}

function get_biosver () {
	[[ -z $1 ]] && echo -e "${RED}Not enough arguments, exiting${WHITE}" && return 1
	gpu_i=$1

	bios_ver=`nvflash -i $gpu_i -v | grep "^Version" | awk -F ': ' '{print $2}'`
	[[ -z $bios_ver ]] && echo -e "${RED}Error while getting BIOS version. May be wrong GPU id? Exiting${WHITE}" && return 1
	
	echo $bios_ver
}

function save_bios () {
	[[ -z $1 ]] && echo -e "${RED}Not enough arguments, exiting${WHITE}" && return 1
	gpu_i=$1

	if [[ ! -z $2 ]]; then
		file=$2
	else
		bios_ver=`get_biosver $gpu_i`
		[[ -z $bios_ver ]] && echo -e "${RED}Error while getting BIOS version. May be wrong GPU id? Exiting${WHITE}" && return 1
		file="/tmp/${bios_ver}.rom"
	fi
	
	nvflash -i $gpu_i -b $file
	exitcode=$?
	[[ $exitcode -eq 0 ]] && echo -e "${GREEN}Bios saved to $file${WHITE}" || echo -e "${RED}Error occured while saving bios${WHITE}"
}

function flash_bios () {
	[[ -z $1 || -z $2 ]] && echo -e "${RED}Not enough arguments \"$*\", exiting${WHITE}" && return 1
	gpu_i=$1
	file=$2
	[[ ! -z $3 ]] && add="$3"
	[[ -z `dpkg -l | grep expect | awk '{print $3}'` ]] && echo "Need to install some packages" && apt-get install -y expect
	echo "Starting autoflash with arguments \"$*\""
	#exp_internal 1
	#set timeout -1
	#Press y to confirm, press y to confirm override PCI subsystem ID
	expect -c "
		set timeout -1		
		spawn nvflash -i $gpu_i $file $add
		while { true } {
			expect {
				-re \".*ress 'y' to confirm.*\" { send \"y\" }
				-re \".*reboot is required.*\" { exit }
				-re \".*ERROR.*\" { exit }
				-re \".*Firmware image filename must have a valid extension.*\" { exit }
			}
		}
	"
}

function driver_install () {
	url=$1
	
	df=`df | grep "/$" | awk '{print $4}'`
	[[ $df -lt 500000 ]] && echo -e "${RED}You don\`t have enough disk space. Try to delete something or disk-expand. Exiting...${WHITE}" && exit 1
	current_driver=`nvidia-smi | grep "Driver Version" | sed 's/.*Driver Version: \([0-9.]*\)\s.*/\1/'`
	echo -e "Current driver:\t${GREEN}$current_driver${WHITE}"
	
	if [[ -z $url && $latestVer -ne 1 && $stableVer -ne 1 ]]; then
		echo -e "> Getting driver versions"
		local versions_url="https://os.dog/downloads/drivers/versions.php"
		local versions=`curl -sLk $versions_url | jq '.nvidia'`
		[[ -z $versions ]] && echo -e "${RED}Error downloading versions from $versions_url${WHITE}" && exit 1
		
		for (( i=0; i < `echo $versions | jq '. | length'`; i++ )); do
			local driverData=`echo $versions | jq ".[$i]"`
			local name=`echo $driverData | jq -r ".name"`
			local stable=`echo $driverData | jq -r ".stable"`
			local latest=`echo $driverData | jq -r ".latest"`
			
			local string="${BROWN}$i${WHITE}\t${LIGHTGREEN}$name${WHITE}\t"
			[[ `expr length $name` -lt 8 ]] && string+="\t"
			[[ $stable == true ]] && string+="${GREEN}stable${WHITE} " || string+="       "
			[[ $latest == true ]] && string+="${CYAN}latest${WHITE} " || string+="       "
			echo -e "$string"
		done
		
		echo -e "Select version to install:"
		read i

		numberFormat='^[0-9]+$'
		if ! [[ $i =~ $numberFormat ]] ; then
			echo -e "${RED}Error: you need to enter number here${WHITE}"
			exit 1
		fi
		
		local newDriver=`echo $versions | jq ".[$i]"`
		local name=`echo $newDriver | jq -r ".name"`
		local url=`echo $newDriver | jq -r ".url"`
	elif [[ $latestVer -eq 1 || $stableVer -eq 1 ]]; then
		echo -e "> Getting driver versions"
		versions_url="https://os.dog/downloads/drivers/versions.php"
		versions=`curl -sLk $versions_url | jq '.nvidia'`
		[[ -z $versions ]] && echo -e "${RED}Error downloading versions from $versions_url${WHITE}" && exit 1
		
		[[ $latestVer -eq 1 ]] && local newDriversArr=`echo $versions | jq "[.[] | select(.latest == true)]"` || local newDriversArr=`echo $versions | jq "[.[] | select(.stable == true)]"`
		
		[[ $newDriversArr == "[]" ]] && echo -e "${RED}Can\`t find compatible driver version for latest/stable option" && exit 1
		local newDriver=`echo $newDriversArr | jq .[-1]`
		local name=`echo $newDriver | jq -r ".name"`
		local url=`echo $newDriver | jq -r ".url"`
	else
		if ! [[ "$url" == *http* ||  "$url" == *ftp* || "$url" == */* || "$url" == *\.run ]]; then
			#echo "This is not link!"
			echo -e "> Getting driver versions"
			versions_url="https://os.dog/downloads/drivers/versions.php"
			versions=`curl -sLk $versions_url | jq '.nvidia'`
			[[ -z $versions ]] && echo -e "${RED}Error downloading versions from $versions_url${WHITE}" && exit 1
			
			local newDriversArr=`echo $versions | jq "[.[] | select(.name | contains(\"$url\"))]"`
			[[ $newDriversArr == "[]" ]] && echo -e "${RED}Can\`t find compatible driver version for option ${CYAN}$url${WHITE}" && exit 1
			local newDriver=`echo $newDriversArr | jq .[-1]`
			local name=`echo $newDriver | jq -r ".name"`
			local url=`echo $newDriver | jq -r ".url"`
		else
			name=`basename $url`
		fi
	fi
	echo -e "New driver:\t${GREEN}${name}${WHITE}"

	if [[ $yes -ne 1 ]]; then
		echo -e "Are you really want to update driver? y/n"
		read answer
		if [[ $answer != 'y' &&  $answer != 'yes' && $answer != 'Y' && $answer && 'Yes' ]]; then
			echo -e "${RED}OK, bye!${WHITE}"
			exit 1
		fi
	fi

	local driver_name=`basename $url`
	
	if [[ -e /dog/downloads/$driver_name && `stat -c %s /dog/downloads/$driver_name` -lt 100000000 ]]; then
		echo -e "${RED}> Driver $driver_name is already downloaded, but size is to low. May be this is not driver file?${WHITE}"
		exit 1
	elif [[ -e /dog/downloads/$driver_name ]]; then
		echo -e "${CYAN}> Driver $driver_name is already downloaded${WHITE}"
	else
		if [[ "$url" == *http* ||  "$url" == *ftp* ]]; then
			rm -f "/tmp/$driver_name"
			
			[ -t 1 ] && wget -c $url -O "/tmp/$driver_name" || wget -q -c $url -O "/tmp/$driver_name"
			[[ $? -ne 0 ]] && echo -e "${RED}> Download failed. Check url${WHITE}" && exit 1

			mv "/tmp/$driver_name" "/dog/downloads/$driver_name"
			[[ $? -ne 0 ]] && echo -e "${RED}> File move failed. Check file${WHITE}" && exit 1
		else
			[[ ! -f $url ]] && echo -e "${RED}> File not found. Check path${WHITE}" && exit 1
			cp -v "$url" /dog/downloads/$driver_name
			[[ $? -ne 0 ]] && echo -e "${RED}> Copy image failed${WHITE}" && exit 1
		fi
	fi

	services_stop
	echo -e "${CYAN}> Installing${WHITE}"
	#apt update
	#apt-get install -y dkms
	sh "/dog/downloads/$driver_name" --accept-license --no-questions --ui=none --install-libglvnd #--dkms 
	exitcode=$?
	hello

	if [[ $exitcode -eq 0 ]]; then
			echo -e ""
			echo -e "${CYAN}> Updating nvidia-settings${WHITE}"
			apt update
			nvidia_settings_version=`dpkg -s nvidia-settings 2>&1 | grep '^Version: ' | sed 's/Version: //'`
			if [[ -z "$nvidia_settings_version" ]]; then
				echo -e "nvidia-setting is not installed, installing"
				apt-get install --reinstall -y nvidia-settings
			else
				echo -e "nvidia-setting is installed, upgrading"
				apt-get install --only-upgrade --reinstall -y nvidia-settings
			fi
			services_start
			echo -e "${GREEN}Installation complete, reboot please${WHITE}"
	else
		services_start
		echo -e "${RED}Error installing driver${WHITE}" && exit 1
	fi
}

function showHelp () {
	bname=`basename $0`
	echo -e "Usage: ${CYAN}$bname [arg1 arg2 ...] command [url]${WHITE}"
	echo -e "  update\t\tUpdate driver to latest or argument version"
	echo -e "  start\t\t\tStart mining, X-server, load Nvidia modules"
	echo -e "  stop\t\t\tStop mining, X-server, unload Nvidia modules"
	echo -e "  get-bios gpu_id\tGet bios version"
	echo -e "  save-bios gpu_id file\tSave Nvidia GPU bios to file"
	echo ""
	echo -e "Common options:"
	echo -e "${GREEN}  -y|--yes                ${WHITE}Do not ask for confirmation, answer yes to all questions"
	echo -e "${GREEN}  -s|--stable             ${WHITE}Select stable driver"
	echo -e "${GREEN}  -l|--latest             ${WHITE}Select latest driver"
	echo -e "${GREEN}  -h|--help               ${WHITE}Show this message"
	echo ""
	echo -e "\nExamples:"
	echo -e "${GREEN}  nvidia-tool -y --latest update${WHITE}"
	echo -e "${GREEN}  nvidia-tool -y -l update${WHITE}"
	echo -e "${GREEN}  nvidia-tool -y update 460.32${WHITE}"
}

while [ -n "$1" ]; do
	option=$1
	
	if [[ $option == '--help' || $option == '-h' ]]; then
		showHelp
		exit 0
	elif [[ $option == '--yes' || $option == '-y' ]]; then
		yes=1
	elif [[ $option == '--latest' || $option == '-l' ]]; then
		latestVer=1
	elif [[ $option == '--stable' || $option == '-s' ]]; then
		stableVer=1
	elif [[ $option == 'services_start' || $option == 'start' ]]; then
		command='start'
	elif [[ $option == 'services_stop' || $option == 'stop' ]]; then
		command='stop'
	elif [[ $option == 'get-bios' || $option == 'get_bios' ]]; then
		command='getBios'

		shift
		if [[ ! -z $1 ]]; then
			gpuId=$1
		else
			echo -e "${RED}Not enough arguments for command $option${WHITE}"
			exit 1
		fi
	elif [[ $option == 'save-bios' || $option == 'save_bios' ]]; then
		command='saveBios'

		shift
		if [[ ! -z $1 ]]; then
			gpuId=$1
		else
			echo -e "${RED}Not enough arguments for command $option${WHITE}"
			exit 1
		fi

		shift
		if [[ ! -z $1 ]]; then
			file=$1
		else
			echo -e "${RED}Not enough arguments for command $option${WHITE}"
			exit 1
		fi
	elif [[ $option == 'flash_bios' || $option == 'flash' ]]; then
		command='flashBios'
		gpu_i=$1
	file=$2
	[[ ! -z $3 ]] && add="$3"

		shift
		if [[ ! -z $1 ]]; then
			gpuId=$1
		else
			echo -e "${RED}Not enough arguments for command $option${WHITE}"
			exit 1
		fi

		shift
		if [[ ! -z $1 ]]; then
			file=$1
		else
			echo -e "${RED}Not enough arguments for command $option${WHITE}"
			exit 1
		fi

		shift
		[[ ! -z $1 ]] && add="$1"
	elif [[ $option == 'update' ]]; then
		command='install'
		shift
		[[ ! -z $1 ]] && url=$1	
	else
		echo "Uncorrect argument $option"
	fi

	shift
done

case $command in
	start)
		services_start
	;;
	stop)
		services_stop
	;;
	getBios)
		get_biosver $gpuId
	;;
	saveBios)
		save_bios $gpuId $file
	;;
	flashBios)
		flash_bios $gpuId $file "$add"
	;;
	install)
		driver_install $url
	;;
	*)
		echo -e "${RED}No command specified${WHITE}"
		showHelp
		exit 1
	;;
esac
