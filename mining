#!/bin/bash
#at first make Nvidia & AMD OC, then every 10 sec checks if the miners are closed, return them to live. Logic: second miner closes if it has same name with first
RIG_CFG="/dog/cfg/rig.cfg"
LOG="/dog/log/mining.log"
exec &>>$LOG
BATCH_CFG="/dog/cfg/batch.cfg"
MINERLOG1="/dog/log/miner1.log"
MINERLOG2="/dog/log/miner2.log"
SCREEN_CFG="/dog/service/screenrc.miner"
. $RIG_CFG

[[ $SERVICE_MODE -gt 0 ]] && echo "`date --rfc-3339=seconds)` Service $0 will not be started due to service mode" && exit 0
echo "================================================================"
echo $(date --rfc-3339=seconds)" Started new session $0"

#returns number of opened screens with argument name
function screen_check () {
	[[ $(screen -ls | grep -c "$1")  > 0 ]]&& echo $(screen -ls | grep -c "$1") || echo "0"
}

#check if config files exists
[[ ! -f $BATCH_CFG ]] && echo "Configuration file $BATCH_CFG does not exist! Can\`t mine without configs..."

export "PATH=$PATH:/dog:/dog/bin:/dog/sbin" #need to run OSdog scripts without prefix
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/dog/lib
export CUDA_DEVICE_ORDER

#OC
[[ $(gpu-detect all) -gt 0 ]] && sleep 7
[[ $(gpu-detect AMD) -gt 0 ]] && amd-oc --firstrun
[[ $(gpu-detect NVIDIA) -gt 0 ]] && nvidia-oc --pill-delay

while true; do
	#source here for online updates
	if [[ -f $BATCH_CFG ]];  then
		. $BATCH_CFG
		if [[ ! $batch1 ]]; then
			if [[ $(screen_check miner1) -gt 0 ]]; then
				screen-kill miner1
				echo $(date --rfc-3339=seconds)" Killed previous miner1 screen [code 3: miner is not selected/stopped]"
			fi
		elif [[ $(screen_check miner1) -eq 0 ]]; then #miner is set up, screens = 0
			#wd restart
			screen -c $SCREEN_CFG -dmS miner1.$miner1 -Logfile $MINERLOG1 bash -c "miner-loop $miner1 $port1 \"$batch1\""
			echo -n $(date --rfc-3339=seconds)" Started miner1 screen with $miner1 "
			[[ $batch1 == $lastcheck ]] && echo "[code 2: miner is not changed, but closed]" || echo "[code 0: simple start]"
		elif [[	$batch1 != $lastcheck ]]; then #miner is set up, screens > 0, just check if miner changed, if not, everething is ok
			screen-kill miner1
			#wd restart
			screen -c $SCREEN_CFG -dmS miner1.$miner1 -Logfile $MINERLOG1 bash -c "miner-loop $miner1 $port1 \"$batch1\""
			echo $(date --rfc-3339=seconds)" Restarted miner1 screen with $miner1 [code 1: miner changed]"
		fi
		
		if [[ ! $batch2 ]]; then #check if miner2 is set up
			if [[ $(screen_check miner2) -gt 0 ]]; then
				screen-kill miner2
				echo $(date --rfc-3339=seconds)" Killed previous miner2 screen [code 3: miner is not selected/stopped]"
			fi
		elif [[ $batch2 == $lastcheck2 ]]; then #ok, miner is set up and miner = last check
			if [[ $(screen_check miner2) == 0 ]]; then
				if [[ $batch2 != $batch1 ]]; then #if miner2 is set up, screen = 0, miner2 != miner1
					#wd restart
					screen -c $SCREEN_CFG -dmS miner2.$miner2 -Logfile $MINERLOG2 bash -c "miner-loop $miner2 $port2 \"$batch2\" $MINER2_WAIT"
					echo $(date --rfc-3339=seconds)" Started miner2 screen with $miner2 [code 2: miner is not changed, but closed]"
				fi
			else #ok, miner is set up and miner = last check and miner2 = miner1
				if [[ $batch2 == $batch1 ]]; then
					screen-kill miner2
					echo $(date --rfc-3339=seconds)" Killed previous miner2 screen [code 5: you can\`t start two same miners]"
				fi
			fi
		elif [[ $(screen_check miner2) == 0 ]]; then 
			if [[ ! $batch2 == $batch1 ]]; then #miner is set up, miner != last check (changed or first run) and screen = 0 and miner1 != miner2
				#wd restart
				screen -c $SCREEN_CFG -dmS miner2.$miner2 -Logfile $MINERLOG2 bash -c "miner-loop $miner2 $port2 \"$batch2\" $MINER2_WAIT"
				echo $(date --rfc-3339=seconds)" Started miner2 screen with $miner2 [code 0: simple start]"
			fi
		else #miner is set up, miner != last check, screen > 0
			if [[ $batch2 != $batch1 ]]; then  #miner is set up, miner != last check (changed or first run), screen > 0, miner1 != miner2
				screen-kill miner2
				wd restart
				echo $(date --rfc-3339=seconds)" Restarted miner2 screen with $miner2 [code 1: miner changed]"
			else #miner is set up, miner != last check (changed or first run), screen > 0, miner1 = miner2 => miner2 changed to the same to miner 
				screen-kill miner2
				echo $(date --rfc-3339=seconds)" Killed previous miner2 screen [code 5: you can\`t start two same miners]"
			fi
		fi

		lastcheck=$batch1
		lastcheck2=$batch2
	else
		echo $(date --rfc-3339=seconds)" Batch file $BATCH_CFG doesn\`t exist, sleep 10 seconds"	
	fi
	sleep 10
	echo "$(tail -n 1000 $LOG)" > $LOG
	
	for ((i=1; i <= 2; i++)); do
		eval "logfile=\$MINERLOG$i"
		eval "batch=\$batch$i"
		
		if [[ ! -z $batch ]]; then
			strings=`wc $logfile | awk '{print $1}'`
			[[ $strings -gt 1000 ]] && echo `tail -n 1000 $logfile` > $logfile
		else
			[[ -f $logfile ]] && rm $logfile
		fi
	done
	
done
